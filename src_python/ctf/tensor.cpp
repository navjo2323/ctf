/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/navjot2/ctf/include/ctf.hpp",
            "/home/navjot2/myenv/lib/python3.11/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/navjot2/myenv/lib/python3.11/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/home/navjot2/myenv/lib/python3.11/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/home/navjot2/myenv/lib/python3.11/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/home/navjot2/myenv/lib/python3.11/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "ctf_ext.h"
        ],
        "extra_compile_args": [
            "-O3",
            "-fopenmp"
        ],
        "extra_link_args": [
            "-L/home/navjot2/ctf/lib_shared",
            "-O3",
            "-fopenmp"
        ],
        "include_dirs": [
            "ctf",
            "/home/navjot2/myenv/lib/python3.11/site-packages/numpy/core/include",
            "/home/navjot2/ctf/include",
            "."
        ],
        "language": "c++",
        "libraries": [
            "ctf",
            "blas",
            "lapack"
        ],
        "name": "ctf.tensor",
        "sources": [
            "ctf/tensor.pyx"
        ]
    },
    "module_name": "ctf.tensor"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__ctf__tensor
#define __PYX_HAVE_API__ctf__tensor
/* Early includes */
#include <stdint.h>
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "ctf.hpp"
#include <stdlib.h>
#include "../ctf_ext.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "ctf/tensor.pyx",
  "__init__.cython-30.pxd",
  "<stringsource>",
  "type.pxd",
  "ctf/partition.pxd",
  "ctf/term.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":757
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":758
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":763
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":764
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":765
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_3ctf_9partition_partition;
struct __pyx_obj_3ctf_9partition_idx_partition;
struct __pyx_obj_3ctf_4term_term;
struct __pyx_obj_3ctf_4term_itensor;
struct __pyx_obj_3ctf_6tensor_tensor;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "ctf/partition.pxd":11
 *         Idx_Partition()
 * 
 * cdef class partition:             # <<<<<<<<<<<<<<
 *     cdef Partition * p
 * 
 */
struct __pyx_obj_3ctf_9partition_partition {
  PyObject_HEAD
  CTF::Partition *p;
};


/* "ctf/partition.pxd":14
 *     cdef Partition * p
 * 
 * cdef class idx_partition:             # <<<<<<<<<<<<<<
 *     cdef Idx_Partition * ip
 *     cdef partition part
 */
struct __pyx_obj_3ctf_9partition_idx_partition {
  PyObject_HEAD
  CTF::Idx_Partition *ip;
  struct __pyx_obj_3ctf_9partition_partition *part;
};


/* "ctf/term.pxd":39
 * 
 * 
 * cdef class term:             # <<<<<<<<<<<<<<
 *     cdef Term * tm
 *     cdef cnp.dtype dtype
 */
struct __pyx_obj_3ctf_4term_term {
  PyObject_HEAD
  CTF_int::Term *tm;
  PyArray_Descr *dtype;
};


/* "ctf/term.pxd":43
 *     cdef cnp.dtype dtype
 * 
 * cdef class itensor(term):             # <<<<<<<<<<<<<<
 *     cdef Idx_Tensor * it
 *     cdef tensor tsr
 */
struct __pyx_obj_3ctf_4term_itensor {
  struct __pyx_obj_3ctf_4term_term __pyx_base;
  CTF::Idx_Tensor *it;
  struct __pyx_obj_3ctf_6tensor_tensor *tsr;
  PyObject *string;
};


/* "ctf/tensor.pxd":112
 *         dtype norm_infty()
 * 
 * cdef class tensor:             # <<<<<<<<<<<<<<
 *     cdef ctensor * dt
 *     cdef int order
 */
struct __pyx_obj_3ctf_6tensor_tensor {
  PyObject_HEAD
  CTF_int::tensor *dt;
  int order;
  int sp;
  PyArrayObject *sym;
  int ndim;
  size_t size;
  int itemsize;
  size_t nbytes;
  PyObject *strides;
  PyArray_Descr *dtype;
  PyObject *shape;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pynumber_float.proto */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* FromPy.proto */
static __pyx_t_float_complex __Pyx_PyComplex_As___pyx_t_float_complex(PyObject*);

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_8(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.stdint" */

/* Module declarations from "libcpp" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "ctf.partition" */

/* Module declarations from "ctf.world" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "ctf.term" */

/* Module declarations from "ctf.chelper" */
static int64_t *(*__pyx_f_3ctf_7chelper_int64_t_arr_py_to_c)(PyObject *); /*proto*/
static int *(*__pyx_f_3ctf_7chelper_int_arr_py_to_c)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_3ctf_7chelper__cast_carray_as_python)(PyObject *, char *, PyObject *); /*proto*/

/* Module declarations from "ctf" */

/* Module declarations from "ctf.tensor" */
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "ctf.tensor"
extern int __pyx_module_is_main_ctf__tensor;
int __pyx_module_is_main_ctf__tensor = 0;

/* Implementation of "ctf.tensor" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_AS[] = "AS";
static const char __pyx_k_NS[] = "NS";
static const char __pyx_k_SH[] = "SH";
static const char __pyx_k_SY[] = "SY";
static const char __pyx_k__3[] = "";
static const char __pyx_k_ca[] = "ca";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_i8[] = "i8";
static const char __pyx_k_mn[] = "mn";
static const char __pyx_k_mx[] = "mx";
static const char __pyx_k_na[] = "na";
static const char __pyx_k_nb[] = "nb";
static const char __pyx_k_no[] = "no";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_sp[] = "sp";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_sz[] = "sz";
static const char __pyx_k_tB[] = "tB";
static const char __pyx_k_SYM[] = "SYM";
static const char __pyx_k__55[] = "*";
static const char __pyx_k__56[] = ".";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_arr[] = "arr";
static const char __pyx_k_blk[] = "blk";
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_ctf[] = "ctf";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_div[] = "_div";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_mod[] = "mod";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_p_A[] = "p_A";
static const char __pyx_k_p_B[] = "p_B";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_prl[] = "prl";
static const char __pyx_k_put[] = "put";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_scl[] = "scl";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sym[] = "sym";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k__173[] = "?";
static const char __pyx_k_axes[] = "axes";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_bool[] = "bool_";
static const char __pyx_k_cast[] = "cast";
static const char __pyx_k_comm[] = "comm";
static const char __pyx_k_conj[] = "conj";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_ends[] = "ends";
static const char __pyx_k_enum[] = "_enum";
static const char __pyx_k_imag[] = "imag";
static const char __pyx_k_inds[] = "inds";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_lens[] = "lens";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_memo[] = "memo";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_nega[] = "nega";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_prnt[] = "prnt";
static const char __pyx_k_rank[] = "rank";
static const char __pyx_k_rarr[] = "rarr";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_real[] = "real";
static const char __pyx_k_safe[] = "safe";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_take[] = "take";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_align[] = "align";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_axis1[] = "axis1";
static const char __pyx_k_axis2[] = "axis2";
static const char __pyx_k_cdata[] = "cdata";
static const char __pyx_k_cends[] = "cends";
static const char __pyx_k_cinds[] = "cinds";
static const char __pyx_k_cinit[] = "__cinit__";
static const char __pyx_k_clens[] = "clens";
static const char __pyx_k_coffs[] = "coffs";
static const char __pyx_k_cvals[] = "cvals";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_enums[] = "enums";
static const char __pyx_k_equiv[] = "equiv";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_gvals[] = "gvals";
static const char __pyx_k_idx_2[] = "idx_";
static const char __pyx_k_idx_A[] = "idx_A";
static const char __pyx_k_idx_B[] = "idx_B";
static const char __pyx_k_idx_C[] = "idx_C";
static const char __pyx_k_iinds[] = "iinds";
static const char __pyx_k_int16[] = "int16";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_mystr[] = "mystr";
static const char __pyx_k_norm1[] = "norm1";
static const char __pyx_k_norm2[] = "norm2";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_power[] = "power";
static const char __pyx_k_raise[] = "raise";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_timer[] = "timer";
static const char __pyx_k_trace[] = "trace";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_vvals[] = "vvals";
static const char __pyx_k_world[] = "world";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_A_ends[] = "A_ends";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_arr_in[] = "arr_in";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_caends[] = "caends";
static const char __pyx_k_caoffs[] = "caoffs";
static const char __pyx_k_czeros[] = "czeros";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_helper[] = "helper";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_init_A[] = "init_A";
static const char __pyx_k_number[] = "number";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_out_sp[] = "out_sp";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sample[] = "sample";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_tensor[] = "tensor";
static const char __pyx_k_thresh[] = "thresh";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_unsafe[] = "unsafe";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_casting[] = "casting";
static const char __pyx_k_complex[] = "complex";
static const char __pyx_k_dim_ret[] = "dim_ret";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_float16[] = "float16";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_frac_sp[] = "frac_sp";
static const char __pyx_k_gen_tsr[] = "gen_tsr";
static const char __pyx_k_index_A[] = "index_A";
static const char __pyx_k_index_B[] = "index_B";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_integer[] = "integer";
static const char __pyx_k_maximum[] = "maximum";
static const char __pyx_k_ndarray[] = "ndarray";
static const char __pyx_k_offsets[] = "offsets";
static const char __pyx_k_out_sym[] = "out_sym";
static const char __pyx_k_out_tsr[] = "out_tsr";
static const char __pyx_k_permute[] = "permute";
static const char __pyx_k_profile[] = "profile";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_set_all[] = "set_all";
static const char __pyx_k_astensor[] = "astensor";
static const char __pyx_k_bool_sum[] = "_bool_sum";
static const char __pyx_k_deepcopy[] = "deepcopy";
static const char __pyx_k_diagonal[] = "diagonal";
static const char __pyx_k_dim_keep[] = "dim_keep";
static const char __pyx_k_float128[] = "float128";
static const char __pyx_k_get_dims[] = "get_dims";
static const char __pyx_k_get_type[] = "get_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_ind_coll[] = "ind_coll";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_keepdims[] = "keepdims";
static const char __pyx_k_new_size[] = "new_size";
static const char __pyx_k_newshape[] = "newshape";
static const char __pyx_k_ord_comp[] = "_ord_comp";
static const char __pyx_k_out_dims[] = "out_dims";
static const char __pyx_k_read_all[] = "read_all";
static const char __pyx_k_set_zero[] = "set_zero";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_sparsify[] = "sparsify";
static const char __pyx_k_str_self[] = "str_self";
static const char __pyx_k_take_abs[] = "take_abs";
static const char __pyx_k_tensor_T[] = "tensor.T";
static const char __pyx_k_tensor_i[] = "tensor.i";
static const char __pyx_k_tot_size[] = "tot_size";
static const char __pyx_k_A_offsets[] = "A_offsets";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_complex64[] = "complex64";
static const char __pyx_k_ctf_world[] = "ctf.world";
static const char __pyx_k_dims_keep[] = "dims_keep";
static const char __pyx_k_get_slice[] = "_get_slice";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_mystrides[] = "mystrides";
static const char __pyx_k_nega_size[] = "nega_size";
static const char __pyx_k_new_shape[] = "new_shape";
static const char __pyx_k_out_dtype[] = "out_dtype";
static const char __pyx_k_out_order[] = "out_order";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_pyreshape[] = "pyreshape";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_rev_array[] = "_rev_array";
static const char __pyx_k_same_kind[] = "same_kind";
static const char __pyx_k_str_dtype[] = "str_dtype";
static const char __pyx_k_t_reshape[] = "t_reshape";
static const char __pyx_k_tensordot[] = "tensordot";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_transpose[] = "transpose";
static const char __pyx_k_with_vals[] = "with_vals";
static const char __pyx_k_write_all[] = "__write_all";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_class_bool[] = "<class 'bool'>";
static const char __pyx_k_complex128[] = "complex128";
static const char __pyx_k_ctf_helper[] = "ctf.helper";
static const char __pyx_k_ctf_tensor[] = "ctf.tensor";
static const char __pyx_k_deepcopy_2[] = "__deepcopy__";
static const char __pyx_k_exp_python[] = "_exp_python";
static const char __pyx_k_index_temp[] = "index_temp";
static const char __pyx_k_norm_infty[] = "norm_infty";
static const char __pyx_k_read_all_2[] = "__read_all";
static const char __pyx_k_read_local[] = "read_local";
static const char __pyx_k_tensor_all[] = "tensor.all";
static const char __pyx_k_tensor_aux[] = "tensor_aux";
static const char __pyx_k_tensor_dot[] = "tensor.dot";
static const char __pyx_k_tensor_sum[] = "tensor.sum";
static const char __pyx_k_to_nparray[] = "to_nparray";
static const char __pyx_k_total_size[] = "total_size";
static const char __pyx_k_type_index[] = "type_index";
static const char __pyx_k_unpack_sym[] = "unpack_sym";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_ctf_profile[] = "ctf.profile";
static const char __pyx_k_fill_random[] = "fill_random";
static const char __pyx_k_get_num_str[] = "_get_num_str";
static const char __pyx_k_red_idx_num[] = "red_idx_num";
static const char __pyx_k_result_type[] = "result_type";
static const char __pyx_k_tensor_conj[] = "tensor.conj";
static const char __pyx_k_tensor_copy[] = "tensor.copy";
static const char __pyx_k_tensor_imag[] = "tensor.imag";
static const char __pyx_k_tensor_item[] = "tensor.item";
static const char __pyx_k_tensor_prnt[] = "tensor.prnt";
static const char __pyx_k_tensor_read[] = "tensor.read";
static const char __pyx_k_tensor_real[] = "tensor.real";
static const char __pyx_k_tensor_take[] = "tensor.take";
static const char __pyx_k_write_slice[] = "_write_slice";
static const char __pyx_k_convert_type[] = "_convert_type";
static const char __pyx_k_from_nparray[] = "from_nparray";
static const char __pyx_k_get_np_dtype[] = "_get_np_dtype";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_read_all_nnz[] = "read_all_nnz";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_tensor_norm1[] = "tensor.norm1";
static const char __pyx_k_tensor_norm2[] = "tensor.norm2";
static const char __pyx_k_tensor_ravel[] = "tensor.ravel";
static const char __pyx_k_tensor_trace[] = "tensor.trace";
static const char __pyx_k_tensor_write[] = "tensor.write";
static const char __pyx_k_class_complex[] = "<class 'complex'>";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_count_nonzero[] = "count_nonzero";
static const char __pyx_k_ctf_partition[] = "ctf.partition";
static const char __pyx_k_permutation_A[] = "permutation_A";
static const char __pyx_k_permutation_B[] = "permutation_B";
static const char __pyx_k_pytensor_init[] = "pytensor_init";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_tensor_astype[] = "tensor.astype";
static const char __pyx_k_tensor_sample[] = "tensor.sample";
static const char __pyx_k_write_to_file[] = "write_to_file";
static const char __pyx_k_ctf_tensor_aux[] = "ctf.tensor_aux";
static const char __pyx_k_ctf_tensor_pyx[] = "ctf/tensor.pyx";
static const char __pyx_k_fill_sp_random[] = "fill_sp_random";
static const char __pyx_k_read_from_file[] = "read_from_file";
static const char __pyx_k_read_local_nnz[] = "read_local_nnz";
static const char __pyx_k_tensor_permute[] = "tensor.permute";
static const char __pyx_k_tensor_reshape[] = "tensor.reshape";
static const char __pyx_k_tensor_set_all[] = "tensor.set_all";
static const char __pyx_k_compare_tensors[] = "_compare_tensors";
static const char __pyx_k_invert_elements[] = "_invert_elements";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_tensor_diagonal[] = "tensor.diagonal";
static const char __pyx_k_tensor_get_dims[] = "tensor.get_dims";
static const char __pyx_k_tensor_get_type[] = "tensor.get_type";
static const char __pyx_k_tensor_read_all[] = "tensor.read_all";
static const char __pyx_k_tensor_set_zero[] = "tensor.set_zero";
static const char __pyx_k_tensor_sparsify[] = "tensor.sparsify";
static const char __pyx_k_tensor_tot_size[] = "tensor.tot_size";
static const char __pyx_k_ufunc_interpret[] = "_ufunc_interpret";
static const char __pyx_k_get_distribution[] = "get_distribution";
static const char __pyx_k_tensor__bool_sum[] = "tensor._bool_sum";
static const char __pyx_k_tensor__read_all[] = "_tensor__read_all";
static const char __pyx_k_tensor_tensordot[] = "tensor.tensordot";
static const char __pyx_k_tensor_transpose[] = "tensor.transpose";
static const char __pyx_k_setgetitem_helper[] = "_setgetitem_helper";
static const char __pyx_k_tensor_T_line_544[] = "tensor.T (line 544)";
static const char __pyx_k_tensor___deepcopy[] = "tensor.__deepcopy__";
static const char __pyx_k_tensor___read_all[] = "tensor.__read_all";
static const char __pyx_k_tensor__get_slice[] = "tensor._get_slice";
static const char __pyx_k_tensor__write_all[] = "_tensor__write_all";
static const char __pyx_k_tensor_norm_infty[] = "tensor.norm_infty";
static const char __pyx_k_tensor_read_local[] = "tensor.read_local";
static const char __pyx_k_tensor_to_nparray[] = "tensor.to_nparray";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_match_tensor_types[] = "_match_tensor_types";
static const char __pyx_k_tensor___write_all[] = "tensor.__write_all";
static const char __pyx_k_tensor__exp_python[] = "tensor._exp_python";
static const char __pyx_k_tensor_fill_random[] = "tensor.fill_random";
static const char __pyx_k_tensor_i_line_1228[] = "tensor.i (line 1228)";
static const char __pyx_k_use_align_for_pair[] = "_use_align_for_pair";
static const char __pyx_k_tensor__write_slice[] = "tensor._write_slice";
static const char __pyx_k_tensor_from_nparray[] = "tensor.from_nparray";
static const char __pyx_k_tensor_read_all_nnz[] = "tensor.read_all_nnz";
static const char __pyx_k_tensor__convert_type[] = "tensor._convert_type";
static const char __pyx_k_tensor_all_line_1027[] = "tensor.all (line 1027)";
static const char __pyx_k_tensor_dot_line_1706[] = "tensor.dot (line 1706)";
static const char __pyx_k_tensor_sum_line_2339[] = "tensor.sum (line 2339)";
static const char __pyx_k_tensor_write_to_file[] = "tensor.write_to_file";
static const char __pyx_k_tensor_conj_line_1894[] = "tensor.conj (line 1894)";
static const char __pyx_k_tensor_copy_line_1367[] = "tensor.copy (line 1367)";
static const char __pyx_k_tensor_fill_sp_random[] = "tensor.fill_sp_random";
static const char __pyx_k_tensor_imag_line_1319[] = "tensor.imag (line 1319)";
static const char __pyx_k_tensor_prnt_line_1257[] = "tensor.prnt (line 1257)";
static const char __pyx_k_tensor_read_from_file[] = "tensor.read_from_file";
static const char __pyx_k_tensor_read_local_nnz[] = "tensor.read_local_nnz";
static const char __pyx_k_tensor_real_line_1274[] = "tensor.real (line 1274)";
static const char __pyx_k_tensor_take_line_2540[] = "tensor.take (line 2540)";
static const char __pyx_k_an_integer_is_required[] = "an integer is required";
static const char __pyx_k_tensor___reduce_cython[] = "tensor.__reduce_cython__";
static const char __pyx_k_tensor_norm1_line_2376[] = "tensor.norm1 (line 2376)";
static const char __pyx_k_tensor_norm2_line_2400[] = "tensor.norm2 (line 2400)";
static const char __pyx_k_tensor_ravel_line_1482[] = "tensor.ravel (line 1482)";
static const char __pyx_k_tensor_trace_line_2265[] = "tensor.trace (line 2265)";
static const char __pyx_k_duplicate_value_in_axis[] = "duplicate value in 'axis'";
static const char __pyx_k_input_should_be_tensors[] = "input should be tensors";
static const char __pyx_k_tensor__compare_tensors[] = "tensor._compare_tensors";
static const char __pyx_k_tensor__invert_elements[] = "tensor._invert_elements";
static const char __pyx_k_tensor__ufunc_interpret[] = "tensor._ufunc_interpret";
static const char __pyx_k_tensor_astype_line_1580[] = "tensor.astype (line 1580)";
static const char __pyx_k_tensor_get_distribution[] = "tensor.get_distribution";
static const char __pyx_k_tensor_sample_line_2595[] = "tensor.sample (line 2595)";
static const char __pyx_k_tensor___setstate_cython[] = "tensor.__setstate_cython__";
static const char __pyx_k_tensor_reshape_line_1391[] = "tensor.reshape (line 1391)";
static const char __pyx_k_tensor_set_all_line_2196[] = "tensor.set_all (line 2196)";
static const char __pyx_k_tensor_diagonal_line_2305[] = "tensor.diagonal (line 2305)";
static const char __pyx_k_tensor_set_zero_line_2180[] = "tensor.set_zero (line 2180)";
static const char __pyx_k_tensor_transpose_line_569[] = "tensor.transpose (line 569)";
static const char __pyx_k_CTF_PYTHON_ERROR_bad_dtype[] = "CTF PYTHON ERROR: bad dtype";
static const char __pyx_k_tensor_tensordot_line_1739[] = "tensor.tensordot (line 1739)";
static const char __pyx_k_axis_entry_is_out_of_bounds[] = "'axis' entry is out of bounds";
static const char __pyx_k_tensor_fill_random_line_851[] = "tensor.fill_random (line 851)";
static const char __pyx_k_tensor_norm_infty_line_2436[] = "tensor.norm_infty (line 2436)";
static const char __pyx_k_tensor_to_nparray_line_2481[] = "tensor.to_nparray (line 2481)";
static const char __pyx_k_tensor_from_nparray_line_2511[] = "tensor.from_nparray (line 2511)";
static const char __pyx_k_can_not_reshape_into_this_size[] = "can not reshape into this size";
static const char __pyx_k_conj_Return_the_self_conjugate[] = "\n        conj()\n        Return the self conjugate tensor element-wisely.\n\n        Returns\n        -------\n        output: tensor\n            The element-wise complex conjugate of the tensor. If the tensor is not complex, just return a copy.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([2+3j, 3-2j])\n        >>> a\n        array([2.+3.j, 3.-2.j])\n        >>> a.conj()\n        array([2.-3.j, 3.+2.j])\n        ";
static const char __pyx_k_from_nparray_arr_Convert_numpy[] = "\n        from_nparray(arr)\n        Convert numpy ndarray to CTF tensor.\n\n        Returns\n        -------\n        output: tensor\n            CTF tensor of the numpy ndarray.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> import numpy as np\n        >>> a = np.asarray([1.,2.,3.])\n        >>> b = zeros([3, ])\n        >>> b.from_nparray(a)\n        >>> b\n        array([1., 2., 3.])\n        ";
static const char __pyx_k_prnt_Function_to_print_the_non[] = "\n        prnt()\n        Function to print the non-zero elements and their indices of a tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([0,1,2,3,0])\n        >>> a.prnt()\n        Printing tensor ZYTP01\n        [1](1, <1>)\n        [2](2, <2>)\n        [3](3, <3>)\n        ";
static const char __pyx_k_set_all_value_Set_all_elements[] = "\n        set_all(value)\n        Set all elements in a tensor to a value.\n\n        Parameters\n        ----------\n        value: scalar\n            Value set to a tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1,2,3])\n        >>> a.set_all(3)\n        >>> a\n        array([3, 3, 3])\n        ";
static const char __pyx_k_set_zero_Set_all_elements_in_a[] = "\n        set_zero()\n        Set all elements in a tensor to zero.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1,2,3])\n        >>> a.set_zero()\n        >>> a\n        array([0, 0, 0])\n        ";
static const char __pyx_k_tensor_T_axes_None_Permute_the[] = "\n        tensor.T(axes=None)\n        Permute the dimensions of the input tensor.\n\n        Returns\n        -------\n        output: tensor\n            Tensor with permuted axes.\n\n        See Also\n        --------\n        ctf: transpose\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = zeros([3,4,5])\n        >>> a.shape\n        (3, 4, 5)\n        >>> a.T().shape\n        (5, 4, 3)\n        ";
static const char __pyx_k_tensor_fill_sp_random_line_899[] = "tensor.fill_sp_random (line 899)";
static const char __pyx_k_trace_offset_0_axis1_0_axis2_1[] = "\n        trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)\n        Return the sum over the diagonal of input tensor.\n\n        Parameters\n        ----------\n        offset: int, optional\n            Default is 0 which indicates the main diagonal.\n\n        axis1: int, optional\n            Default is 0 which indicates the first axis of 2-D tensor where diagonal is taken.\n\n        axis2: int, optional\n            Default is 1 which indicates the second axis of 2-D tensor where diagonal is taken.\n\n        dtype: data-type, optional\n            Numpy data-type, currently not supported in CTF Python trace().\n\n        out: tensor\n            Currently not supported in CTF Python trace().\n\n        Returns\n        -------\n        output: tensor or scalar\n            Sum along diagonal of input tensor.\n\n        See Also\n        --------\n        ctf: trace()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.trace()\n        15\n        ";
static const char __pyx_k_CTF_ERROR_cannot_call_imag_with[] = "CTF ERROR: cannot call imag with value on non-complex single/double precision tensor";
static const char __pyx_k_CTF_PYTHON_ERROR_cannot___write[] = "CTF PYTHON ERROR: cannot __write_all for this type of tensor";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_output[] = "CTF PYTHON ERROR: invalid output dtype";
static const char __pyx_k_CTF_PYTHON_ERROR_output_must_be[] = "CTF PYTHON ERROR: output must be an array";
static const char __pyx_k_CTF_PYTHON_ERROR_permute_cannot[] = "CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined";
static const char __pyx_k_all_axis_None_out_None_keepdims[] = "\n        all(axis=None, out=None, keepdims = False)\n        Return whether given an axis elements are True.\n\n        Parameters\n        ----------\n        axis: None or int, optional\n            Currently not supported in CTF Python.\n\n        out: tensor, optional\n            Currently not supported in CTF Python.\n\n        keepdims : bool, optional\n            Currently not supported in CTF Python.\n\n        Returns\n        -------\n        output: tensor_like\n            Output tensor or scalar.\n\n        See Also\n        --------\n        ctf: ctf.all\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[0, 1], [1, 1]])\n        >>> a.all()\n        False\n        ";
static const char __pyx_k_astype_dtype_order_F_casting_un[] = "\n        astype(dtype, order='F', casting='unsafe')\n        Copy the tensor to specified type.\n\n        Parameters\n        ----------\n        dtype: data-type\n            Numpy data-type.\n\n        order: {'F', 'C'}\n            Bytes order for the tensor.\n\n        casting: {\342\200\230no\342\200\231, \342\200\230equiv\342\200\231, \342\200\230safe\342\200\231, \342\200\230same_kind\342\200\231, \342\200\230unsafe\342\200\231}, optional\n            Control the casting. Please refer to numpy.ndarray.astype, please refer to numpy.ndarray.astype for more information.\n\n        Returns\n        -------\n        output: tensor\n            Copied tensor with specified data-type.\n\n        See Also\n        --------\n        numpy: numpy.ndarray.astype\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.dtype\n        <class 'numpy.int64'>\n        >>> a.astype(np.float64).dtype\n        <class 'numpy.float64'>\n        ";
static const char __pyx_k_casting_must_be_one_of_no_equiv[] = "casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'";
static const char __pyx_k_copy_Copy_the_tensor_to_a_new_t[] = "\n        copy()\n        Copy the tensor to a new tensor.\n\n        Returns\n        -------\n        output: tensor_like\n            Output copied tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> b = a.copy()\n        >>> id(a) == id(b)\n        False\n        >>> a == b\n        array([[ True,  True,  True],\n               [ True,  True,  True]])\n        ";
static const char __pyx_k_diagonal_offset_0_axis1_0_axis2[] = "\n        diagonal(offset=0, axis1=0, axis2=1)\n        Return the diagonal of the tensor if it is 2D. If the tensor is a higher order square tensor (same shape for every dimension), return diagonal of tensor determined by axis1=0, axis2=1.\n\n        Parameters\n        ----------\n        offset: int, optional\n            Default is 0 which indicates the main diagonal.\n\n        axis1: int, optional\n            Default is 0 which indicates the first axis of 2-D tensor where diagonal is taken.\n\n        axis2: int, optional\n            Default is 1 which indicates the second axis of 2-D tensor where diagonal is taken.\n\n        Returns\n        -------\n        output: tensor\n            Diagonal of input tensor.\n\n        Notes\n        -----\n        `tensor_aux.diagonal` only supports diagonal of square tensor with order more than 2.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.diagonal()\n        array([1, 5, 9])\n        ";
static const char __pyx_k_dot_other_out_None_Return_the_d[] = "\n        dot(other, out=None)\n        Return the dot product with tensor other.\n\n        Parameters\n        ----------\n        other: tensor_like\n            The other input tensor.\n\n        out: tensor\n            Currently not supported in CTF Python.\n\n        Returns\n        -------\n        output: tensor\n            Dot product of two tensors.\n\n        See Also\n        --------\n        numpy: numpy.dot()\n        ctf: dot()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> b = astensor([1,1,1])\n        >>> a.dot(b)\n        array([ 6, 15, 24])\n        ";
static const char __pyx_k_i_string_Core_function_on_summi[] = "\n        i(string)\n        Core function on summing the ctensor.\n\n        Parameters\n        ----------\n        string: string\n            Dimensions for summation.\n\n        Returns\n        -------\n        output: tensor_like\n            Output tensor or scalar.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> a.i(\"ij\") << a.i(\"ij\")\n        >>> a\n        array([[ 2,  4,  6],\n               [ 8, 10, 12]])\n        ";
static const char __pyx_k_imag_value_None_Return_imaginar[] = "\n        imag(value = None)\n        Return imaginary part of a tensor or set its imaginary part to new value.\n\n        Returns\n        -------\n        value: tensor_like\n            The value tensor set imaginary to the original tensor, current only support value tensor with dtype `np.float64` or `np.complex128`. Default is none.\n\n        See Also\n        --------\n        ctf: reshape()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1+2j, 3+4j])\n        >>> b = astensor([5,6], dtype=np.float64)\n        >>> a.imag(value = b)\n        >>> a\n        array([5.+2.j, 6.+4.j])\n        ";
static const char __pyx_k_item_must_be_called_on_array_of[] = "item() must be called on array of size 0";
static const char __pyx_k_norm1_1_norm_of_the_tensor_Retu[] = "\n        norm1()\n        1-norm of the tensor.\n\n        Returns\n        -------\n        output: scalar\n            1-norm of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a.norm1()\n        12.0\n        ";
static const char __pyx_k_norm2_2_norm_of_the_tensor_Retu[] = "\n        norm2()\n        2-norm of the tensor.\n\n        Returns\n        -------\n        output: scalar np.float64\n            2-norm of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a.norm2()\n        3.4641016151377544\n        ";
static const char __pyx_k_norm_infty_Infinity_norm_of_the[] = "\n        norm_infty()\n        Infinity norm of the tensor.\n\n        Returns\n        -------\n        output: scalar\n            Infinity norm of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a.norm_infty()\n        1.0\n        ";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_ravel_order_F_Return_the_flatte[] = "\n        ravel(order=\"F\")\n        Return the flattened tensor.\n\n        Returns\n        -------\n        output: tensor_like\n            Output flattened tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> a.ravel()\n        array([1, 2, 3, 4, 5, 6])\n        ";
static const char __pyx_k_real_value_None_Return_real_par[] = "\n        real(value = None)\n        Return real part of a tensor or set its real part to new value.\n\n        Returns\n        -------\n        value: tensor_like\n            The value tensor set real to the original tensor, current only support value tensor with dtype `np.float64` or `np.complex128`. Default is none.\n\n        See Also\n        --------\n        ctf: reshape()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1+2j, 3+4j])\n        >>> b = astensor([5,6], dtype=np.float64)\n        >>> a.real(value = b)\n        >>> a\n        array([5.+2.j, 6.+4.j])\n        ";
static const char __pyx_k_reshape_integer_Return_a_new_te[] = "\n        reshape(*integer)\n        Return a new tensor with reshaped shape.\n\n        Returns\n        -------\n        output: tensor_like\n            Output reshaped tensor.\n\n        See Also\n        --------\n        ctf: reshape()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> a.reshape(6,1)\n        array([[1],\n               [2],\n               [3],\n               [4],\n               [5],\n               [6]])\n        ";
static const char __pyx_k_sample_p_Extract_a_sample_of_th[] = "\n        sample(p)\n        Extract a sample of the entries (if sparse of the current nonzeros) by keeping each entry with probability p. Also transforms tensor into sparse format if not already.\n\n        Parameters\n        ----------\n        p: float\n            Probability that keep each entry.\n\n        Returns\n        -------\n        output: tensor or scalar\n            Elements extracted from the input tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.sample(0.1)\n        >>> a\n        array([[0, 0, 3],\n               [0, 0, 6],\n               [0, 0, 0]])\n        ";
static const char __pyx_k_sum_axis_None_dtype_None_out_No[] = "\n        sum(axis = None, dtype = None, out = None, keepdims = None)\n        Sum of elements in tensor or along specified axis.\n\n        Parameters\n        ----------\n        axis: None, int or tuple of ints\n            Axis or axes where the sum of elements is performed.\n\n        dtype: data-type, optional\n            Data-type for the output tensor.\n\n        out: tensor, optional\n            Alternative output tensor.\n\n        keepdims: None, bool, optional\n            If set to true, axes summed over will remain size one.\n\n        Returns\n        -------\n        output: tensor_like\n            Output tensor.\n\n        See Also\n        --------\n        numpy: numpy.sum()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.int64)\n        >>> a.sum()\n        12\n        ";
static const char __pyx_k_take_indices_axis_None_out_None[] = "\n        take(indices, axis=None, out=None, mode='raise')\n        Take elements from a tensor along axis.\n\n        Parameters\n        ----------\n        indices: tensor_like\n            Indices of the values wnat to be extracted.\n\n        axis: int, optional\n            Select values from which axis, default None.\n\n        out: tensor\n            Currently not supported in CTF Python take().\n\n        mode: {\342\200\230raise\342\200\231, \342\200\230wrap\342\200\231, \342\200\230clip\342\200\231}, optional\n            Currently not supported in CTF Python take().\n\n        Returns\n        -------\n        output: tensor or scalar\n            Elements extracted from the input tensor.\n\n        See Also\n        --------\n        numpy: numpy.take()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.take([0, 1, 2])\n        array([1, 2, 3])\n        ";
static const char __pyx_k_tensor_fill_random_mn_None_mx_N[] = "\n        tensor.fill_random(mn=None, mx=None)\n        Fill random elements to the tensor.\n\n        Parameters\n        ----------\n        mn: int or float\n            The range of random number from, default 0.\n\n        mx: int or float\n            The range of random number to, default 1.\n\n        See Also\n        --------\n        ctf: fill_sp_random()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = zeros([2, 2])\n        >>> a\n            array([[0., 0.],\n                   [0., 0.]])\n        >>> a.fill_random(3,5)\n        >>> a\n            array([[3.31908598, 4.34013067],\n                   [4.5355426 , 4.6763659 ]])\n        ";
static const char __pyx_k_tensor_fill_sp_random_mn_None_m[] = "\n        tensor.fill_sp_random(mn=None, mx=None, frac_sp=None)\n        Fill random elements to a sparse tensor.\n\n        Parameters\n        ----------\n        mn: int or float\n            The range of random number from, default 0.\n\n        mx: int or float\n            The range of random number to, default 1.\n\n        frac_sp: float\n            The percent of non-zero elements.\n\n        See Also\n        --------\n        ctf: fill_random()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.tensor([3, 3], sp=1)\n        >>> a.fill_sp_random(frac_sp=0.2)\n        >>> a\n        array([[0.96985989, 0.        , 0.        ],\n               [0.        , 0.        , 0.10310342],\n               [0.        , 0.        , 0.        ]])\n        ";
static const char __pyx_k_tensor_transpose_axes_Return_th[] = "\n        tensor.transpose(*axes)\n        Return the transposed tensor with specified order of axes.\n\n        Returns\n        -------\n        output: tensor\n            Tensor with permuted axes.\n\n        See Also\n        --------\n        ctf: transpose\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = zeros([3,4,5])\n        >>> a.shape\n        (3, 4, 5)\n        >>> a.transpose([2,1,0]).shape\n        (5, 4, 3)\n        ";
static const char __pyx_k_tensordot_other_axes_2_Return_t[] = "\n        tensordot(other, axes=2)\n        Return the tensor dot product of two tensors along axes.\n\n        Parameters\n        ----------\n        other: tensor_like\n            Second input tensor.\n\n        axes: int or array_like\n            Sum over which axes.\n\n        Returns\n        -------\n        output: tensor\n            Tensor dot product of two tensors.\n\n        See Also\n        --------\n        numpy: numpy.tensordot()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> import numpy as np\n        >>> a = np.arange(60.).reshape(3,4,5)\n        >>> b = np.arange(24.).reshape(4,3,2)\n        >>> a = astensor(a)\n        >>> b = astensor(b)\n        >>> a.tensordot(b, axes=([1,0],[0,1]))\n        array([[4400., 4730.],\n               [4532., 4874.],\n               [4664., 5018.],\n               [4796., 5162.],\n               [4928., 5306.]])\n        ";
static const char __pyx_k_to_nparray_Convert_tensor_to_nu[] = "\n        to_nparray()\n        Convert tensor to numpy ndarray.\n\n        Returns\n        -------\n        output: ndarray\n            Numpy ndarray of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a = ctf.ones([3,4])\n        >>> a.to_nparray()\n        array([[1., 1., 1., 1.],\n               [1., 1., 1., 1.],\n               [1., 1., 1., 1.]])\n        ";
static const char __pyx_k_CTF_ERROR_cannot_call_imag_on_no[] = "CTF ERROR: cannot call imag on non-complex/real single/double precision tensor";
static const char __pyx_k_CTF_PYTHON_ERROR_The_truth_value[] = "CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()";
static const char __pyx_k_CTF_PYTHON_ERROR_bad_dtype_of_va[] = "CTF PYTHON ERROR: bad dtype of vals parameter to read";
static const char __pyx_k_CTF_PYTHON_ERROR_can_only_specif[] = "CTF PYTHON ERROR: can only specify one unknown dimension";
static const char __pyx_k_CTF_PYTHON_ERROR_cannot___read_a[] = "CTF PYTHON ERROR: cannot __read_all for this type of tensor";
static const char __pyx_k_CTF_PYTHON_ERROR_current_CTF_Pyt[] = "CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_call_to[] = "CTF PYTHON ERROR: invalid call to __iadd__ (+=)";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_shape_a[] = "CTF PYTHON ERROR: invalid shape argument to reshape";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_shape_i[] = "CTF PYTHON ERROR: invalid shape input to reshape";
static const char __pyx_k_CTF_PYTHON_ERROR_norm_not_presen[] = "CTF PYTHON ERROR: norm not present for this dtype";
static const char __pyx_k_CTF_PYTHON_ERROR_only_length_1_t[] = "CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars";
static const char __pyx_k_CTF_PYTHON_ERROR_output_must_mat[] = "CTF PYTHON ERROR: output must match when keepdims = True";
static const char __pyx_k_CTF_PYTHON_ERROR_output_paramete[] = "CTF PYTHON ERROR: output parameter has too many dimensions";
static const char __pyx_k_CTF_PYTHON_ERROR_permute_must_be[] = "CTF PYTHON ERROR: permute must be called with either p_A or p_B defined";
static const char __pyx_k_CTF_PYTHON_ERROR_powering_functi[] = "CTF PYTHON ERROR: powering function does not accept third parameter (modulus)";
static const char __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow[] = "CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy";
static const char __pyx_k_CTF_PYTHON_ERROR_total_size_of_n[] = "CTF PYTHON ERROR: total size of new array must be unchanged";
static const char __pyx_k_CTF_PYTHON_ERROR_unable_to_perfo[] = "CTF PYTHON ERROR: unable to perform comparison between tensors of different shape";
static const char __pyx_k_Cannot_cast_array_from_dtype_0_t[] = "Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'";
static const char __pyx_k_Invalid_use_of_universal_functio[] = "Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match";
static const char __pyx_k_Specify_mesh_processor_toplogy_w[] = "Specify mesh processor toplogy with character labels";
static const char __pyx_k_Universal_functions_among_tensor[] = "Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported";
static const char __pyx_k_exponentiation_not_supported_for[] = "exponentiation not supported for these types";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_CTF_PYTHON_ERROR_current_CTF_Pyt_2[] = "CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_2[] = "CTF PYTHON ERROR: invalid call to __imul__ (*=)";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_3[] = "CTF PYTHON ERROR: invalid call to __isub__ (-=)";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_4[] = "CTF PYTHON ERROR: invalid call to __itruediv__ (/=)";
static const char __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_5[] = "CTF PYTHON ERROR: invalid call to __idiv__ (/=)";
static const char __pyx_k_CTF_PYTHON_ERROR_output_paramete_2[] = "CTF PYTHON ERROR: output parameter dimensions mismatch";
static const char __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_2[] = "CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy";
static const char __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_3[] = "CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy";
static const char __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_4[] = "CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy";
static const char __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_5[] = "CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy";
static const char __pyx_k_Cannot_cast_array_from_dtype_0_t_2[] = "Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'";
static const char __pyx_k_Cannot_cast_array_from_dtype_0_t_3[] = "Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_3ctf_6tensor__enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_enums); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_7strides___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_6nbytes___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_8itemsize___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_4size___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_4ndim___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_5shape___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_5dtype___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_5order___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_2sp___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_3sym___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_7nnz_tot___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor__bool_sum(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_2_convert_type(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_4get_dims(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_6get_type(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_8get_distribution(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static int __pyx_pf_3ctf_6tensor_6tensor_10__cinit__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_lens, PyObject *__pyx_v_sp, PyObject *__pyx_v_sym, PyObject *__pyx_v_dtype, PyObject *__pyx_v_order, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_copy, PyObject *__pyx_v_idx, struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_prl, struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_blk); /* proto */
static void __pyx_pf_3ctf_6tensor_6tensor_12__dealloc__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_14T(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_16transpose(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_axes); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_18_ufunc_interpret(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_other, PyObject *__pyx_v_gen_tsr); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_20__abs__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static int __pyx_pf_3ctf_6tensor_6tensor_22__nonzero__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_24__int__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_26__float__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_28__neg__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_30__add__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_32__iadd__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_34__mul__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_36__imul__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_38__sub__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_40__isub__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_42__truediv__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_44__itruediv__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in); /* proto */
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_46__div__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#endif
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_48__idiv__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in); /* proto */
#endif
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_50__pow__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_modulus); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_52_invert_elements(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_54__matmul__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#endif
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_56fill_random(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_mn, PyObject *__pyx_v_mx); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_58fill_sp_random(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_mn, PyObject *__pyx_v_mx, PyObject *__pyx_v_frac_sp); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_60read_from_file(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_with_vals); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_62write_to_file(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_with_vals); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_64_exp_python(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A, PyObject *__pyx_v_cast, PyObject *__pyx_v_dtype); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_66all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_out, PyObject *__pyx_v_keepdims); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_68i(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_string); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_70prnt(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_72real(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_74imag(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_76copy(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_78reshape(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_integer); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_80ravel(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_order); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_82read(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_inds, PyObject *__pyx_v_vals, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_84item(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_86astype(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_dtype, PyObject *__pyx_v_order, PyObject *__pyx_v_casting); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_88read_local(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack_sym); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_90dot(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_out); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_92tensordot(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_axes); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_94read_local_nnz(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack_sym); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_96tot_size(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_98read_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_unpack); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_100read_all_nnz(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_102__read_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_104__write_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_106conj(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_108permute(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A, PyObject *__pyx_v_p_A, PyObject *__pyx_v_p_B, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_110write(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_inds, PyObject *__pyx_v_vals, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_112_get_slice(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offsets, PyObject *__pyx_v_ends); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_114_write_slice(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offsets, PyObject *__pyx_v_ends, PyObject *__pyx_v_init_A, PyObject *__pyx_v_A_offsets, PyObject *__pyx_v_A_ends, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_116__deepcopy__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_118__getitem__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_key_init); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_120set_zero(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_122set_zero(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_124set_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3ctf_6tensor_6tensor_126__setitem__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_key_init, PyObject *__pyx_v_value_init); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_128trace(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_axis1, PyObject *__pyx_v_axis2, PyObject *__pyx_v_dtype, PyObject *__pyx_v_out); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_130diagonal(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_axis1, PyObject *__pyx_v_axis2); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_132sum(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_dtype, PyObject *__pyx_v_out, PyObject *__pyx_v_keepdims); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_134norm1(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_136norm2(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_138norm_infty(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_140sparsify(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_threshold, PyObject *__pyx_v_take_abs); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_142to_nparray(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_144__repr__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_146from_nparray(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_148take(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_indices, PyObject *__pyx_v_axis, PyObject *__pyx_v_out, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_150__richcmp__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_b, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_152sample(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_154_compare_tensors(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_b, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_156__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_158__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_3ctf_6tensor_tensor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_3ctf_9partition_partition;
  PyTypeObject *__pyx_ptype_3ctf_9partition_idx_partition;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_3ctf_4term_term;
  PyTypeObject *__pyx_ptype_3ctf_4term_itensor;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_3ctf_6tensor_tensor;
  #endif
  PyTypeObject *__pyx_ptype_3ctf_6tensor_tensor;
  PyObject *__pyx_n_s_A;
  PyObject *__pyx_n_s_AS;
  PyObject *__pyx_n_s_A_ends;
  PyObject *__pyx_n_s_A_offsets;
  PyObject *__pyx_n_s_B;
  PyObject *__pyx_n_s_C;
  PyObject *__pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no;
  PyObject *__pyx_kp_s_CTF_ERROR_cannot_call_imag_with;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_cannot___write;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_output;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_output_must_be;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_powering_functi;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n;
  PyObject *__pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo;
  PyObject *__pyx_kp_s_Cannot_cast_array_from_dtype_0_t;
  PyObject *__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2;
  PyObject *__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3;
  PyObject *__pyx_n_s_D;
  PyObject *__pyx_n_s_Enum;
  PyObject *__pyx_n_s_F;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_s_Invalid_use_of_universal_functio;
  PyObject *__pyx_n_s_NS;
  PyObject *__pyx_n_s_SH;
  PyObject *__pyx_n_s_SY;
  PyObject *__pyx_n_s_SYM;
  PyObject *__pyx_kp_s_Specify_mesh_processor_toplogy_w;
  PyObject *__pyx_n_s_T;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_s_Universal_functions_among_tensor;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s__173;
  PyObject *__pyx_kp_s__3;
  PyObject *__pyx_n_s__55;
  PyObject *__pyx_kp_u__56;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_n_s_abs;
  PyObject *__pyx_n_s_align;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_kp_u_all_axis_None_out_None_keepdims;
  PyObject *__pyx_n_s_alpha;
  PyObject *__pyx_kp_s_an_integer_is_required;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_arange;
  PyObject *__pyx_n_s_arr;
  PyObject *__pyx_n_s_arr_in;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_asarray;
  PyObject *__pyx_n_s_astensor;
  PyObject *__pyx_n_s_astype;
  PyObject *__pyx_kp_u_astype_dtype_order_F_casting_un;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_axes;
  PyObject *__pyx_n_s_axis;
  PyObject *__pyx_n_s_axis1;
  PyObject *__pyx_n_s_axis2;
  PyObject *__pyx_kp_s_axis_entry_is_out_of_bounds;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_beta;
  PyObject *__pyx_n_s_blk;
  PyObject *__pyx_n_s_bool;
  PyObject *__pyx_n_s_bool_sum;
  PyObject *__pyx_n_s_buf;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_s_ca;
  PyObject *__pyx_n_s_caends;
  PyObject *__pyx_kp_s_can_not_reshape_into_this_size;
  PyObject *__pyx_n_s_caoffs;
  PyObject *__pyx_n_s_cast;
  PyObject *__pyx_n_s_casting;
  PyObject *__pyx_kp_s_casting_must_be_one_of_no_equiv;
  PyObject *__pyx_n_s_cdata;
  PyObject *__pyx_n_s_cends;
  PyObject *__pyx_n_s_chr;
  PyObject *__pyx_n_s_cinds;
  PyObject *__pyx_n_s_cinit;
  PyObject *__pyx_kp_s_class_bool;
  PyObject *__pyx_kp_s_class_complex;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_clens;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_coffs;
  PyObject *__pyx_n_s_comm;
  PyObject *__pyx_n_s_compare_tensors;
  PyObject *__pyx_n_s_complex;
  PyObject *__pyx_n_s_complex128;
  PyObject *__pyx_n_s_complex64;
  PyObject *__pyx_n_s_conj;
  PyObject *__pyx_kp_u_conj_Return_the_self_conjugate;
  PyObject *__pyx_n_s_convert_type;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_kp_u_copy_Copy_the_tensor_to_a_new_t;
  PyObject *__pyx_n_s_count_nonzero;
  PyObject *__pyx_n_s_ctf;
  PyObject *__pyx_n_s_ctf_helper;
  PyObject *__pyx_n_s_ctf_partition;
  PyObject *__pyx_n_s_ctf_profile;
  PyObject *__pyx_n_s_ctf_tensor;
  PyObject *__pyx_n_s_ctf_tensor_aux;
  PyObject *__pyx_kp_s_ctf_tensor_pyx;
  PyObject *__pyx_n_s_ctf_world;
  PyObject *__pyx_n_s_cvals;
  PyObject *__pyx_n_s_czeros;
  PyObject *__pyx_n_s_d;
  PyObject *__pyx_n_s_deepcopy;
  PyObject *__pyx_n_s_deepcopy_2;
  PyObject *__pyx_n_s_delete;
  PyObject *__pyx_n_s_diagonal;
  PyObject *__pyx_kp_u_diagonal_offset_0_axis1_0_axis2;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dim;
  PyObject *__pyx_n_s_dim_keep;
  PyObject *__pyx_n_s_dim_ret;
  PyObject *__pyx_n_s_dims_keep;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_div;
  PyObject *__pyx_n_s_dot;
  PyObject *__pyx_kp_u_dot_other_out_None_Return_the_d;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_kp_s_duplicate_value_in_axis;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_ends;
  PyObject *__pyx_n_s_enum;
  PyObject *__pyx_n_s_enums;
  PyObject *__pyx_n_s_equiv;
  PyObject *__pyx_n_s_exp_python;
  PyObject *__pyx_kp_s_exponentiation_not_supported_for;
  PyObject *__pyx_n_s_fill_random;
  PyObject *__pyx_n_s_fill_sp_random;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_n_s_float128;
  PyObject *__pyx_n_s_float16;
  PyObject *__pyx_n_s_float32;
  PyObject *__pyx_n_s_float64;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_frac_sp;
  PyObject *__pyx_n_s_from_nparray;
  PyObject *__pyx_kp_u_from_nparray_arr_Convert_numpy;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_gen_tsr;
  PyObject *__pyx_n_s_get_dims;
  PyObject *__pyx_n_s_get_distribution;
  PyObject *__pyx_n_s_get_np_dtype;
  PyObject *__pyx_n_s_get_num_str;
  PyObject *__pyx_n_s_get_slice;
  PyObject *__pyx_n_s_get_type;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_gvals;
  PyObject *__pyx_n_s_helper;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_i8;
  PyObject *__pyx_kp_u_i_string_Core_function_on_summi;
  PyObject *__pyx_n_s_idx;
  PyObject *__pyx_n_s_idx_2;
  PyObject *__pyx_n_s_idx_A;
  PyObject *__pyx_n_s_idx_B;
  PyObject *__pyx_n_s_idx_C;
  PyObject *__pyx_n_s_iinds;
  PyObject *__pyx_n_s_imag;
  PyObject *__pyx_kp_u_imag_value_None_Return_imaginar;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_ind_coll;
  PyObject *__pyx_n_s_index_A;
  PyObject *__pyx_n_s_index_B;
  PyObject *__pyx_n_s_index_temp;
  PyObject *__pyx_n_s_indices;
  PyObject *__pyx_n_s_inds;
  PyObject *__pyx_n_s_init_A;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_kp_s_input_should_be_tensors;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_int16;
  PyObject *__pyx_n_s_int32;
  PyObject *__pyx_n_s_int64;
  PyObject *__pyx_n_s_int8;
  PyObject *__pyx_n_s_integer;
  PyObject *__pyx_n_s_invert_elements;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_item;
  PyObject *__pyx_kp_s_item_must_be_called_on_array_of;
  PyObject *__pyx_n_s_itemsize;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_n_s_keepdims;
  PyObject *__pyx_n_s_lens;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_match_tensor_types;
  PyObject *__pyx_n_s_maximum;
  PyObject *__pyx_n_s_memo;
  PyObject *__pyx_n_s_mn;
  PyObject *__pyx_n_s_mod;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_mx;
  PyObject *__pyx_n_s_mystr;
  PyObject *__pyx_n_s_mystrides;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_na;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nb;
  PyObject *__pyx_n_s_ndarray;
  PyObject *__pyx_n_s_ndim;
  PyObject *__pyx_n_s_nega;
  PyObject *__pyx_n_s_nega_size;
  PyObject *__pyx_n_s_new_shape;
  PyObject *__pyx_n_s_new_size;
  PyObject *__pyx_n_s_newshape;
  PyObject *__pyx_n_s_no;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_norm1;
  PyObject *__pyx_kp_u_norm1_1_norm_of_the_tensor_Retu;
  PyObject *__pyx_n_s_norm2;
  PyObject *__pyx_kp_u_norm2_2_norm_of_the_tensor_Retu;
  PyObject *__pyx_n_s_norm_infty;
  PyObject *__pyx_kp_u_norm_infty_Infinity_norm_of_the;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_number;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_offset;
  PyObject *__pyx_n_s_offsets;
  PyObject *__pyx_n_s_ones;
  PyObject *__pyx_n_s_op;
  PyObject *__pyx_n_s_ord_comp;
  PyObject *__pyx_n_s_order;
  PyObject *__pyx_n_s_other;
  PyObject *__pyx_n_s_out;
  PyObject *__pyx_n_s_out_dims;
  PyObject *__pyx_n_s_out_dtype;
  PyObject *__pyx_n_s_out_order;
  PyObject *__pyx_n_s_out_sp;
  PyObject *__pyx_n_s_out_sym;
  PyObject *__pyx_n_s_out_tsr;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_n_s_p_A;
  PyObject *__pyx_n_s_p_B;
  PyObject *__pyx_n_s_partition;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_n_s_permutation_A;
  PyObject *__pyx_n_s_permutation_B;
  PyObject *__pyx_n_s_permute;
  PyObject *__pyx_n_s_pos;
  PyObject *__pyx_n_s_power;
  PyObject *__pyx_n_s_prl;
  PyObject *__pyx_n_s_prnt;
  PyObject *__pyx_kp_u_prnt_Function_to_print_the_non;
  PyObject *__pyx_n_s_profile;
  PyObject *__pyx_n_s_put;
  PyObject *__pyx_n_s_pyreshape;
  PyObject *__pyx_n_s_pytensor_init;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_raise;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_rank;
  PyObject *__pyx_n_s_rarr;
  PyObject *__pyx_n_s_ravel;
  PyObject *__pyx_kp_u_ravel_order_F_Return_the_flatte;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_read_all;
  PyObject *__pyx_n_s_read_all_2;
  PyObject *__pyx_n_s_read_all_nnz;
  PyObject *__pyx_n_s_read_from_file;
  PyObject *__pyx_n_s_read_local;
  PyObject *__pyx_n_s_read_local_nnz;
  PyObject *__pyx_n_s_real;
  PyObject *__pyx_kp_u_real_value_None_Return_real_par;
  PyObject *__pyx_n_s_red_idx_num;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_reshape;
  PyObject *__pyx_kp_u_reshape_integer_Return_a_new_te;
  PyObject *__pyx_n_s_result_type;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_rev_array;
  PyObject *__pyx_n_s_safe;
  PyObject *__pyx_n_s_same_kind;
  PyObject *__pyx_n_s_sample;
  PyObject *__pyx_kp_u_sample_p_Extract_a_sample_of_th;
  PyObject *__pyx_n_s_scale;
  PyObject *__pyx_n_s_scl;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_set_all;
  PyObject *__pyx_kp_u_set_all_value_Set_all_elements;
  PyObject *__pyx_n_s_set_zero;
  PyObject *__pyx_kp_u_set_zero_Set_all_elements_in_a;
  PyObject *__pyx_n_s_setgetitem_helper;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sp;
  PyObject *__pyx_n_s_sparsify;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_st;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_str_dtype;
  PyObject *__pyx_n_s_str_self;
  PyObject *__pyx_n_s_string;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_kp_u_sum_axis_None_dtype_None_out_No;
  PyObject *__pyx_n_s_sym;
  PyObject *__pyx_n_s_sz;
  PyObject *__pyx_n_s_tB;
  PyObject *__pyx_n_s_t_reshape;
  PyObject *__pyx_n_s_take;
  PyObject *__pyx_n_s_take_abs;
  PyObject *__pyx_kp_u_take_indices_axis_None_out_None;
  PyObject *__pyx_n_s_tensor;
  PyObject *__pyx_n_s_tensor_T;
  PyObject *__pyx_kp_u_tensor_T_axes_None_Permute_the;
  PyObject *__pyx_kp_u_tensor_T_line_544;
  PyObject *__pyx_n_s_tensor___deepcopy;
  PyObject *__pyx_n_s_tensor___read_all;
  PyObject *__pyx_n_s_tensor___reduce_cython;
  PyObject *__pyx_n_s_tensor___setstate_cython;
  PyObject *__pyx_n_s_tensor___write_all;
  PyObject *__pyx_n_s_tensor__bool_sum;
  PyObject *__pyx_n_s_tensor__compare_tensors;
  PyObject *__pyx_n_s_tensor__convert_type;
  PyObject *__pyx_n_s_tensor__exp_python;
  PyObject *__pyx_n_s_tensor__get_slice;
  PyObject *__pyx_n_s_tensor__invert_elements;
  PyObject *__pyx_n_s_tensor__read_all;
  PyObject *__pyx_n_s_tensor__ufunc_interpret;
  PyObject *__pyx_n_s_tensor__write_all;
  PyObject *__pyx_n_s_tensor__write_slice;
  PyObject *__pyx_n_s_tensor_all;
  PyObject *__pyx_kp_u_tensor_all_line_1027;
  PyObject *__pyx_n_s_tensor_astype;
  PyObject *__pyx_kp_u_tensor_astype_line_1580;
  PyObject *__pyx_n_s_tensor_aux;
  PyObject *__pyx_n_s_tensor_conj;
  PyObject *__pyx_kp_u_tensor_conj_line_1894;
  PyObject *__pyx_n_s_tensor_copy;
  PyObject *__pyx_kp_u_tensor_copy_line_1367;
  PyObject *__pyx_n_s_tensor_diagonal;
  PyObject *__pyx_kp_u_tensor_diagonal_line_2305;
  PyObject *__pyx_n_s_tensor_dot;
  PyObject *__pyx_kp_u_tensor_dot_line_1706;
  PyObject *__pyx_n_s_tensor_fill_random;
  PyObject *__pyx_kp_u_tensor_fill_random_line_851;
  PyObject *__pyx_kp_u_tensor_fill_random_mn_None_mx_N;
  PyObject *__pyx_n_s_tensor_fill_sp_random;
  PyObject *__pyx_kp_u_tensor_fill_sp_random_line_899;
  PyObject *__pyx_kp_u_tensor_fill_sp_random_mn_None_m;
  PyObject *__pyx_n_s_tensor_from_nparray;
  PyObject *__pyx_kp_u_tensor_from_nparray_line_2511;
  PyObject *__pyx_n_s_tensor_get_dims;
  PyObject *__pyx_n_s_tensor_get_distribution;
  PyObject *__pyx_n_s_tensor_get_type;
  PyObject *__pyx_n_s_tensor_i;
  PyObject *__pyx_kp_u_tensor_i_line_1228;
  PyObject *__pyx_n_s_tensor_imag;
  PyObject *__pyx_kp_u_tensor_imag_line_1319;
  PyObject *__pyx_n_s_tensor_item;
  PyObject *__pyx_n_s_tensor_norm1;
  PyObject *__pyx_kp_u_tensor_norm1_line_2376;
  PyObject *__pyx_n_s_tensor_norm2;
  PyObject *__pyx_kp_u_tensor_norm2_line_2400;
  PyObject *__pyx_n_s_tensor_norm_infty;
  PyObject *__pyx_kp_u_tensor_norm_infty_line_2436;
  PyObject *__pyx_n_s_tensor_permute;
  PyObject *__pyx_n_s_tensor_prnt;
  PyObject *__pyx_kp_u_tensor_prnt_line_1257;
  PyObject *__pyx_n_s_tensor_ravel;
  PyObject *__pyx_kp_u_tensor_ravel_line_1482;
  PyObject *__pyx_n_s_tensor_read;
  PyObject *__pyx_n_s_tensor_read_all;
  PyObject *__pyx_n_s_tensor_read_all_nnz;
  PyObject *__pyx_n_s_tensor_read_from_file;
  PyObject *__pyx_n_s_tensor_read_local;
  PyObject *__pyx_n_s_tensor_read_local_nnz;
  PyObject *__pyx_n_s_tensor_real;
  PyObject *__pyx_kp_u_tensor_real_line_1274;
  PyObject *__pyx_n_s_tensor_reshape;
  PyObject *__pyx_kp_u_tensor_reshape_line_1391;
  PyObject *__pyx_n_s_tensor_sample;
  PyObject *__pyx_kp_u_tensor_sample_line_2595;
  PyObject *__pyx_n_s_tensor_set_all;
  PyObject *__pyx_kp_u_tensor_set_all_line_2196;
  PyObject *__pyx_n_s_tensor_set_zero;
  PyObject *__pyx_kp_u_tensor_set_zero_line_2180;
  PyObject *__pyx_n_s_tensor_sparsify;
  PyObject *__pyx_n_s_tensor_sum;
  PyObject *__pyx_kp_u_tensor_sum_line_2339;
  PyObject *__pyx_n_s_tensor_take;
  PyObject *__pyx_kp_u_tensor_take_line_2540;
  PyObject *__pyx_n_s_tensor_tensordot;
  PyObject *__pyx_kp_u_tensor_tensordot_line_1739;
  PyObject *__pyx_n_s_tensor_to_nparray;
  PyObject *__pyx_kp_u_tensor_to_nparray_line_2481;
  PyObject *__pyx_n_s_tensor_tot_size;
  PyObject *__pyx_n_s_tensor_trace;
  PyObject *__pyx_kp_u_tensor_trace_line_2265;
  PyObject *__pyx_n_s_tensor_transpose;
  PyObject *__pyx_kp_u_tensor_transpose_axes_Return_th;
  PyObject *__pyx_kp_u_tensor_transpose_line_569;
  PyObject *__pyx_n_s_tensor_write;
  PyObject *__pyx_n_s_tensor_write_to_file;
  PyObject *__pyx_n_s_tensordot;
  PyObject *__pyx_kp_u_tensordot_other_axes_2_Return_t;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_thresh;
  PyObject *__pyx_n_s_threshold;
  PyObject *__pyx_n_s_timer;
  PyObject *__pyx_n_s_to_nparray;
  PyObject *__pyx_kp_u_to_nparray_Convert_tensor_to_nu;
  PyObject *__pyx_n_s_tot_size;
  PyObject *__pyx_n_s_total_size;
  PyObject *__pyx_n_s_trace;
  PyObject *__pyx_kp_u_trace_offset_0_axis1_0_axis2_1;
  PyObject *__pyx_n_s_transpose;
  PyObject *__pyx_n_s_type;
  PyObject *__pyx_n_s_type_index;
  PyObject *__pyx_n_s_ufunc_interpret;
  PyObject *__pyx_n_s_unpack;
  PyObject *__pyx_n_s_unpack_sym;
  PyObject *__pyx_n_s_unsafe;
  PyObject *__pyx_n_s_use_align_for_pair;
  PyObject *__pyx_n_s_val;
  PyObject *__pyx_n_s_vals;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_view;
  PyObject *__pyx_n_s_vvals;
  PyObject *__pyx_n_s_with_vals;
  PyObject *__pyx_n_s_world;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_write_all;
  PyObject *__pyx_n_s_write_slice;
  PyObject *__pyx_n_s_write_to_file;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_float__1;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_slice__4;
  PyObject *__pyx_slice__5;
  PyObject *__pyx_slice__6;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__79;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__97;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__102;
  PyObject *__pyx_tuple__104;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__111;
  PyObject *__pyx_tuple__112;
  PyObject *__pyx_tuple__114;
  PyObject *__pyx_tuple__116;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__121;
  PyObject *__pyx_tuple__123;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__126;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__131;
  PyObject *__pyx_tuple__133;
  PyObject *__pyx_tuple__134;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__138;
  PyObject *__pyx_tuple__140;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__145;
  PyObject *__pyx_tuple__147;
  PyObject *__pyx_tuple__149;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__152;
  PyObject *__pyx_tuple__153;
  PyObject *__pyx_tuple__158;
  PyObject *__pyx_tuple__160;
  PyObject *__pyx_tuple__163;
  PyObject *__pyx_tuple__165;
  PyObject *__pyx_tuple__166;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__171;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__120;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__130;
  PyObject *__pyx_codeobj__132;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__144;
  PyObject *__pyx_codeobj__146;
  PyObject *__pyx_codeobj__148;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__155;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__157;
  PyObject *__pyx_codeobj__159;
  PyObject *__pyx_codeobj__161;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__164;
  PyObject *__pyx_codeobj__167;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__170;
  PyObject *__pyx_codeobj__172;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ctf_9partition_partition);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ctf_9partition_idx_partition);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ctf_4term_term);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ctf_4term_itensor);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ctf_6tensor_tensor);
  Py_CLEAR(clear_module_state->__pyx_type_3ctf_6tensor_tensor);
  Py_CLEAR(clear_module_state->__pyx_n_s_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_AS);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_ends);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_offsets);
  Py_CLEAR(clear_module_state->__pyx_n_s_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_C);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_ERROR_cannot_call_imag_with);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_cannot___write);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_output);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_must_be);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_powering_functi);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_D);
  Py_CLEAR(clear_module_state->__pyx_n_s_Enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_F);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Invalid_use_of_universal_functio);
  Py_CLEAR(clear_module_state->__pyx_n_s_NS);
  Py_CLEAR(clear_module_state->__pyx_n_s_SH);
  Py_CLEAR(clear_module_state->__pyx_n_s_SY);
  Py_CLEAR(clear_module_state->__pyx_n_s_SYM);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Specify_mesh_processor_toplogy_w);
  Py_CLEAR(clear_module_state->__pyx_n_s_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Universal_functions_among_tensor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s__173);
  Py_CLEAR(clear_module_state->__pyx_kp_s__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__55);
  Py_CLEAR(clear_module_state->__pyx_kp_u__56);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_abs);
  Py_CLEAR(clear_module_state->__pyx_n_s_align);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_kp_u_all_axis_None_out_None_keepdims);
  Py_CLEAR(clear_module_state->__pyx_n_s_alpha);
  Py_CLEAR(clear_module_state->__pyx_kp_s_an_integer_is_required);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_arange);
  Py_CLEAR(clear_module_state->__pyx_n_s_arr);
  Py_CLEAR(clear_module_state->__pyx_n_s_arr_in);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_asarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_astensor);
  Py_CLEAR(clear_module_state->__pyx_n_s_astype);
  Py_CLEAR(clear_module_state->__pyx_kp_u_astype_dtype_order_F_casting_un);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_axes);
  Py_CLEAR(clear_module_state->__pyx_n_s_axis);
  Py_CLEAR(clear_module_state->__pyx_n_s_axis1);
  Py_CLEAR(clear_module_state->__pyx_n_s_axis2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_axis_entry_is_out_of_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_beta);
  Py_CLEAR(clear_module_state->__pyx_n_s_blk);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_buf);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_ca);
  Py_CLEAR(clear_module_state->__pyx_n_s_caends);
  Py_CLEAR(clear_module_state->__pyx_kp_s_can_not_reshape_into_this_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_caoffs);
  Py_CLEAR(clear_module_state->__pyx_n_s_cast);
  Py_CLEAR(clear_module_state->__pyx_n_s_casting);
  Py_CLEAR(clear_module_state->__pyx_kp_s_casting_must_be_one_of_no_equiv);
  Py_CLEAR(clear_module_state->__pyx_n_s_cdata);
  Py_CLEAR(clear_module_state->__pyx_n_s_cends);
  Py_CLEAR(clear_module_state->__pyx_n_s_chr);
  Py_CLEAR(clear_module_state->__pyx_n_s_cinds);
  Py_CLEAR(clear_module_state->__pyx_n_s_cinit);
  Py_CLEAR(clear_module_state->__pyx_kp_s_class_bool);
  Py_CLEAR(clear_module_state->__pyx_kp_s_class_complex);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_clens);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_coffs);
  Py_CLEAR(clear_module_state->__pyx_n_s_comm);
  Py_CLEAR(clear_module_state->__pyx_n_s_compare_tensors);
  Py_CLEAR(clear_module_state->__pyx_n_s_complex);
  Py_CLEAR(clear_module_state->__pyx_n_s_complex128);
  Py_CLEAR(clear_module_state->__pyx_n_s_complex64);
  Py_CLEAR(clear_module_state->__pyx_n_s_conj);
  Py_CLEAR(clear_module_state->__pyx_kp_u_conj_Return_the_self_conjugate);
  Py_CLEAR(clear_module_state->__pyx_n_s_convert_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_copy_Copy_the_tensor_to_a_new_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_count_nonzero);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf_helper);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf_partition);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf_profile);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf_tensor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf_tensor_aux);
  Py_CLEAR(clear_module_state->__pyx_kp_s_ctf_tensor_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctf_world);
  Py_CLEAR(clear_module_state->__pyx_n_s_cvals);
  Py_CLEAR(clear_module_state->__pyx_n_s_czeros);
  Py_CLEAR(clear_module_state->__pyx_n_s_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_deepcopy);
  Py_CLEAR(clear_module_state->__pyx_n_s_deepcopy_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_diagonal);
  Py_CLEAR(clear_module_state->__pyx_kp_u_diagonal_offset_0_axis1_0_axis2);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dim);
  Py_CLEAR(clear_module_state->__pyx_n_s_dim_keep);
  Py_CLEAR(clear_module_state->__pyx_n_s_dim_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_dims_keep);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_div);
  Py_CLEAR(clear_module_state->__pyx_n_s_dot);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dot_other_out_None_Return_the_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_duplicate_value_in_axis);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_ends);
  Py_CLEAR(clear_module_state->__pyx_n_s_enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_enums);
  Py_CLEAR(clear_module_state->__pyx_n_s_equiv);
  Py_CLEAR(clear_module_state->__pyx_n_s_exp_python);
  Py_CLEAR(clear_module_state->__pyx_kp_s_exponentiation_not_supported_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_random);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_sp_random);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_float128);
  Py_CLEAR(clear_module_state->__pyx_n_s_float16);
  Py_CLEAR(clear_module_state->__pyx_n_s_float32);
  Py_CLEAR(clear_module_state->__pyx_n_s_float64);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_frac_sp);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_nparray);
  Py_CLEAR(clear_module_state->__pyx_kp_u_from_nparray_arr_Convert_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_gen_tsr);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_dims);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_distribution);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_np_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_num_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_gvals);
  Py_CLEAR(clear_module_state->__pyx_n_s_helper);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_i8);
  Py_CLEAR(clear_module_state->__pyx_kp_u_i_string_Core_function_on_summi);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx_C);
  Py_CLEAR(clear_module_state->__pyx_n_s_iinds);
  Py_CLEAR(clear_module_state->__pyx_n_s_imag);
  Py_CLEAR(clear_module_state->__pyx_kp_u_imag_value_None_Return_imaginar);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_ind_coll);
  Py_CLEAR(clear_module_state->__pyx_n_s_index_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_index_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_index_temp);
  Py_CLEAR(clear_module_state->__pyx_n_s_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_inds);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_kp_s_input_should_be_tensors);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_int16);
  Py_CLEAR(clear_module_state->__pyx_n_s_int32);
  Py_CLEAR(clear_module_state->__pyx_n_s_int64);
  Py_CLEAR(clear_module_state->__pyx_n_s_int8);
  Py_CLEAR(clear_module_state->__pyx_n_s_integer);
  Py_CLEAR(clear_module_state->__pyx_n_s_invert_elements);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_item);
  Py_CLEAR(clear_module_state->__pyx_kp_s_item_must_be_called_on_array_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_itemsize);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_keepdims);
  Py_CLEAR(clear_module_state->__pyx_n_s_lens);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_match_tensor_types);
  Py_CLEAR(clear_module_state->__pyx_n_s_maximum);
  Py_CLEAR(clear_module_state->__pyx_n_s_memo);
  Py_CLEAR(clear_module_state->__pyx_n_s_mn);
  Py_CLEAR(clear_module_state->__pyx_n_s_mod);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_mx);
  Py_CLEAR(clear_module_state->__pyx_n_s_mystr);
  Py_CLEAR(clear_module_state->__pyx_n_s_mystrides);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_na);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nb);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_nega);
  Py_CLEAR(clear_module_state->__pyx_n_s_nega_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_newshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_no);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_norm1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_norm1_1_norm_of_the_tensor_Retu);
  Py_CLEAR(clear_module_state->__pyx_n_s_norm2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_norm2_2_norm_of_the_tensor_Retu);
  Py_CLEAR(clear_module_state->__pyx_n_s_norm_infty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_norm_infty_Infinity_norm_of_the);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_number);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_s_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_offset);
  Py_CLEAR(clear_module_state->__pyx_n_s_offsets);
  Py_CLEAR(clear_module_state->__pyx_n_s_ones);
  Py_CLEAR(clear_module_state->__pyx_n_s_op);
  Py_CLEAR(clear_module_state->__pyx_n_s_ord_comp);
  Py_CLEAR(clear_module_state->__pyx_n_s_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_other);
  Py_CLEAR(clear_module_state->__pyx_n_s_out);
  Py_CLEAR(clear_module_state->__pyx_n_s_out_dims);
  Py_CLEAR(clear_module_state->__pyx_n_s_out_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_out_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_out_sp);
  Py_CLEAR(clear_module_state->__pyx_n_s_out_sym);
  Py_CLEAR(clear_module_state->__pyx_n_s_out_tsr);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_p_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_p_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_partition);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_permutation_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_permutation_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_permute);
  Py_CLEAR(clear_module_state->__pyx_n_s_pos);
  Py_CLEAR(clear_module_state->__pyx_n_s_power);
  Py_CLEAR(clear_module_state->__pyx_n_s_prl);
  Py_CLEAR(clear_module_state->__pyx_n_s_prnt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_prnt_Function_to_print_the_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_profile);
  Py_CLEAR(clear_module_state->__pyx_n_s_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyreshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_pytensor_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_raise);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_rank);
  Py_CLEAR(clear_module_state->__pyx_n_s_rarr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ravel);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ravel_order_F_Return_the_flatte);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_all_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_all_nnz);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_local_nnz);
  Py_CLEAR(clear_module_state->__pyx_n_s_real);
  Py_CLEAR(clear_module_state->__pyx_kp_u_real_value_None_Return_real_par);
  Py_CLEAR(clear_module_state->__pyx_n_s_red_idx_num);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_reshape);
  Py_CLEAR(clear_module_state->__pyx_kp_u_reshape_integer_Return_a_new_te);
  Py_CLEAR(clear_module_state->__pyx_n_s_result_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_rev_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_safe);
  Py_CLEAR(clear_module_state->__pyx_n_s_same_kind);
  Py_CLEAR(clear_module_state->__pyx_n_s_sample);
  Py_CLEAR(clear_module_state->__pyx_kp_u_sample_p_Extract_a_sample_of_th);
  Py_CLEAR(clear_module_state->__pyx_n_s_scale);
  Py_CLEAR(clear_module_state->__pyx_n_s_scl);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_all);
  Py_CLEAR(clear_module_state->__pyx_kp_u_set_all_value_Set_all_elements);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_zero);
  Py_CLEAR(clear_module_state->__pyx_kp_u_set_zero_Set_all_elements_in_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_setgetitem_helper);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sp);
  Py_CLEAR(clear_module_state->__pyx_n_s_sparsify);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_st);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_str_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_str_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_string);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_kp_u_sum_axis_None_dtype_None_out_No);
  Py_CLEAR(clear_module_state->__pyx_n_s_sym);
  Py_CLEAR(clear_module_state->__pyx_n_s_sz);
  Py_CLEAR(clear_module_state->__pyx_n_s_tB);
  Py_CLEAR(clear_module_state->__pyx_n_s_t_reshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_take);
  Py_CLEAR(clear_module_state->__pyx_n_s_take_abs);
  Py_CLEAR(clear_module_state->__pyx_kp_u_take_indices_axis_None_out_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_T);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_T_axes_None_Permute_the);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_T_line_544);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor___deepcopy);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor___read_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor___write_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__bool_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__compare_tensors);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__convert_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__exp_python);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__get_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__invert_elements);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__read_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__ufunc_interpret);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__write_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor__write_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_all);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_all_line_1027);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_astype);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_astype_line_1580);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_aux);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_conj);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_conj_line_1894);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_copy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_copy_line_1367);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_diagonal);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_diagonal_line_2305);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_dot);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_dot_line_1706);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_fill_random);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_fill_random_line_851);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_fill_random_mn_None_mx_N);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_fill_sp_random);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_fill_sp_random_line_899);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_fill_sp_random_mn_None_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_from_nparray);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_from_nparray_line_2511);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_get_dims);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_get_distribution);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_get_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_i);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_i_line_1228);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_imag);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_imag_line_1319);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_item);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_norm1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_norm1_line_2376);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_norm2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_norm2_line_2400);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_norm_infty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_norm_infty_line_2436);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_permute);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_prnt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_prnt_line_1257);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_ravel);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_ravel_line_1482);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_read_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_read_all_nnz);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_read_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_read_local);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_read_local_nnz);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_real);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_real_line_1274);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_reshape);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_reshape_line_1391);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_sample);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_sample_line_2595);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_set_all);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_set_all_line_2196);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_set_zero);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_set_zero_line_2180);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_sparsify);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_sum);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_sum_line_2339);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_take);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_take_line_2540);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_tensordot);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_tensordot_line_1739);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_to_nparray);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_to_nparray_line_2481);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_tot_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_trace);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_trace_line_2265);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_transpose);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_transpose_axes_Return_th);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensor_transpose_line_569);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor_write_to_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensordot);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tensordot_other_axes_2_Return_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_thresh);
  Py_CLEAR(clear_module_state->__pyx_n_s_threshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_timer);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_nparray);
  Py_CLEAR(clear_module_state->__pyx_kp_u_to_nparray_Convert_tensor_to_nu);
  Py_CLEAR(clear_module_state->__pyx_n_s_tot_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_trace);
  Py_CLEAR(clear_module_state->__pyx_kp_u_trace_offset_0_axis1_0_axis2_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_transpose);
  Py_CLEAR(clear_module_state->__pyx_n_s_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_type_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_ufunc_interpret);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack_sym);
  Py_CLEAR(clear_module_state->__pyx_n_s_unsafe);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_align_for_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_val);
  Py_CLEAR(clear_module_state->__pyx_n_s_vals);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_view);
  Py_CLEAR(clear_module_state->__pyx_n_s_vvals);
  Py_CLEAR(clear_module_state->__pyx_n_s_with_vals);
  Py_CLEAR(clear_module_state->__pyx_n_s_world);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_write_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_write_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_write_to_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_float__1);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_slice__4);
  Py_CLEAR(clear_module_state->__pyx_slice__5);
  Py_CLEAR(clear_module_state->__pyx_slice__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__79);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__97);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__102);
  Py_CLEAR(clear_module_state->__pyx_tuple__104);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__111);
  Py_CLEAR(clear_module_state->__pyx_tuple__112);
  Py_CLEAR(clear_module_state->__pyx_tuple__114);
  Py_CLEAR(clear_module_state->__pyx_tuple__116);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__121);
  Py_CLEAR(clear_module_state->__pyx_tuple__123);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__126);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__131);
  Py_CLEAR(clear_module_state->__pyx_tuple__133);
  Py_CLEAR(clear_module_state->__pyx_tuple__134);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__138);
  Py_CLEAR(clear_module_state->__pyx_tuple__140);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__145);
  Py_CLEAR(clear_module_state->__pyx_tuple__147);
  Py_CLEAR(clear_module_state->__pyx_tuple__149);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__152);
  Py_CLEAR(clear_module_state->__pyx_tuple__153);
  Py_CLEAR(clear_module_state->__pyx_tuple__158);
  Py_CLEAR(clear_module_state->__pyx_tuple__160);
  Py_CLEAR(clear_module_state->__pyx_tuple__163);
  Py_CLEAR(clear_module_state->__pyx_tuple__165);
  Py_CLEAR(clear_module_state->__pyx_tuple__166);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__171);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__72);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__120);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__130);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__144);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  Py_CLEAR(clear_module_state->__pyx_codeobj__148);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__155);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__157);
  Py_CLEAR(clear_module_state->__pyx_codeobj__159);
  Py_CLEAR(clear_module_state->__pyx_codeobj__161);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__164);
  Py_CLEAR(clear_module_state->__pyx_codeobj__167);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__170);
  Py_CLEAR(clear_module_state->__pyx_codeobj__172);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ctf_9partition_partition);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ctf_9partition_idx_partition);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ctf_4term_term);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ctf_4term_itensor);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ctf_6tensor_tensor);
  Py_VISIT(traverse_module_state->__pyx_type_3ctf_6tensor_tensor);
  Py_VISIT(traverse_module_state->__pyx_n_s_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_AS);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_ends);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_offsets);
  Py_VISIT(traverse_module_state->__pyx_n_s_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_C);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_ERROR_cannot_call_imag_with);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_cannot___write);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_output);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_must_be);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_powering_functi);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_D);
  Py_VISIT(traverse_module_state->__pyx_n_s_Enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_F);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Invalid_use_of_universal_functio);
  Py_VISIT(traverse_module_state->__pyx_n_s_NS);
  Py_VISIT(traverse_module_state->__pyx_n_s_SH);
  Py_VISIT(traverse_module_state->__pyx_n_s_SY);
  Py_VISIT(traverse_module_state->__pyx_n_s_SYM);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Specify_mesh_processor_toplogy_w);
  Py_VISIT(traverse_module_state->__pyx_n_s_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Universal_functions_among_tensor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s__173);
  Py_VISIT(traverse_module_state->__pyx_kp_s__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__55);
  Py_VISIT(traverse_module_state->__pyx_kp_u__56);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_abs);
  Py_VISIT(traverse_module_state->__pyx_n_s_align);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_kp_u_all_axis_None_out_None_keepdims);
  Py_VISIT(traverse_module_state->__pyx_n_s_alpha);
  Py_VISIT(traverse_module_state->__pyx_kp_s_an_integer_is_required);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_arange);
  Py_VISIT(traverse_module_state->__pyx_n_s_arr);
  Py_VISIT(traverse_module_state->__pyx_n_s_arr_in);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_asarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_astensor);
  Py_VISIT(traverse_module_state->__pyx_n_s_astype);
  Py_VISIT(traverse_module_state->__pyx_kp_u_astype_dtype_order_F_casting_un);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_axes);
  Py_VISIT(traverse_module_state->__pyx_n_s_axis);
  Py_VISIT(traverse_module_state->__pyx_n_s_axis1);
  Py_VISIT(traverse_module_state->__pyx_n_s_axis2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_axis_entry_is_out_of_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_beta);
  Py_VISIT(traverse_module_state->__pyx_n_s_blk);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_buf);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_ca);
  Py_VISIT(traverse_module_state->__pyx_n_s_caends);
  Py_VISIT(traverse_module_state->__pyx_kp_s_can_not_reshape_into_this_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_caoffs);
  Py_VISIT(traverse_module_state->__pyx_n_s_cast);
  Py_VISIT(traverse_module_state->__pyx_n_s_casting);
  Py_VISIT(traverse_module_state->__pyx_kp_s_casting_must_be_one_of_no_equiv);
  Py_VISIT(traverse_module_state->__pyx_n_s_cdata);
  Py_VISIT(traverse_module_state->__pyx_n_s_cends);
  Py_VISIT(traverse_module_state->__pyx_n_s_chr);
  Py_VISIT(traverse_module_state->__pyx_n_s_cinds);
  Py_VISIT(traverse_module_state->__pyx_n_s_cinit);
  Py_VISIT(traverse_module_state->__pyx_kp_s_class_bool);
  Py_VISIT(traverse_module_state->__pyx_kp_s_class_complex);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_clens);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_coffs);
  Py_VISIT(traverse_module_state->__pyx_n_s_comm);
  Py_VISIT(traverse_module_state->__pyx_n_s_compare_tensors);
  Py_VISIT(traverse_module_state->__pyx_n_s_complex);
  Py_VISIT(traverse_module_state->__pyx_n_s_complex128);
  Py_VISIT(traverse_module_state->__pyx_n_s_complex64);
  Py_VISIT(traverse_module_state->__pyx_n_s_conj);
  Py_VISIT(traverse_module_state->__pyx_kp_u_conj_Return_the_self_conjugate);
  Py_VISIT(traverse_module_state->__pyx_n_s_convert_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_copy_Copy_the_tensor_to_a_new_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_count_nonzero);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf_helper);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf_partition);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf_profile);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf_tensor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf_tensor_aux);
  Py_VISIT(traverse_module_state->__pyx_kp_s_ctf_tensor_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctf_world);
  Py_VISIT(traverse_module_state->__pyx_n_s_cvals);
  Py_VISIT(traverse_module_state->__pyx_n_s_czeros);
  Py_VISIT(traverse_module_state->__pyx_n_s_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_deepcopy);
  Py_VISIT(traverse_module_state->__pyx_n_s_deepcopy_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_diagonal);
  Py_VISIT(traverse_module_state->__pyx_kp_u_diagonal_offset_0_axis1_0_axis2);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dim);
  Py_VISIT(traverse_module_state->__pyx_n_s_dim_keep);
  Py_VISIT(traverse_module_state->__pyx_n_s_dim_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_dims_keep);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_div);
  Py_VISIT(traverse_module_state->__pyx_n_s_dot);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dot_other_out_None_Return_the_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_duplicate_value_in_axis);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_ends);
  Py_VISIT(traverse_module_state->__pyx_n_s_enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_enums);
  Py_VISIT(traverse_module_state->__pyx_n_s_equiv);
  Py_VISIT(traverse_module_state->__pyx_n_s_exp_python);
  Py_VISIT(traverse_module_state->__pyx_kp_s_exponentiation_not_supported_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_random);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_sp_random);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_float128);
  Py_VISIT(traverse_module_state->__pyx_n_s_float16);
  Py_VISIT(traverse_module_state->__pyx_n_s_float32);
  Py_VISIT(traverse_module_state->__pyx_n_s_float64);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_frac_sp);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_nparray);
  Py_VISIT(traverse_module_state->__pyx_kp_u_from_nparray_arr_Convert_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_gen_tsr);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_dims);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_distribution);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_np_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_num_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_gvals);
  Py_VISIT(traverse_module_state->__pyx_n_s_helper);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_i8);
  Py_VISIT(traverse_module_state->__pyx_kp_u_i_string_Core_function_on_summi);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx_C);
  Py_VISIT(traverse_module_state->__pyx_n_s_iinds);
  Py_VISIT(traverse_module_state->__pyx_n_s_imag);
  Py_VISIT(traverse_module_state->__pyx_kp_u_imag_value_None_Return_imaginar);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_ind_coll);
  Py_VISIT(traverse_module_state->__pyx_n_s_index_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_index_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_index_temp);
  Py_VISIT(traverse_module_state->__pyx_n_s_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_inds);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_kp_s_input_should_be_tensors);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_int16);
  Py_VISIT(traverse_module_state->__pyx_n_s_int32);
  Py_VISIT(traverse_module_state->__pyx_n_s_int64);
  Py_VISIT(traverse_module_state->__pyx_n_s_int8);
  Py_VISIT(traverse_module_state->__pyx_n_s_integer);
  Py_VISIT(traverse_module_state->__pyx_n_s_invert_elements);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_item);
  Py_VISIT(traverse_module_state->__pyx_kp_s_item_must_be_called_on_array_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_itemsize);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_keepdims);
  Py_VISIT(traverse_module_state->__pyx_n_s_lens);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_match_tensor_types);
  Py_VISIT(traverse_module_state->__pyx_n_s_maximum);
  Py_VISIT(traverse_module_state->__pyx_n_s_memo);
  Py_VISIT(traverse_module_state->__pyx_n_s_mn);
  Py_VISIT(traverse_module_state->__pyx_n_s_mod);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_mx);
  Py_VISIT(traverse_module_state->__pyx_n_s_mystr);
  Py_VISIT(traverse_module_state->__pyx_n_s_mystrides);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_na);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nb);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_nega);
  Py_VISIT(traverse_module_state->__pyx_n_s_nega_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_newshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_no);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_norm1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_norm1_1_norm_of_the_tensor_Retu);
  Py_VISIT(traverse_module_state->__pyx_n_s_norm2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_norm2_2_norm_of_the_tensor_Retu);
  Py_VISIT(traverse_module_state->__pyx_n_s_norm_infty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_norm_infty_Infinity_norm_of_the);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_number);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_s_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_offset);
  Py_VISIT(traverse_module_state->__pyx_n_s_offsets);
  Py_VISIT(traverse_module_state->__pyx_n_s_ones);
  Py_VISIT(traverse_module_state->__pyx_n_s_op);
  Py_VISIT(traverse_module_state->__pyx_n_s_ord_comp);
  Py_VISIT(traverse_module_state->__pyx_n_s_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_other);
  Py_VISIT(traverse_module_state->__pyx_n_s_out);
  Py_VISIT(traverse_module_state->__pyx_n_s_out_dims);
  Py_VISIT(traverse_module_state->__pyx_n_s_out_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_out_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_out_sp);
  Py_VISIT(traverse_module_state->__pyx_n_s_out_sym);
  Py_VISIT(traverse_module_state->__pyx_n_s_out_tsr);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_p_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_p_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_partition);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_permutation_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_permutation_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_permute);
  Py_VISIT(traverse_module_state->__pyx_n_s_pos);
  Py_VISIT(traverse_module_state->__pyx_n_s_power);
  Py_VISIT(traverse_module_state->__pyx_n_s_prl);
  Py_VISIT(traverse_module_state->__pyx_n_s_prnt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_prnt_Function_to_print_the_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_profile);
  Py_VISIT(traverse_module_state->__pyx_n_s_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyreshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_pytensor_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_raise);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_rank);
  Py_VISIT(traverse_module_state->__pyx_n_s_rarr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ravel);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ravel_order_F_Return_the_flatte);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_all_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_all_nnz);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_local_nnz);
  Py_VISIT(traverse_module_state->__pyx_n_s_real);
  Py_VISIT(traverse_module_state->__pyx_kp_u_real_value_None_Return_real_par);
  Py_VISIT(traverse_module_state->__pyx_n_s_red_idx_num);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_reshape);
  Py_VISIT(traverse_module_state->__pyx_kp_u_reshape_integer_Return_a_new_te);
  Py_VISIT(traverse_module_state->__pyx_n_s_result_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_rev_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_safe);
  Py_VISIT(traverse_module_state->__pyx_n_s_same_kind);
  Py_VISIT(traverse_module_state->__pyx_n_s_sample);
  Py_VISIT(traverse_module_state->__pyx_kp_u_sample_p_Extract_a_sample_of_th);
  Py_VISIT(traverse_module_state->__pyx_n_s_scale);
  Py_VISIT(traverse_module_state->__pyx_n_s_scl);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_all);
  Py_VISIT(traverse_module_state->__pyx_kp_u_set_all_value_Set_all_elements);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_zero);
  Py_VISIT(traverse_module_state->__pyx_kp_u_set_zero_Set_all_elements_in_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_setgetitem_helper);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sp);
  Py_VISIT(traverse_module_state->__pyx_n_s_sparsify);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_st);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_str_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_str_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_string);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_kp_u_sum_axis_None_dtype_None_out_No);
  Py_VISIT(traverse_module_state->__pyx_n_s_sym);
  Py_VISIT(traverse_module_state->__pyx_n_s_sz);
  Py_VISIT(traverse_module_state->__pyx_n_s_tB);
  Py_VISIT(traverse_module_state->__pyx_n_s_t_reshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_take);
  Py_VISIT(traverse_module_state->__pyx_n_s_take_abs);
  Py_VISIT(traverse_module_state->__pyx_kp_u_take_indices_axis_None_out_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_T);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_T_axes_None_Permute_the);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_T_line_544);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor___deepcopy);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor___read_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor___write_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__bool_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__compare_tensors);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__convert_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__exp_python);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__get_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__invert_elements);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__read_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__ufunc_interpret);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__write_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor__write_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_all);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_all_line_1027);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_astype);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_astype_line_1580);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_aux);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_conj);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_conj_line_1894);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_copy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_copy_line_1367);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_diagonal);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_diagonal_line_2305);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_dot);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_dot_line_1706);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_fill_random);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_fill_random_line_851);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_fill_random_mn_None_mx_N);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_fill_sp_random);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_fill_sp_random_line_899);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_fill_sp_random_mn_None_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_from_nparray);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_from_nparray_line_2511);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_get_dims);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_get_distribution);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_get_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_i);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_i_line_1228);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_imag);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_imag_line_1319);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_item);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_norm1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_norm1_line_2376);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_norm2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_norm2_line_2400);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_norm_infty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_norm_infty_line_2436);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_permute);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_prnt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_prnt_line_1257);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_ravel);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_ravel_line_1482);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_read_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_read_all_nnz);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_read_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_read_local);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_read_local_nnz);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_real);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_real_line_1274);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_reshape);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_reshape_line_1391);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_sample);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_sample_line_2595);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_set_all);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_set_all_line_2196);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_set_zero);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_set_zero_line_2180);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_sparsify);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_sum);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_sum_line_2339);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_take);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_take_line_2540);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_tensordot);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_tensordot_line_1739);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_to_nparray);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_to_nparray_line_2481);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_tot_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_trace);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_trace_line_2265);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_transpose);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_transpose_axes_Return_th);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensor_transpose_line_569);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor_write_to_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensordot);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tensordot_other_axes_2_Return_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_thresh);
  Py_VISIT(traverse_module_state->__pyx_n_s_threshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_timer);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_nparray);
  Py_VISIT(traverse_module_state->__pyx_kp_u_to_nparray_Convert_tensor_to_nu);
  Py_VISIT(traverse_module_state->__pyx_n_s_tot_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_trace);
  Py_VISIT(traverse_module_state->__pyx_kp_u_trace_offset_0_axis1_0_axis2_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_transpose);
  Py_VISIT(traverse_module_state->__pyx_n_s_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_type_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_ufunc_interpret);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack_sym);
  Py_VISIT(traverse_module_state->__pyx_n_s_unsafe);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_align_for_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_val);
  Py_VISIT(traverse_module_state->__pyx_n_s_vals);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_view);
  Py_VISIT(traverse_module_state->__pyx_n_s_vvals);
  Py_VISIT(traverse_module_state->__pyx_n_s_with_vals);
  Py_VISIT(traverse_module_state->__pyx_n_s_world);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_write_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_write_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_write_to_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_float__1);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_slice__4);
  Py_VISIT(traverse_module_state->__pyx_slice__5);
  Py_VISIT(traverse_module_state->__pyx_slice__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__79);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__97);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__102);
  Py_VISIT(traverse_module_state->__pyx_tuple__104);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__111);
  Py_VISIT(traverse_module_state->__pyx_tuple__112);
  Py_VISIT(traverse_module_state->__pyx_tuple__114);
  Py_VISIT(traverse_module_state->__pyx_tuple__116);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__121);
  Py_VISIT(traverse_module_state->__pyx_tuple__123);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__126);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__131);
  Py_VISIT(traverse_module_state->__pyx_tuple__133);
  Py_VISIT(traverse_module_state->__pyx_tuple__134);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__138);
  Py_VISIT(traverse_module_state->__pyx_tuple__140);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__145);
  Py_VISIT(traverse_module_state->__pyx_tuple__147);
  Py_VISIT(traverse_module_state->__pyx_tuple__149);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__152);
  Py_VISIT(traverse_module_state->__pyx_tuple__153);
  Py_VISIT(traverse_module_state->__pyx_tuple__158);
  Py_VISIT(traverse_module_state->__pyx_tuple__160);
  Py_VISIT(traverse_module_state->__pyx_tuple__163);
  Py_VISIT(traverse_module_state->__pyx_tuple__165);
  Py_VISIT(traverse_module_state->__pyx_tuple__166);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__171);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__72);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__120);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__130);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__144);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  Py_VISIT(traverse_module_state->__pyx_codeobj__148);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__155);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__157);
  Py_VISIT(traverse_module_state->__pyx_codeobj__159);
  Py_VISIT(traverse_module_state->__pyx_codeobj__161);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__164);
  Py_VISIT(traverse_module_state->__pyx_codeobj__167);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__170);
  Py_VISIT(traverse_module_state->__pyx_codeobj__172);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_3ctf_9partition_partition __pyx_mstate_global->__pyx_ptype_3ctf_9partition_partition
#define __pyx_ptype_3ctf_9partition_idx_partition __pyx_mstate_global->__pyx_ptype_3ctf_9partition_idx_partition
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_3ctf_4term_term __pyx_mstate_global->__pyx_ptype_3ctf_4term_term
#define __pyx_ptype_3ctf_4term_itensor __pyx_mstate_global->__pyx_ptype_3ctf_4term_itensor
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_3ctf_6tensor_tensor __pyx_mstate_global->__pyx_type_3ctf_6tensor_tensor
#endif
#define __pyx_ptype_3ctf_6tensor_tensor __pyx_mstate_global->__pyx_ptype_3ctf_6tensor_tensor
#define __pyx_n_s_A __pyx_mstate_global->__pyx_n_s_A
#define __pyx_n_s_AS __pyx_mstate_global->__pyx_n_s_AS
#define __pyx_n_s_A_ends __pyx_mstate_global->__pyx_n_s_A_ends
#define __pyx_n_s_A_offsets __pyx_mstate_global->__pyx_n_s_A_offsets
#define __pyx_n_s_B __pyx_mstate_global->__pyx_n_s_B
#define __pyx_n_s_C __pyx_mstate_global->__pyx_n_s_C
#define __pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no __pyx_mstate_global->__pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no
#define __pyx_kp_s_CTF_ERROR_cannot_call_imag_with __pyx_mstate_global->__pyx_kp_s_CTF_ERROR_cannot_call_imag_with
#define __pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value
#define __pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype
#define __pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va
#define __pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif
#define __pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a
#define __pyx_kp_s_CTF_PYTHON_ERROR_cannot___write __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_cannot___write
#define __pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt
#define __pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_output __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_output
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a
#define __pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i
#define __pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen
#define __pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t
#define __pyx_kp_s_CTF_PYTHON_ERROR_output_must_be __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_output_must_be
#define __pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat
#define __pyx_kp_s_CTF_PYTHON_ERROR_output_paramete __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete
#define __pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2
#define __pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot
#define __pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be
#define __pyx_kp_s_CTF_PYTHON_ERROR_powering_functi __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_powering_functi
#define __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow
#define __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2
#define __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3
#define __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4
#define __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5 __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5
#define __pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n
#define __pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo __pyx_mstate_global->__pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo
#define __pyx_kp_s_Cannot_cast_array_from_dtype_0_t __pyx_mstate_global->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t
#define __pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2 __pyx_mstate_global->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2
#define __pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3 __pyx_mstate_global->__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3
#define __pyx_n_s_D __pyx_mstate_global->__pyx_n_s_D
#define __pyx_n_s_Enum __pyx_mstate_global->__pyx_n_s_Enum
#define __pyx_n_s_F __pyx_mstate_global->__pyx_n_s_F
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_s_Invalid_use_of_universal_functio __pyx_mstate_global->__pyx_kp_s_Invalid_use_of_universal_functio
#define __pyx_n_s_NS __pyx_mstate_global->__pyx_n_s_NS
#define __pyx_n_s_SH __pyx_mstate_global->__pyx_n_s_SH
#define __pyx_n_s_SY __pyx_mstate_global->__pyx_n_s_SY
#define __pyx_n_s_SYM __pyx_mstate_global->__pyx_n_s_SYM
#define __pyx_kp_s_Specify_mesh_processor_toplogy_w __pyx_mstate_global->__pyx_kp_s_Specify_mesh_processor_toplogy_w
#define __pyx_n_s_T __pyx_mstate_global->__pyx_n_s_T
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_s_Universal_functions_among_tensor __pyx_mstate_global->__pyx_kp_s_Universal_functions_among_tensor
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s__173 __pyx_mstate_global->__pyx_n_s__173
#define __pyx_kp_s__3 __pyx_mstate_global->__pyx_kp_s__3
#define __pyx_n_s__55 __pyx_mstate_global->__pyx_n_s__55
#define __pyx_kp_u__56 __pyx_mstate_global->__pyx_kp_u__56
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_n_s_abs __pyx_mstate_global->__pyx_n_s_abs
#define __pyx_n_s_align __pyx_mstate_global->__pyx_n_s_align
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_kp_u_all_axis_None_out_None_keepdims __pyx_mstate_global->__pyx_kp_u_all_axis_None_out_None_keepdims
#define __pyx_n_s_alpha __pyx_mstate_global->__pyx_n_s_alpha
#define __pyx_kp_s_an_integer_is_required __pyx_mstate_global->__pyx_kp_s_an_integer_is_required
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_arange __pyx_mstate_global->__pyx_n_s_arange
#define __pyx_n_s_arr __pyx_mstate_global->__pyx_n_s_arr
#define __pyx_n_s_arr_in __pyx_mstate_global->__pyx_n_s_arr_in
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_asarray __pyx_mstate_global->__pyx_n_s_asarray
#define __pyx_n_s_astensor __pyx_mstate_global->__pyx_n_s_astensor
#define __pyx_n_s_astype __pyx_mstate_global->__pyx_n_s_astype
#define __pyx_kp_u_astype_dtype_order_F_casting_un __pyx_mstate_global->__pyx_kp_u_astype_dtype_order_F_casting_un
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_axes __pyx_mstate_global->__pyx_n_s_axes
#define __pyx_n_s_axis __pyx_mstate_global->__pyx_n_s_axis
#define __pyx_n_s_axis1 __pyx_mstate_global->__pyx_n_s_axis1
#define __pyx_n_s_axis2 __pyx_mstate_global->__pyx_n_s_axis2
#define __pyx_kp_s_axis_entry_is_out_of_bounds __pyx_mstate_global->__pyx_kp_s_axis_entry_is_out_of_bounds
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_beta __pyx_mstate_global->__pyx_n_s_beta
#define __pyx_n_s_blk __pyx_mstate_global->__pyx_n_s_blk
#define __pyx_n_s_bool __pyx_mstate_global->__pyx_n_s_bool
#define __pyx_n_s_bool_sum __pyx_mstate_global->__pyx_n_s_bool_sum
#define __pyx_n_s_buf __pyx_mstate_global->__pyx_n_s_buf
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_s_ca __pyx_mstate_global->__pyx_n_s_ca
#define __pyx_n_s_caends __pyx_mstate_global->__pyx_n_s_caends
#define __pyx_kp_s_can_not_reshape_into_this_size __pyx_mstate_global->__pyx_kp_s_can_not_reshape_into_this_size
#define __pyx_n_s_caoffs __pyx_mstate_global->__pyx_n_s_caoffs
#define __pyx_n_s_cast __pyx_mstate_global->__pyx_n_s_cast
#define __pyx_n_s_casting __pyx_mstate_global->__pyx_n_s_casting
#define __pyx_kp_s_casting_must_be_one_of_no_equiv __pyx_mstate_global->__pyx_kp_s_casting_must_be_one_of_no_equiv
#define __pyx_n_s_cdata __pyx_mstate_global->__pyx_n_s_cdata
#define __pyx_n_s_cends __pyx_mstate_global->__pyx_n_s_cends
#define __pyx_n_s_chr __pyx_mstate_global->__pyx_n_s_chr
#define __pyx_n_s_cinds __pyx_mstate_global->__pyx_n_s_cinds
#define __pyx_n_s_cinit __pyx_mstate_global->__pyx_n_s_cinit
#define __pyx_kp_s_class_bool __pyx_mstate_global->__pyx_kp_s_class_bool
#define __pyx_kp_s_class_complex __pyx_mstate_global->__pyx_kp_s_class_complex
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_clens __pyx_mstate_global->__pyx_n_s_clens
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_coffs __pyx_mstate_global->__pyx_n_s_coffs
#define __pyx_n_s_comm __pyx_mstate_global->__pyx_n_s_comm
#define __pyx_n_s_compare_tensors __pyx_mstate_global->__pyx_n_s_compare_tensors
#define __pyx_n_s_complex __pyx_mstate_global->__pyx_n_s_complex
#define __pyx_n_s_complex128 __pyx_mstate_global->__pyx_n_s_complex128
#define __pyx_n_s_complex64 __pyx_mstate_global->__pyx_n_s_complex64
#define __pyx_n_s_conj __pyx_mstate_global->__pyx_n_s_conj
#define __pyx_kp_u_conj_Return_the_self_conjugate __pyx_mstate_global->__pyx_kp_u_conj_Return_the_self_conjugate
#define __pyx_n_s_convert_type __pyx_mstate_global->__pyx_n_s_convert_type
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_kp_u_copy_Copy_the_tensor_to_a_new_t __pyx_mstate_global->__pyx_kp_u_copy_Copy_the_tensor_to_a_new_t
#define __pyx_n_s_count_nonzero __pyx_mstate_global->__pyx_n_s_count_nonzero
#define __pyx_n_s_ctf __pyx_mstate_global->__pyx_n_s_ctf
#define __pyx_n_s_ctf_helper __pyx_mstate_global->__pyx_n_s_ctf_helper
#define __pyx_n_s_ctf_partition __pyx_mstate_global->__pyx_n_s_ctf_partition
#define __pyx_n_s_ctf_profile __pyx_mstate_global->__pyx_n_s_ctf_profile
#define __pyx_n_s_ctf_tensor __pyx_mstate_global->__pyx_n_s_ctf_tensor
#define __pyx_n_s_ctf_tensor_aux __pyx_mstate_global->__pyx_n_s_ctf_tensor_aux
#define __pyx_kp_s_ctf_tensor_pyx __pyx_mstate_global->__pyx_kp_s_ctf_tensor_pyx
#define __pyx_n_s_ctf_world __pyx_mstate_global->__pyx_n_s_ctf_world
#define __pyx_n_s_cvals __pyx_mstate_global->__pyx_n_s_cvals
#define __pyx_n_s_czeros __pyx_mstate_global->__pyx_n_s_czeros
#define __pyx_n_s_d __pyx_mstate_global->__pyx_n_s_d
#define __pyx_n_s_deepcopy __pyx_mstate_global->__pyx_n_s_deepcopy
#define __pyx_n_s_deepcopy_2 __pyx_mstate_global->__pyx_n_s_deepcopy_2
#define __pyx_n_s_delete __pyx_mstate_global->__pyx_n_s_delete
#define __pyx_n_s_diagonal __pyx_mstate_global->__pyx_n_s_diagonal
#define __pyx_kp_u_diagonal_offset_0_axis1_0_axis2 __pyx_mstate_global->__pyx_kp_u_diagonal_offset_0_axis1_0_axis2
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dim __pyx_mstate_global->__pyx_n_s_dim
#define __pyx_n_s_dim_keep __pyx_mstate_global->__pyx_n_s_dim_keep
#define __pyx_n_s_dim_ret __pyx_mstate_global->__pyx_n_s_dim_ret
#define __pyx_n_s_dims_keep __pyx_mstate_global->__pyx_n_s_dims_keep
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_div __pyx_mstate_global->__pyx_n_s_div
#define __pyx_n_s_dot __pyx_mstate_global->__pyx_n_s_dot
#define __pyx_kp_u_dot_other_out_None_Return_the_d __pyx_mstate_global->__pyx_kp_u_dot_other_out_None_Return_the_d
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_kp_s_duplicate_value_in_axis __pyx_mstate_global->__pyx_kp_s_duplicate_value_in_axis
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_ends __pyx_mstate_global->__pyx_n_s_ends
#define __pyx_n_s_enum __pyx_mstate_global->__pyx_n_s_enum
#define __pyx_n_s_enums __pyx_mstate_global->__pyx_n_s_enums
#define __pyx_n_s_equiv __pyx_mstate_global->__pyx_n_s_equiv
#define __pyx_n_s_exp_python __pyx_mstate_global->__pyx_n_s_exp_python
#define __pyx_kp_s_exponentiation_not_supported_for __pyx_mstate_global->__pyx_kp_s_exponentiation_not_supported_for
#define __pyx_n_s_fill_random __pyx_mstate_global->__pyx_n_s_fill_random
#define __pyx_n_s_fill_sp_random __pyx_mstate_global->__pyx_n_s_fill_sp_random
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_n_s_float128 __pyx_mstate_global->__pyx_n_s_float128
#define __pyx_n_s_float16 __pyx_mstate_global->__pyx_n_s_float16
#define __pyx_n_s_float32 __pyx_mstate_global->__pyx_n_s_float32
#define __pyx_n_s_float64 __pyx_mstate_global->__pyx_n_s_float64
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_frac_sp __pyx_mstate_global->__pyx_n_s_frac_sp
#define __pyx_n_s_from_nparray __pyx_mstate_global->__pyx_n_s_from_nparray
#define __pyx_kp_u_from_nparray_arr_Convert_numpy __pyx_mstate_global->__pyx_kp_u_from_nparray_arr_Convert_numpy
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_gen_tsr __pyx_mstate_global->__pyx_n_s_gen_tsr
#define __pyx_n_s_get_dims __pyx_mstate_global->__pyx_n_s_get_dims
#define __pyx_n_s_get_distribution __pyx_mstate_global->__pyx_n_s_get_distribution
#define __pyx_n_s_get_np_dtype __pyx_mstate_global->__pyx_n_s_get_np_dtype
#define __pyx_n_s_get_num_str __pyx_mstate_global->__pyx_n_s_get_num_str
#define __pyx_n_s_get_slice __pyx_mstate_global->__pyx_n_s_get_slice
#define __pyx_n_s_get_type __pyx_mstate_global->__pyx_n_s_get_type
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_gvals __pyx_mstate_global->__pyx_n_s_gvals
#define __pyx_n_s_helper __pyx_mstate_global->__pyx_n_s_helper
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_i8 __pyx_mstate_global->__pyx_n_s_i8
#define __pyx_kp_u_i_string_Core_function_on_summi __pyx_mstate_global->__pyx_kp_u_i_string_Core_function_on_summi
#define __pyx_n_s_idx __pyx_mstate_global->__pyx_n_s_idx
#define __pyx_n_s_idx_2 __pyx_mstate_global->__pyx_n_s_idx_2
#define __pyx_n_s_idx_A __pyx_mstate_global->__pyx_n_s_idx_A
#define __pyx_n_s_idx_B __pyx_mstate_global->__pyx_n_s_idx_B
#define __pyx_n_s_idx_C __pyx_mstate_global->__pyx_n_s_idx_C
#define __pyx_n_s_iinds __pyx_mstate_global->__pyx_n_s_iinds
#define __pyx_n_s_imag __pyx_mstate_global->__pyx_n_s_imag
#define __pyx_kp_u_imag_value_None_Return_imaginar __pyx_mstate_global->__pyx_kp_u_imag_value_None_Return_imaginar
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_ind_coll __pyx_mstate_global->__pyx_n_s_ind_coll
#define __pyx_n_s_index_A __pyx_mstate_global->__pyx_n_s_index_A
#define __pyx_n_s_index_B __pyx_mstate_global->__pyx_n_s_index_B
#define __pyx_n_s_index_temp __pyx_mstate_global->__pyx_n_s_index_temp
#define __pyx_n_s_indices __pyx_mstate_global->__pyx_n_s_indices
#define __pyx_n_s_inds __pyx_mstate_global->__pyx_n_s_inds
#define __pyx_n_s_init_A __pyx_mstate_global->__pyx_n_s_init_A
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_kp_s_input_should_be_tensors __pyx_mstate_global->__pyx_kp_s_input_should_be_tensors
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_int16 __pyx_mstate_global->__pyx_n_s_int16
#define __pyx_n_s_int32 __pyx_mstate_global->__pyx_n_s_int32
#define __pyx_n_s_int64 __pyx_mstate_global->__pyx_n_s_int64
#define __pyx_n_s_int8 __pyx_mstate_global->__pyx_n_s_int8
#define __pyx_n_s_integer __pyx_mstate_global->__pyx_n_s_integer
#define __pyx_n_s_invert_elements __pyx_mstate_global->__pyx_n_s_invert_elements
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_item __pyx_mstate_global->__pyx_n_s_item
#define __pyx_kp_s_item_must_be_called_on_array_of __pyx_mstate_global->__pyx_kp_s_item_must_be_called_on_array_of
#define __pyx_n_s_itemsize __pyx_mstate_global->__pyx_n_s_itemsize
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_n_s_keepdims __pyx_mstate_global->__pyx_n_s_keepdims
#define __pyx_n_s_lens __pyx_mstate_global->__pyx_n_s_lens
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_match_tensor_types __pyx_mstate_global->__pyx_n_s_match_tensor_types
#define __pyx_n_s_maximum __pyx_mstate_global->__pyx_n_s_maximum
#define __pyx_n_s_memo __pyx_mstate_global->__pyx_n_s_memo
#define __pyx_n_s_mn __pyx_mstate_global->__pyx_n_s_mn
#define __pyx_n_s_mod __pyx_mstate_global->__pyx_n_s_mod
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_mx __pyx_mstate_global->__pyx_n_s_mx
#define __pyx_n_s_mystr __pyx_mstate_global->__pyx_n_s_mystr
#define __pyx_n_s_mystrides __pyx_mstate_global->__pyx_n_s_mystrides
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_na __pyx_mstate_global->__pyx_n_s_na
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nb __pyx_mstate_global->__pyx_n_s_nb
#define __pyx_n_s_ndarray __pyx_mstate_global->__pyx_n_s_ndarray
#define __pyx_n_s_ndim __pyx_mstate_global->__pyx_n_s_ndim
#define __pyx_n_s_nega __pyx_mstate_global->__pyx_n_s_nega
#define __pyx_n_s_nega_size __pyx_mstate_global->__pyx_n_s_nega_size
#define __pyx_n_s_new_shape __pyx_mstate_global->__pyx_n_s_new_shape
#define __pyx_n_s_new_size __pyx_mstate_global->__pyx_n_s_new_size
#define __pyx_n_s_newshape __pyx_mstate_global->__pyx_n_s_newshape
#define __pyx_n_s_no __pyx_mstate_global->__pyx_n_s_no
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_norm1 __pyx_mstate_global->__pyx_n_s_norm1
#define __pyx_kp_u_norm1_1_norm_of_the_tensor_Retu __pyx_mstate_global->__pyx_kp_u_norm1_1_norm_of_the_tensor_Retu
#define __pyx_n_s_norm2 __pyx_mstate_global->__pyx_n_s_norm2
#define __pyx_kp_u_norm2_2_norm_of_the_tensor_Retu __pyx_mstate_global->__pyx_kp_u_norm2_2_norm_of_the_tensor_Retu
#define __pyx_n_s_norm_infty __pyx_mstate_global->__pyx_n_s_norm_infty
#define __pyx_kp_u_norm_infty_Infinity_norm_of_the __pyx_mstate_global->__pyx_kp_u_norm_infty_Infinity_norm_of_the
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_number __pyx_mstate_global->__pyx_n_s_number
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_s_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_s_numpy_core_multiarray_failed_to
#define __pyx_kp_s_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_s_numpy_core_umath_failed_to_impor
#define __pyx_n_s_offset __pyx_mstate_global->__pyx_n_s_offset
#define __pyx_n_s_offsets __pyx_mstate_global->__pyx_n_s_offsets
#define __pyx_n_s_ones __pyx_mstate_global->__pyx_n_s_ones
#define __pyx_n_s_op __pyx_mstate_global->__pyx_n_s_op
#define __pyx_n_s_ord_comp __pyx_mstate_global->__pyx_n_s_ord_comp
#define __pyx_n_s_order __pyx_mstate_global->__pyx_n_s_order
#define __pyx_n_s_other __pyx_mstate_global->__pyx_n_s_other
#define __pyx_n_s_out __pyx_mstate_global->__pyx_n_s_out
#define __pyx_n_s_out_dims __pyx_mstate_global->__pyx_n_s_out_dims
#define __pyx_n_s_out_dtype __pyx_mstate_global->__pyx_n_s_out_dtype
#define __pyx_n_s_out_order __pyx_mstate_global->__pyx_n_s_out_order
#define __pyx_n_s_out_sp __pyx_mstate_global->__pyx_n_s_out_sp
#define __pyx_n_s_out_sym __pyx_mstate_global->__pyx_n_s_out_sym
#define __pyx_n_s_out_tsr __pyx_mstate_global->__pyx_n_s_out_tsr
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_n_s_p_A __pyx_mstate_global->__pyx_n_s_p_A
#define __pyx_n_s_p_B __pyx_mstate_global->__pyx_n_s_p_B
#define __pyx_n_s_partition __pyx_mstate_global->__pyx_n_s_partition
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_n_s_permutation_A __pyx_mstate_global->__pyx_n_s_permutation_A
#define __pyx_n_s_permutation_B __pyx_mstate_global->__pyx_n_s_permutation_B
#define __pyx_n_s_permute __pyx_mstate_global->__pyx_n_s_permute
#define __pyx_n_s_pos __pyx_mstate_global->__pyx_n_s_pos
#define __pyx_n_s_power __pyx_mstate_global->__pyx_n_s_power
#define __pyx_n_s_prl __pyx_mstate_global->__pyx_n_s_prl
#define __pyx_n_s_prnt __pyx_mstate_global->__pyx_n_s_prnt
#define __pyx_kp_u_prnt_Function_to_print_the_non __pyx_mstate_global->__pyx_kp_u_prnt_Function_to_print_the_non
#define __pyx_n_s_profile __pyx_mstate_global->__pyx_n_s_profile
#define __pyx_n_s_put __pyx_mstate_global->__pyx_n_s_put
#define __pyx_n_s_pyreshape __pyx_mstate_global->__pyx_n_s_pyreshape
#define __pyx_n_s_pytensor_init __pyx_mstate_global->__pyx_n_s_pytensor_init
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_raise __pyx_mstate_global->__pyx_n_s_raise
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_rank __pyx_mstate_global->__pyx_n_s_rank
#define __pyx_n_s_rarr __pyx_mstate_global->__pyx_n_s_rarr
#define __pyx_n_s_ravel __pyx_mstate_global->__pyx_n_s_ravel
#define __pyx_kp_u_ravel_order_F_Return_the_flatte __pyx_mstate_global->__pyx_kp_u_ravel_order_F_Return_the_flatte
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_read_all __pyx_mstate_global->__pyx_n_s_read_all
#define __pyx_n_s_read_all_2 __pyx_mstate_global->__pyx_n_s_read_all_2
#define __pyx_n_s_read_all_nnz __pyx_mstate_global->__pyx_n_s_read_all_nnz
#define __pyx_n_s_read_from_file __pyx_mstate_global->__pyx_n_s_read_from_file
#define __pyx_n_s_read_local __pyx_mstate_global->__pyx_n_s_read_local
#define __pyx_n_s_read_local_nnz __pyx_mstate_global->__pyx_n_s_read_local_nnz
#define __pyx_n_s_real __pyx_mstate_global->__pyx_n_s_real
#define __pyx_kp_u_real_value_None_Return_real_par __pyx_mstate_global->__pyx_kp_u_real_value_None_Return_real_par
#define __pyx_n_s_red_idx_num __pyx_mstate_global->__pyx_n_s_red_idx_num
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_reshape __pyx_mstate_global->__pyx_n_s_reshape
#define __pyx_kp_u_reshape_integer_Return_a_new_te __pyx_mstate_global->__pyx_kp_u_reshape_integer_Return_a_new_te
#define __pyx_n_s_result_type __pyx_mstate_global->__pyx_n_s_result_type
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_rev_array __pyx_mstate_global->__pyx_n_s_rev_array
#define __pyx_n_s_safe __pyx_mstate_global->__pyx_n_s_safe
#define __pyx_n_s_same_kind __pyx_mstate_global->__pyx_n_s_same_kind
#define __pyx_n_s_sample __pyx_mstate_global->__pyx_n_s_sample
#define __pyx_kp_u_sample_p_Extract_a_sample_of_th __pyx_mstate_global->__pyx_kp_u_sample_p_Extract_a_sample_of_th
#define __pyx_n_s_scale __pyx_mstate_global->__pyx_n_s_scale
#define __pyx_n_s_scl __pyx_mstate_global->__pyx_n_s_scl
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_set_all __pyx_mstate_global->__pyx_n_s_set_all
#define __pyx_kp_u_set_all_value_Set_all_elements __pyx_mstate_global->__pyx_kp_u_set_all_value_Set_all_elements
#define __pyx_n_s_set_zero __pyx_mstate_global->__pyx_n_s_set_zero
#define __pyx_kp_u_set_zero_Set_all_elements_in_a __pyx_mstate_global->__pyx_kp_u_set_zero_Set_all_elements_in_a
#define __pyx_n_s_setgetitem_helper __pyx_mstate_global->__pyx_n_s_setgetitem_helper
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sp __pyx_mstate_global->__pyx_n_s_sp
#define __pyx_n_s_sparsify __pyx_mstate_global->__pyx_n_s_sparsify
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_st __pyx_mstate_global->__pyx_n_s_st
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_str_dtype __pyx_mstate_global->__pyx_n_s_str_dtype
#define __pyx_n_s_str_self __pyx_mstate_global->__pyx_n_s_str_self
#define __pyx_n_s_string __pyx_mstate_global->__pyx_n_s_string
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_kp_u_sum_axis_None_dtype_None_out_No __pyx_mstate_global->__pyx_kp_u_sum_axis_None_dtype_None_out_No
#define __pyx_n_s_sym __pyx_mstate_global->__pyx_n_s_sym
#define __pyx_n_s_sz __pyx_mstate_global->__pyx_n_s_sz
#define __pyx_n_s_tB __pyx_mstate_global->__pyx_n_s_tB
#define __pyx_n_s_t_reshape __pyx_mstate_global->__pyx_n_s_t_reshape
#define __pyx_n_s_take __pyx_mstate_global->__pyx_n_s_take
#define __pyx_n_s_take_abs __pyx_mstate_global->__pyx_n_s_take_abs
#define __pyx_kp_u_take_indices_axis_None_out_None __pyx_mstate_global->__pyx_kp_u_take_indices_axis_None_out_None
#define __pyx_n_s_tensor __pyx_mstate_global->__pyx_n_s_tensor
#define __pyx_n_s_tensor_T __pyx_mstate_global->__pyx_n_s_tensor_T
#define __pyx_kp_u_tensor_T_axes_None_Permute_the __pyx_mstate_global->__pyx_kp_u_tensor_T_axes_None_Permute_the
#define __pyx_kp_u_tensor_T_line_544 __pyx_mstate_global->__pyx_kp_u_tensor_T_line_544
#define __pyx_n_s_tensor___deepcopy __pyx_mstate_global->__pyx_n_s_tensor___deepcopy
#define __pyx_n_s_tensor___read_all __pyx_mstate_global->__pyx_n_s_tensor___read_all
#define __pyx_n_s_tensor___reduce_cython __pyx_mstate_global->__pyx_n_s_tensor___reduce_cython
#define __pyx_n_s_tensor___setstate_cython __pyx_mstate_global->__pyx_n_s_tensor___setstate_cython
#define __pyx_n_s_tensor___write_all __pyx_mstate_global->__pyx_n_s_tensor___write_all
#define __pyx_n_s_tensor__bool_sum __pyx_mstate_global->__pyx_n_s_tensor__bool_sum
#define __pyx_n_s_tensor__compare_tensors __pyx_mstate_global->__pyx_n_s_tensor__compare_tensors
#define __pyx_n_s_tensor__convert_type __pyx_mstate_global->__pyx_n_s_tensor__convert_type
#define __pyx_n_s_tensor__exp_python __pyx_mstate_global->__pyx_n_s_tensor__exp_python
#define __pyx_n_s_tensor__get_slice __pyx_mstate_global->__pyx_n_s_tensor__get_slice
#define __pyx_n_s_tensor__invert_elements __pyx_mstate_global->__pyx_n_s_tensor__invert_elements
#define __pyx_n_s_tensor__read_all __pyx_mstate_global->__pyx_n_s_tensor__read_all
#define __pyx_n_s_tensor__ufunc_interpret __pyx_mstate_global->__pyx_n_s_tensor__ufunc_interpret
#define __pyx_n_s_tensor__write_all __pyx_mstate_global->__pyx_n_s_tensor__write_all
#define __pyx_n_s_tensor__write_slice __pyx_mstate_global->__pyx_n_s_tensor__write_slice
#define __pyx_n_s_tensor_all __pyx_mstate_global->__pyx_n_s_tensor_all
#define __pyx_kp_u_tensor_all_line_1027 __pyx_mstate_global->__pyx_kp_u_tensor_all_line_1027
#define __pyx_n_s_tensor_astype __pyx_mstate_global->__pyx_n_s_tensor_astype
#define __pyx_kp_u_tensor_astype_line_1580 __pyx_mstate_global->__pyx_kp_u_tensor_astype_line_1580
#define __pyx_n_s_tensor_aux __pyx_mstate_global->__pyx_n_s_tensor_aux
#define __pyx_n_s_tensor_conj __pyx_mstate_global->__pyx_n_s_tensor_conj
#define __pyx_kp_u_tensor_conj_line_1894 __pyx_mstate_global->__pyx_kp_u_tensor_conj_line_1894
#define __pyx_n_s_tensor_copy __pyx_mstate_global->__pyx_n_s_tensor_copy
#define __pyx_kp_u_tensor_copy_line_1367 __pyx_mstate_global->__pyx_kp_u_tensor_copy_line_1367
#define __pyx_n_s_tensor_diagonal __pyx_mstate_global->__pyx_n_s_tensor_diagonal
#define __pyx_kp_u_tensor_diagonal_line_2305 __pyx_mstate_global->__pyx_kp_u_tensor_diagonal_line_2305
#define __pyx_n_s_tensor_dot __pyx_mstate_global->__pyx_n_s_tensor_dot
#define __pyx_kp_u_tensor_dot_line_1706 __pyx_mstate_global->__pyx_kp_u_tensor_dot_line_1706
#define __pyx_n_s_tensor_fill_random __pyx_mstate_global->__pyx_n_s_tensor_fill_random
#define __pyx_kp_u_tensor_fill_random_line_851 __pyx_mstate_global->__pyx_kp_u_tensor_fill_random_line_851
#define __pyx_kp_u_tensor_fill_random_mn_None_mx_N __pyx_mstate_global->__pyx_kp_u_tensor_fill_random_mn_None_mx_N
#define __pyx_n_s_tensor_fill_sp_random __pyx_mstate_global->__pyx_n_s_tensor_fill_sp_random
#define __pyx_kp_u_tensor_fill_sp_random_line_899 __pyx_mstate_global->__pyx_kp_u_tensor_fill_sp_random_line_899
#define __pyx_kp_u_tensor_fill_sp_random_mn_None_m __pyx_mstate_global->__pyx_kp_u_tensor_fill_sp_random_mn_None_m
#define __pyx_n_s_tensor_from_nparray __pyx_mstate_global->__pyx_n_s_tensor_from_nparray
#define __pyx_kp_u_tensor_from_nparray_line_2511 __pyx_mstate_global->__pyx_kp_u_tensor_from_nparray_line_2511
#define __pyx_n_s_tensor_get_dims __pyx_mstate_global->__pyx_n_s_tensor_get_dims
#define __pyx_n_s_tensor_get_distribution __pyx_mstate_global->__pyx_n_s_tensor_get_distribution
#define __pyx_n_s_tensor_get_type __pyx_mstate_global->__pyx_n_s_tensor_get_type
#define __pyx_n_s_tensor_i __pyx_mstate_global->__pyx_n_s_tensor_i
#define __pyx_kp_u_tensor_i_line_1228 __pyx_mstate_global->__pyx_kp_u_tensor_i_line_1228
#define __pyx_n_s_tensor_imag __pyx_mstate_global->__pyx_n_s_tensor_imag
#define __pyx_kp_u_tensor_imag_line_1319 __pyx_mstate_global->__pyx_kp_u_tensor_imag_line_1319
#define __pyx_n_s_tensor_item __pyx_mstate_global->__pyx_n_s_tensor_item
#define __pyx_n_s_tensor_norm1 __pyx_mstate_global->__pyx_n_s_tensor_norm1
#define __pyx_kp_u_tensor_norm1_line_2376 __pyx_mstate_global->__pyx_kp_u_tensor_norm1_line_2376
#define __pyx_n_s_tensor_norm2 __pyx_mstate_global->__pyx_n_s_tensor_norm2
#define __pyx_kp_u_tensor_norm2_line_2400 __pyx_mstate_global->__pyx_kp_u_tensor_norm2_line_2400
#define __pyx_n_s_tensor_norm_infty __pyx_mstate_global->__pyx_n_s_tensor_norm_infty
#define __pyx_kp_u_tensor_norm_infty_line_2436 __pyx_mstate_global->__pyx_kp_u_tensor_norm_infty_line_2436
#define __pyx_n_s_tensor_permute __pyx_mstate_global->__pyx_n_s_tensor_permute
#define __pyx_n_s_tensor_prnt __pyx_mstate_global->__pyx_n_s_tensor_prnt
#define __pyx_kp_u_tensor_prnt_line_1257 __pyx_mstate_global->__pyx_kp_u_tensor_prnt_line_1257
#define __pyx_n_s_tensor_ravel __pyx_mstate_global->__pyx_n_s_tensor_ravel
#define __pyx_kp_u_tensor_ravel_line_1482 __pyx_mstate_global->__pyx_kp_u_tensor_ravel_line_1482
#define __pyx_n_s_tensor_read __pyx_mstate_global->__pyx_n_s_tensor_read
#define __pyx_n_s_tensor_read_all __pyx_mstate_global->__pyx_n_s_tensor_read_all
#define __pyx_n_s_tensor_read_all_nnz __pyx_mstate_global->__pyx_n_s_tensor_read_all_nnz
#define __pyx_n_s_tensor_read_from_file __pyx_mstate_global->__pyx_n_s_tensor_read_from_file
#define __pyx_n_s_tensor_read_local __pyx_mstate_global->__pyx_n_s_tensor_read_local
#define __pyx_n_s_tensor_read_local_nnz __pyx_mstate_global->__pyx_n_s_tensor_read_local_nnz
#define __pyx_n_s_tensor_real __pyx_mstate_global->__pyx_n_s_tensor_real
#define __pyx_kp_u_tensor_real_line_1274 __pyx_mstate_global->__pyx_kp_u_tensor_real_line_1274
#define __pyx_n_s_tensor_reshape __pyx_mstate_global->__pyx_n_s_tensor_reshape
#define __pyx_kp_u_tensor_reshape_line_1391 __pyx_mstate_global->__pyx_kp_u_tensor_reshape_line_1391
#define __pyx_n_s_tensor_sample __pyx_mstate_global->__pyx_n_s_tensor_sample
#define __pyx_kp_u_tensor_sample_line_2595 __pyx_mstate_global->__pyx_kp_u_tensor_sample_line_2595
#define __pyx_n_s_tensor_set_all __pyx_mstate_global->__pyx_n_s_tensor_set_all
#define __pyx_kp_u_tensor_set_all_line_2196 __pyx_mstate_global->__pyx_kp_u_tensor_set_all_line_2196
#define __pyx_n_s_tensor_set_zero __pyx_mstate_global->__pyx_n_s_tensor_set_zero
#define __pyx_kp_u_tensor_set_zero_line_2180 __pyx_mstate_global->__pyx_kp_u_tensor_set_zero_line_2180
#define __pyx_n_s_tensor_sparsify __pyx_mstate_global->__pyx_n_s_tensor_sparsify
#define __pyx_n_s_tensor_sum __pyx_mstate_global->__pyx_n_s_tensor_sum
#define __pyx_kp_u_tensor_sum_line_2339 __pyx_mstate_global->__pyx_kp_u_tensor_sum_line_2339
#define __pyx_n_s_tensor_take __pyx_mstate_global->__pyx_n_s_tensor_take
#define __pyx_kp_u_tensor_take_line_2540 __pyx_mstate_global->__pyx_kp_u_tensor_take_line_2540
#define __pyx_n_s_tensor_tensordot __pyx_mstate_global->__pyx_n_s_tensor_tensordot
#define __pyx_kp_u_tensor_tensordot_line_1739 __pyx_mstate_global->__pyx_kp_u_tensor_tensordot_line_1739
#define __pyx_n_s_tensor_to_nparray __pyx_mstate_global->__pyx_n_s_tensor_to_nparray
#define __pyx_kp_u_tensor_to_nparray_line_2481 __pyx_mstate_global->__pyx_kp_u_tensor_to_nparray_line_2481
#define __pyx_n_s_tensor_tot_size __pyx_mstate_global->__pyx_n_s_tensor_tot_size
#define __pyx_n_s_tensor_trace __pyx_mstate_global->__pyx_n_s_tensor_trace
#define __pyx_kp_u_tensor_trace_line_2265 __pyx_mstate_global->__pyx_kp_u_tensor_trace_line_2265
#define __pyx_n_s_tensor_transpose __pyx_mstate_global->__pyx_n_s_tensor_transpose
#define __pyx_kp_u_tensor_transpose_axes_Return_th __pyx_mstate_global->__pyx_kp_u_tensor_transpose_axes_Return_th
#define __pyx_kp_u_tensor_transpose_line_569 __pyx_mstate_global->__pyx_kp_u_tensor_transpose_line_569
#define __pyx_n_s_tensor_write __pyx_mstate_global->__pyx_n_s_tensor_write
#define __pyx_n_s_tensor_write_to_file __pyx_mstate_global->__pyx_n_s_tensor_write_to_file
#define __pyx_n_s_tensordot __pyx_mstate_global->__pyx_n_s_tensordot
#define __pyx_kp_u_tensordot_other_axes_2_Return_t __pyx_mstate_global->__pyx_kp_u_tensordot_other_axes_2_Return_t
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_thresh __pyx_mstate_global->__pyx_n_s_thresh
#define __pyx_n_s_threshold __pyx_mstate_global->__pyx_n_s_threshold
#define __pyx_n_s_timer __pyx_mstate_global->__pyx_n_s_timer
#define __pyx_n_s_to_nparray __pyx_mstate_global->__pyx_n_s_to_nparray
#define __pyx_kp_u_to_nparray_Convert_tensor_to_nu __pyx_mstate_global->__pyx_kp_u_to_nparray_Convert_tensor_to_nu
#define __pyx_n_s_tot_size __pyx_mstate_global->__pyx_n_s_tot_size
#define __pyx_n_s_total_size __pyx_mstate_global->__pyx_n_s_total_size
#define __pyx_n_s_trace __pyx_mstate_global->__pyx_n_s_trace
#define __pyx_kp_u_trace_offset_0_axis1_0_axis2_1 __pyx_mstate_global->__pyx_kp_u_trace_offset_0_axis1_0_axis2_1
#define __pyx_n_s_transpose __pyx_mstate_global->__pyx_n_s_transpose
#define __pyx_n_s_type __pyx_mstate_global->__pyx_n_s_type
#define __pyx_n_s_type_index __pyx_mstate_global->__pyx_n_s_type_index
#define __pyx_n_s_ufunc_interpret __pyx_mstate_global->__pyx_n_s_ufunc_interpret
#define __pyx_n_s_unpack __pyx_mstate_global->__pyx_n_s_unpack
#define __pyx_n_s_unpack_sym __pyx_mstate_global->__pyx_n_s_unpack_sym
#define __pyx_n_s_unsafe __pyx_mstate_global->__pyx_n_s_unsafe
#define __pyx_n_s_use_align_for_pair __pyx_mstate_global->__pyx_n_s_use_align_for_pair
#define __pyx_n_s_val __pyx_mstate_global->__pyx_n_s_val
#define __pyx_n_s_vals __pyx_mstate_global->__pyx_n_s_vals
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_view __pyx_mstate_global->__pyx_n_s_view
#define __pyx_n_s_vvals __pyx_mstate_global->__pyx_n_s_vvals
#define __pyx_n_s_with_vals __pyx_mstate_global->__pyx_n_s_with_vals
#define __pyx_n_s_world __pyx_mstate_global->__pyx_n_s_world
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_write_all __pyx_mstate_global->__pyx_n_s_write_all
#define __pyx_n_s_write_slice __pyx_mstate_global->__pyx_n_s_write_slice
#define __pyx_n_s_write_to_file __pyx_mstate_global->__pyx_n_s_write_to_file
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_float__1 __pyx_mstate_global->__pyx_float__1
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_slice__4 __pyx_mstate_global->__pyx_slice__4
#define __pyx_slice__5 __pyx_mstate_global->__pyx_slice__5
#define __pyx_slice__6 __pyx_mstate_global->__pyx_slice__6
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__79 __pyx_mstate_global->__pyx_tuple__79
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__97 __pyx_mstate_global->__pyx_tuple__97
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__102 __pyx_mstate_global->__pyx_tuple__102
#define __pyx_tuple__104 __pyx_mstate_global->__pyx_tuple__104
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__111 __pyx_mstate_global->__pyx_tuple__111
#define __pyx_tuple__112 __pyx_mstate_global->__pyx_tuple__112
#define __pyx_tuple__114 __pyx_mstate_global->__pyx_tuple__114
#define __pyx_tuple__116 __pyx_mstate_global->__pyx_tuple__116
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__121 __pyx_mstate_global->__pyx_tuple__121
#define __pyx_tuple__123 __pyx_mstate_global->__pyx_tuple__123
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__126 __pyx_mstate_global->__pyx_tuple__126
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__131 __pyx_mstate_global->__pyx_tuple__131
#define __pyx_tuple__133 __pyx_mstate_global->__pyx_tuple__133
#define __pyx_tuple__134 __pyx_mstate_global->__pyx_tuple__134
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__138 __pyx_mstate_global->__pyx_tuple__138
#define __pyx_tuple__140 __pyx_mstate_global->__pyx_tuple__140
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__145 __pyx_mstate_global->__pyx_tuple__145
#define __pyx_tuple__147 __pyx_mstate_global->__pyx_tuple__147
#define __pyx_tuple__149 __pyx_mstate_global->__pyx_tuple__149
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__152 __pyx_mstate_global->__pyx_tuple__152
#define __pyx_tuple__153 __pyx_mstate_global->__pyx_tuple__153
#define __pyx_tuple__158 __pyx_mstate_global->__pyx_tuple__158
#define __pyx_tuple__160 __pyx_mstate_global->__pyx_tuple__160
#define __pyx_tuple__163 __pyx_mstate_global->__pyx_tuple__163
#define __pyx_tuple__165 __pyx_mstate_global->__pyx_tuple__165
#define __pyx_tuple__166 __pyx_mstate_global->__pyx_tuple__166
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__171 __pyx_mstate_global->__pyx_tuple__171
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__72 __pyx_mstate_global->__pyx_codeobj__72
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__120 __pyx_mstate_global->__pyx_codeobj__120
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__130 __pyx_mstate_global->__pyx_codeobj__130
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__144 __pyx_mstate_global->__pyx_codeobj__144
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
#define __pyx_codeobj__148 __pyx_mstate_global->__pyx_codeobj__148
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__155 __pyx_mstate_global->__pyx_codeobj__155
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__157 __pyx_mstate_global->__pyx_codeobj__157
#define __pyx_codeobj__159 __pyx_mstate_global->__pyx_codeobj__159
#define __pyx_codeobj__161 __pyx_mstate_global->__pyx_codeobj__161
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__164 __pyx_mstate_global->__pyx_codeobj__164
#define __pyx_codeobj__167 __pyx_mstate_global->__pyx_codeobj__167
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__170 __pyx_mstate_global->__pyx_codeobj__170
#define __pyx_codeobj__172 __pyx_mstate_global->__pyx_codeobj__172
/* #### Code section: module_code ### */

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":248
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":254
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":260
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":268
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":275
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":281
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":290
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":776
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":776
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":790
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":792
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":968
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":969
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":970
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 970, __pyx_L1_error)

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":968
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":972
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":973
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":974
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":975
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":974
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":976
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":972
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":980
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":982
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 982, __pyx_L3_error)

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":983
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 983, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":984
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 984, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 984, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":980
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":986
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":988
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 988, __pyx_L3_error)

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":989
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 989, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":990
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 990, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 990, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":986
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":992
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":994
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 994, __pyx_L3_error)

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":995
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 995, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":996
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 996, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 996, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":992
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1011
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1026
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1036
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1039
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1043
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1039
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1050
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "ctf/tensor.pyx":62
 * 
 * #from enum import Enum
 * def _enum(**enums):             # <<<<<<<<<<<<<<
 *     return type('Enum', (), enums)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_1_enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_1_enum = {"_enum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_1_enum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_1_enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_enums = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_enum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_enum", 1, 0, 0, __pyx_nargs); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_enum", 1))) return NULL;
  if (__pyx_kwds) {
    __pyx_v_enums = __Pyx_KwargsAsDict_FASTCALL(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_enums)) return NULL;
    __Pyx_GOTREF(__pyx_v_enums);
  } else {
    __pyx_v_enums = PyDict_New();
    if (unlikely(!__pyx_v_enums)) return NULL;
    __Pyx_GOTREF(__pyx_v_enums);
  }
  __pyx_r = __pyx_pf_3ctf_6tensor__enum(__pyx_self, __pyx_v_enums);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_enums);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor__enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_enums) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_enum", 1);

  /* "ctf/tensor.pyx":63
 * #from enum import Enum
 * def _enum(**enums):
 *     return type('Enum', (), enums)             # <<<<<<<<<<<<<<
 * 
 * SYM = _enum(NS=0, SY=1, AS=2, SH=3)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Enum);
  __Pyx_GIVEREF(__pyx_n_s_Enum);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Enum)) __PYX_ERR(0, 63, __pyx_L1_error);
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_empty_tuple)) __PYX_ERR(0, 63, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_enums);
  __Pyx_GIVEREF(__pyx_v_enums);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_enums)) __PYX_ERR(0, 63, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyType_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":62
 * 
 * #from enum import Enum
 * def _enum(**enums):             # <<<<<<<<<<<<<<
 *     return type('Enum', (), enums)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor._enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":231
 *         Attribute strides. Tuple of bytes for each dimension to traverse the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strides
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_7strides_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_7strides___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_7strides___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":232
 *         """
 *         def __get__(self):
 *             return self.strides             # <<<<<<<<<<<<<<
 * 
 *     property nbytes:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->strides);
  __pyx_r = __pyx_v_self->strides;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":231
 *         Attribute strides. Tuple of bytes for each dimension to traverse the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strides
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":238
 *         Attribute nbytes. The number of bytes for the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.nbytes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_6nbytes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_6nbytes___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_6nbytes___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":239
 *         """
 *         def __get__(self):
 *             return self.nbytes             # <<<<<<<<<<<<<<
 * 
 *     property itemsize:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->nbytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":238
 *         Attribute nbytes. The number of bytes for the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.nbytes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":245
 *         Attribute itemsize. One element in bytes.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_8itemsize_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_8itemsize___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_8itemsize___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":246
 *         """
 *         def __get__(self):
 *             return self.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":245
 *         Attribute itemsize. One element in bytes.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":252
 *         Attribute size. Total number of elements in the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_4size___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_4size___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":253
 *         """
 *         def __get__(self):
 *             return self.size             # <<<<<<<<<<<<<<
 * 
 *     property ndim:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":252
 *         Attribute size. Total number of elements in the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":259
 *         Attribute ndim. Number of dimensions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_4ndim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_4ndim___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_4ndim___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":260
 *         """
 *         def __get__(self):
 *             return self.ndim             # <<<<<<<<<<<<<<
 * 
 *     property shape:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":259
 *         Attribute ndim. Number of dimensions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":266
 *         Attribute shape. Tuple of each dimension.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.shape
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5shape_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_5shape___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_5shape___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":267
 *         """
 *         def __get__(self):
 *             return self.shape             # <<<<<<<<<<<<<<
 * 
 *     property dtype:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->shape);
  __pyx_r = __pyx_v_self->shape;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":266
 *         Attribute shape. Tuple of each dimension.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.shape
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":273
 *         Attribute dtype. Numpy data-type, indicating the type of tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5dtype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_5dtype___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_5dtype___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":274
 *         """
 *         def __get__(self):
 *             return self.dtype             # <<<<<<<<<<<<<<
 * 
 *     property order:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->dtype);
  __pyx_r = ((PyObject *)__pyx_v_self->dtype);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":273
 *         Attribute dtype. Numpy data-type, indicating the type of tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dtype
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":280
 *         Attribute order. Bytes memory order for the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return chr(self.order)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5order_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5order_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_5order___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_5order___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":281
 *         """
 *         def __get__(self):
 *             return chr(self.order)             # <<<<<<<<<<<<<<
 * 
 *     property sp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":280
 *         Attribute order. Bytes memory order for the tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return chr(self.order)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor.order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":287
 *         Attribute sp. 0 indicates the tensor is not sparse tensor, 1 means the tensor is CTF sparse tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.sp
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_2sp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_2sp_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_2sp___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_2sp___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":288
 *         """
 *         def __get__(self):
 *             return self.sp             # <<<<<<<<<<<<<<
 * 
 *     property sym:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":287
 *         Attribute sp. 0 indicates the tensor is not sparse tensor, 1 means the tensor is CTF sparse tensor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.sp
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor.sp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":294
 *         Attribute sym. Specifies symmetry for use for symmetric storage (and causing symmetrization of accumulation expressions to this tensor), sym should be of size order, with each element NS/SY/AS/SH denoting symmetry relationship with the next mode (see also C++ docs and tensor constructor)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.sym
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_3sym_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_3sym_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_3sym___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_3sym___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":295
 *         """
 *         def __get__(self):
 *             return self.sym             # <<<<<<<<<<<<<<
 * 
 *     property nnz_tot:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->sym);
  __pyx_r = ((PyObject *)__pyx_v_self->sym);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":294
 *         Attribute sym. Specifies symmetry for use for symmetric storage (and causing symmetrization of accumulation expressions to this tensor), sym should be of size order, with each element NS/SY/AS/SH denoting symmetry relationship with the next mode (see also C++ docs and tensor constructor)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.sym
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":301
 *         Total number of nonzeros in tensor
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dt.nnz_tot
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_7nnz_tot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_7nnz_tot_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_7nnz_tot___get__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_7nnz_tot___get__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "ctf/tensor.pyx":302
 *         """
 *         def __get__(self):
 *             return self.dt.nnz_tot             # <<<<<<<<<<<<<<
 * 
 *     def _bool_sum(tensor self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->dt->nnz_tot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":301
 *         Total number of nonzeros in tensor
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dt.nnz_tot
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor.nnz_tot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":304
 *             return self.dt.nnz_tot
 * 
 *     def _bool_sum(tensor self):             # <<<<<<<<<<<<<<
 *         return sum_bool_tsr(self.dt)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_1_bool_sum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_1_bool_sum = {"_bool_sum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_1_bool_sum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_1_bool_sum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bool_sum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_bool_sum", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_bool_sum", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor__bool_sum(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor__bool_sum(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bool_sum", 1);

  /* "ctf/tensor.pyx":305
 * 
 *     def _bool_sum(tensor self):
 *         return sum_bool_tsr(self.dt)             # <<<<<<<<<<<<<<
 * 
 *     # convert the type of self and store the elements in self to B
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(CTF_int::sum_bool_tsr(__pyx_v_self->dt)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":304
 *             return self.dt.nnz_tot
 * 
 *     def _bool_sum(tensor self):             # <<<<<<<<<<<<<<
 *         return sum_bool_tsr(self.dt)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ctf.tensor.tensor._bool_sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":308
 * 
 *     # convert the type of self and store the elements in self to B
 *     def _convert_type(tensor self, tensor B):             # <<<<<<<<<<<<<<
 *         conv_type(ctf.helper.type_index[self.dtype], ctf.helper.type_index[B.dtype], <ctensor*>self.dt, <ctensor*>B.dt);
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_3_convert_type(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_3_convert_type = {"_convert_type", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_3_convert_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_3_convert_type(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_convert_type (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_B,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_B)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_convert_type") < 0)) __PYX_ERR(0, 308, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_convert_type", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 308, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._convert_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_ptype_3ctf_6tensor_tensor, 1, "B", 0))) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_2_convert_type(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_2_convert_type(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_convert_type", 1);

  /* "ctf/tensor.pyx":309
 *     # convert the type of self and store the elements in self to B
 *     def _convert_type(tensor self, tensor B):
 *         conv_type(ctf.helper.type_index[self.dtype], ctf.helper.type_index[B.dtype], <ctensor*>self.dt, <ctensor*>B.dt);             # <<<<<<<<<<<<<<
 * 
 *     # get "shape" or dimensions of the ctensor
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_type_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_type_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_B->dtype)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CTF_int::conv_type(__pyx_t_3, __pyx_t_4, ((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt));

  /* "ctf/tensor.pyx":308
 * 
 *     # convert the type of self and store the elements in self to B
 *     def _convert_type(tensor self, tensor B):             # <<<<<<<<<<<<<<
 *         conv_type(ctf.helper.type_index[self.dtype], ctf.helper.type_index[B.dtype], <ctensor*>self.dt, <ctensor*>B.dt);
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor._convert_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":312
 * 
 *     # get "shape" or dimensions of the ctensor
 *     def get_dims(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_dims()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5get_dims(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_4get_dims, "\n        tensor.get_dims()\n        Return the dims/shape of tensor.\n\n        Returns\n        -------\n        output: tuple\n            Dims or shape of the tensor.\n\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_5get_dims = {"get_dims", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_5get_dims, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_4get_dims};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_5get_dims(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dims (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_dims", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_dims", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_4get_dims(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_4get_dims(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dims", 1);

  /* "ctf/tensor.pyx":323
 * 
 *         """
 *         return self.shape             # <<<<<<<<<<<<<<
 * 
 *     def get_type(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->shape);
  __pyx_r = __pyx_v_self->shape;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":312
 * 
 *     # get "shape" or dimensions of the ctensor
 *     def get_dims(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_dims()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":325
 *         return self.shape
 * 
 *     def get_type(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_type()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_7get_type(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_6get_type, "\n        tensor.get_type()\n        Return the dtype of tensor.\n\n        Returns\n        -------\n        output: data-type\n            Dtype of the tensor.\n\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_7get_type = {"get_type", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_7get_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_6get_type};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_7get_type(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_type (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_type", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_type", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_6get_type(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_6get_type(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_type", 1);

  /* "ctf/tensor.pyx":336
 * 
 *         """
 *         return self.dtype             # <<<<<<<<<<<<<<
 * 
 *     def get_distribution(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->dtype);
  __pyx_r = ((PyObject *)__pyx_v_self->dtype);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":325
 *         return self.shape
 * 
 *     def get_type(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_type()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":338
 *         return self.dtype
 * 
 *     def get_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_distribution()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_9get_distribution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_8get_distribution, "\n        tensor.get_distribution()\n        Return processor grid and intra-processor blocking\n\n        Returns\n        -------\n        output: string, idx_partition, idx_partition\n            idx array of this->order chars describing this processor modes mapping on processor grid dimensions starting from 'a'\n            prl Idx_Partition obtained from processor grid (topo) on which this tensor is mapped and the indices 'abcd...'\n            blk Idx_Partition obtained from virtual blocking of this tensor\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_9get_distribution = {"get_distribution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_9get_distribution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_8get_distribution};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_9get_distribution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distribution (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_distribution", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_distribution", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_8get_distribution(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_8get_distribution(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  char *__pyx_v_idx_;
  struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_prl = NULL;
  struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_blk = NULL;
  PyObject *__pyx_v_idx = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_distribution", 1);

  /* "ctf/tensor.pyx":350
 *             blk Idx_Partition obtained from virtual blocking of this tensor
 *         """
 *         cdef char * idx_ = NULL             # <<<<<<<<<<<<<<
 *         #idx_ = <char*> malloc(self.dt.order*sizeof(char))
 *         prl = idx_partition()
 */
  __pyx_v_idx_ = NULL;

  /* "ctf/tensor.pyx":352
 *         cdef char * idx_ = NULL
 *         #idx_ = <char*> malloc(self.dt.order*sizeof(char))
 *         prl = idx_partition()             # <<<<<<<<<<<<<<
 *         blk = idx_partition()
 *         self.dt.get_distribution(&idx_, prl.ip[0], blk.ip[0])
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3ctf_9partition_idx_partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_prl = ((struct __pyx_obj_3ctf_9partition_idx_partition *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":353
 *         #idx_ = <char*> malloc(self.dt.order*sizeof(char))
 *         prl = idx_partition()
 *         blk = idx_partition()             # <<<<<<<<<<<<<<
 *         self.dt.get_distribution(&idx_, prl.ip[0], blk.ip[0])
 *         idx = ""
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3ctf_9partition_idx_partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_blk = ((struct __pyx_obj_3ctf_9partition_idx_partition *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":354
 *         prl = idx_partition()
 *         blk = idx_partition()
 *         self.dt.get_distribution(&idx_, prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *         idx = ""
 *         for i in range(0,self.dt.order):
 */
  __pyx_v_self->dt->get_distribution((&__pyx_v_idx_), (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));

  /* "ctf/tensor.pyx":355
 *         blk = idx_partition()
 *         self.dt.get_distribution(&idx_, prl.ip[0], blk.ip[0])
 *         idx = ""             # <<<<<<<<<<<<<<
 *         for i in range(0,self.dt.order):
 *             idx += chr(idx_[i])
 */
  __Pyx_INCREF(__pyx_kp_s__3);
  __pyx_v_idx = __pyx_kp_s__3;

  /* "ctf/tensor.pyx":356
 *         self.dt.get_distribution(&idx_, prl.ip[0], blk.ip[0])
 *         idx = ""
 *         for i in range(0,self.dt.order):             # <<<<<<<<<<<<<<
 *             idx += chr(idx_[i])
 *         free(idx_)
 */
  __pyx_t_2 = __pyx_v_self->dt->order;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ctf/tensor.pyx":357
 *         idx = ""
 *         for i in range(0,self.dt.order):
 *             idx += chr(idx_[i])             # <<<<<<<<<<<<<<
 *         free(idx_)
 *         return idx, prl, blk
 */
    __pyx_t_1 = __Pyx_PyInt_From_char((__pyx_v_idx_[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_idx, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_idx, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "ctf/tensor.pyx":358
 *         for i in range(0,self.dt.order):
 *             idx += chr(idx_[i])
 *         free(idx_)             # <<<<<<<<<<<<<<
 *         return idx, prl, blk
 * 
 */
  free(__pyx_v_idx_);

  /* "ctf/tensor.pyx":359
 *             idx += chr(idx_[i])
 *         free(idx_)
 *         return idx, prl, blk             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, lens=None, sp=None, sym=None, dtype=None, order=None, tensor copy=None, idx=None, idx_partition prl=None, idx_partition blk=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_idx);
  __Pyx_GIVEREF(__pyx_v_idx);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_idx)) __PYX_ERR(0, 359, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_prl);
  __Pyx_GIVEREF((PyObject *)__pyx_v_prl);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_prl))) __PYX_ERR(0, 359, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_blk);
  __Pyx_GIVEREF((PyObject *)__pyx_v_blk);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_blk))) __PYX_ERR(0, 359, __pyx_L1_error);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":338
 *         return self.dtype
 * 
 *     def get_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_distribution()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.get_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_prl);
  __Pyx_XDECREF((PyObject *)__pyx_v_blk);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":361
 *         return idx, prl, blk
 * 
 *     def __cinit__(self, lens=None, sp=None, sym=None, dtype=None, order=None, tensor copy=None, idx=None, idx_partition prl=None, idx_partition blk=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor object constructor
 */

/* Python wrapper */
static int __pyx_pw_3ctf_6tensor_6tensor_11__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ctf_6tensor_6tensor_11__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lens = 0;
  PyObject *__pyx_v_sp = 0;
  PyObject *__pyx_v_sym = 0;
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_v_order = 0;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_copy = 0;
  PyObject *__pyx_v_idx = 0;
  struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_prl = 0;
  struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_blk = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lens,&__pyx_n_s_sp,&__pyx_n_s_sym,&__pyx_n_s_dtype,&__pyx_n_s_order,&__pyx_n_s_copy,&__pyx_n_s_idx,&__pyx_n_s_prl,&__pyx_n_s_blk,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_3ctf_6tensor_tensor *)Py_None));
    values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[7] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_3ctf_9partition_idx_partition *)Py_None));
    values[8] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_3ctf_9partition_idx_partition *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lens);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sp);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sym);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_copy);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx);
          if (value) { values[6] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prl);
          if (value) { values[7] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blk);
          if (value) { values[8] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 361, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_lens = values[0];
    __pyx_v_sp = values[1];
    __pyx_v_sym = values[2];
    __pyx_v_dtype = values[3];
    __pyx_v_order = values[4];
    __pyx_v_copy = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[5]);
    __pyx_v_idx = values[6];
    __pyx_v_prl = ((struct __pyx_obj_3ctf_9partition_idx_partition *)values[7]);
    __pyx_v_blk = ((struct __pyx_obj_3ctf_9partition_idx_partition *)values[8]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 9, __pyx_nargs); __PYX_ERR(0, 361, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_copy), __pyx_ptype_3ctf_6tensor_tensor, 1, "copy", 0))) __PYX_ERR(0, 361, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prl), __pyx_ptype_3ctf_9partition_idx_partition, 1, "prl", 0))) __PYX_ERR(0, 361, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_blk), __pyx_ptype_3ctf_9partition_idx_partition, 1, "blk", 0))) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_10__cinit__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_lens, __pyx_v_sp, __pyx_v_sym, __pyx_v_dtype, __pyx_v_order, __pyx_v_copy, __pyx_v_idx, __pyx_v_prl, __pyx_v_blk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ctf_6tensor_6tensor_10__cinit__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_lens, PyObject *__pyx_v_sp, PyObject *__pyx_v_sym, PyObject *__pyx_v_dtype, PyObject *__pyx_v_order, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_copy, PyObject *__pyx_v_idx, struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_prl, struct __pyx_obj_3ctf_9partition_idx_partition *__pyx_v_blk) {
  PyObject *__pyx_v_t_ti = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_strides = NULL;
  PyObject *__pyx_v_rlens = NULL;
  PyObject *__pyx_v_rsym = NULL;
  int64_t *__pyx_v_clens;
  int *__pyx_v_csym;
  CTF::World *__pyx_v_wrld;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_ccopy = NULL;
  PyObject *__pyx_7genexpr__pyx_v_l = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int64_t *__pyx_t_13;
  int *__pyx_t_14;
  char *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_lens);
  __Pyx_INCREF(__pyx_v_sp);
  __Pyx_INCREF(__pyx_v_sym);
  __Pyx_INCREF(__pyx_v_dtype);
  __Pyx_INCREF(__pyx_v_order);
  __Pyx_INCREF((PyObject *)__pyx_v_copy);
  __Pyx_INCREF(__pyx_v_idx);
  __Pyx_INCREF((PyObject *)__pyx_v_blk);

  /* "ctf/tensor.pyx":394
 *             lock blocking with processor labels
 *         """
 *         t_ti = ctf.profile.timer("pytensor_init")             # <<<<<<<<<<<<<<
 *         t_ti.start()
 *         if copy is None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_profile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_timer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_pytensor_init};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_t_ti = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":395
 *         """
 *         t_ti = ctf.profile.timer("pytensor_init")
 *         t_ti.start()             # <<<<<<<<<<<<<<
 *         if copy is None:
 *             if lens is None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_ti, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":396
 *         t_ti = ctf.profile.timer("pytensor_init")
 *         t_ti.start()
 *         if copy is None:             # <<<<<<<<<<<<<<
 *             if lens is None:
 *                 lens = []
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_copy) == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":397
 *         t_ti.start()
 *         if copy is None:
 *             if lens is None:             # <<<<<<<<<<<<<<
 *                 lens = []
 *             if sp is None:
 */
    __pyx_t_5 = (__pyx_v_lens == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":398
 *         if copy is None:
 *             if lens is None:
 *                 lens = []             # <<<<<<<<<<<<<<
 *             if sp is None:
 *                 sp = 0
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_lens, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":397
 *         t_ti.start()
 *         if copy is None:
 *             if lens is None:             # <<<<<<<<<<<<<<
 *                 lens = []
 *             if sp is None:
 */
    }

    /* "ctf/tensor.pyx":399
 *             if lens is None:
 *                 lens = []
 *             if sp is None:             # <<<<<<<<<<<<<<
 *                 sp = 0
 *             if dtype is None:
 */
    __pyx_t_5 = (__pyx_v_sp == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":400
 *                 lens = []
 *             if sp is None:
 *                 sp = 0             # <<<<<<<<<<<<<<
 *             if dtype is None:
 *                 dtype = np.float64
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_DECREF_SET(__pyx_v_sp, __pyx_int_0);

      /* "ctf/tensor.pyx":399
 *             if lens is None:
 *                 lens = []
 *             if sp is None:             # <<<<<<<<<<<<<<
 *                 sp = 0
 *             if dtype is None:
 */
    }

    /* "ctf/tensor.pyx":401
 *             if sp is None:
 *                 sp = 0
 *             if dtype is None:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if order is None:
 */
    __pyx_t_5 = (__pyx_v_dtype == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":402
 *                 sp = 0
 *             if dtype is None:
 *                 dtype = np.float64             # <<<<<<<<<<<<<<
 *             if order is None:
 *                 order = 'F'
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":401
 *             if sp is None:
 *                 sp = 0
 *             if dtype is None:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if order is None:
 */
    }

    /* "ctf/tensor.pyx":403
 *             if dtype is None:
 *                 dtype = np.float64
 *             if order is None:             # <<<<<<<<<<<<<<
 *                 order = 'F'
 *         else:
 */
    __pyx_t_5 = (__pyx_v_order == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":404
 *                 dtype = np.float64
 *             if order is None:
 *                 order = 'F'             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(copy,tensor) == False:
 */
      __Pyx_INCREF(__pyx_n_s_F);
      __Pyx_DECREF_SET(__pyx_v_order, __pyx_n_s_F);

      /* "ctf/tensor.pyx":403
 *             if dtype is None:
 *                 dtype = np.float64
 *             if order is None:             # <<<<<<<<<<<<<<
 *                 order = 'F'
 *         else:
 */
    }

    /* "ctf/tensor.pyx":396
 *         t_ti = ctf.profile.timer("pytensor_init")
 *         t_ti.start()
 *         if copy is None:             # <<<<<<<<<<<<<<
 *             if lens is None:
 *                 lens = []
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":406
 *                 order = 'F'
 *         else:
 *             if isinstance(copy,tensor) == False:             # <<<<<<<<<<<<<<
 *                 copy = ctf.tensor_aux.astensor(copy)
 *             if lens is None:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_TypeCheck(((PyObject *)__pyx_v_copy), __pyx_ptype_3ctf_6tensor_tensor); 
    __pyx_t_6 = (__pyx_t_5 == 0);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":407
 *         else:
 *             if isinstance(copy,tensor) == False:
 *                 copy = ctf.tensor_aux.astensor(copy)             # <<<<<<<<<<<<<<
 *             if lens is None:
 *                 lens = copy.shape
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_copy)};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3ctf_6tensor_tensor))))) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_copy, ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":406
 *                 order = 'F'
 *         else:
 *             if isinstance(copy,tensor) == False:             # <<<<<<<<<<<<<<
 *                 copy = ctf.tensor_aux.astensor(copy)
 *             if lens is None:
 */
    }

    /* "ctf/tensor.pyx":408
 *             if isinstance(copy,tensor) == False:
 *                 copy = ctf.tensor_aux.astensor(copy)
 *             if lens is None:             # <<<<<<<<<<<<<<
 *                 lens = copy.shape
 *             if sp is None:
 */
    __pyx_t_6 = (__pyx_v_lens == Py_None);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":409
 *                 copy = ctf.tensor_aux.astensor(copy)
 *             if lens is None:
 *                 lens = copy.shape             # <<<<<<<<<<<<<<
 *             if sp is None:
 *                 sp = copy.sp
 */
      __pyx_t_2 = __pyx_v_copy->shape;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_lens, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":408
 *             if isinstance(copy,tensor) == False:
 *                 copy = ctf.tensor_aux.astensor(copy)
 *             if lens is None:             # <<<<<<<<<<<<<<
 *                 lens = copy.shape
 *             if sp is None:
 */
    }

    /* "ctf/tensor.pyx":410
 *             if lens is None:
 *                 lens = copy.shape
 *             if sp is None:             # <<<<<<<<<<<<<<
 *                 sp = copy.sp
 *             if sym is None:
 */
    __pyx_t_6 = (__pyx_v_sp == Py_None);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":411
 *                 lens = copy.shape
 *             if sp is None:
 *                 sp = copy.sp             # <<<<<<<<<<<<<<
 *             if sym is None:
 *                 sym = copy.sym
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_copy->sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_sp, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":410
 *             if lens is None:
 *                 lens = copy.shape
 *             if sp is None:             # <<<<<<<<<<<<<<
 *                 sp = copy.sp
 *             if sym is None:
 */
    }

    /* "ctf/tensor.pyx":412
 *             if sp is None:
 *                 sp = copy.sp
 *             if sym is None:             # <<<<<<<<<<<<<<
 *                 sym = copy.sym
 *             if dtype is None:
 */
    __pyx_t_6 = (__pyx_v_sym == Py_None);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":413
 *                 sp = copy.sp
 *             if sym is None:
 *                 sym = copy.sym             # <<<<<<<<<<<<<<
 *             if dtype is None:
 *                 dtype = copy.dtype
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_copy->sym);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_sym, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":412
 *             if sp is None:
 *                 sp = copy.sp
 *             if sym is None:             # <<<<<<<<<<<<<<
 *                 sym = copy.sym
 *             if dtype is None:
 */
    }

    /* "ctf/tensor.pyx":414
 *             if sym is None:
 *                 sym = copy.sym
 *             if dtype is None:             # <<<<<<<<<<<<<<
 *                 dtype = copy.dtype
 *             if order is None:
 */
    __pyx_t_6 = (__pyx_v_dtype == Py_None);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":415
 *                 sym = copy.sym
 *             if dtype is None:
 *                 dtype = copy.dtype             # <<<<<<<<<<<<<<
 *             if order is None:
 *                 order = copy.order
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_copy->dtype);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":414
 *             if sym is None:
 *                 sym = copy.sym
 *             if dtype is None:             # <<<<<<<<<<<<<<
 *                 dtype = copy.dtype
 *             if order is None:
 */
    }

    /* "ctf/tensor.pyx":416
 *             if dtype is None:
 *                 dtype = copy.dtype
 *             if order is None:             # <<<<<<<<<<<<<<
 *                 order = copy.order
 *         if isinstance(dtype,np.dtype):
 */
    __pyx_t_6 = (__pyx_v_order == Py_None);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":417
 *                 dtype = copy.dtype
 *             if order is None:
 *                 order = copy.order             # <<<<<<<<<<<<<<
 *         if isinstance(dtype,np.dtype):
 *             dtype = dtype.type
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_copy->order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_order, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":416
 *             if dtype is None:
 *                 dtype = copy.dtype
 *             if order is None:             # <<<<<<<<<<<<<<
 *                 order = copy.order
 *         if isinstance(dtype,np.dtype):
 */
    }
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":418
 *             if order is None:
 *                 order = copy.order
 *         if isinstance(dtype,np.dtype):             # <<<<<<<<<<<<<<
 *             dtype = dtype.type
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_dtype, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":419
 *                 order = copy.order
 *         if isinstance(dtype,np.dtype):
 *             dtype = dtype.type             # <<<<<<<<<<<<<<
 * 
 *         if dtype is int:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":418
 *             if order is None:
 *                 order = copy.order
 *         if isinstance(dtype,np.dtype):             # <<<<<<<<<<<<<<
 *             dtype = dtype.type
 * 
 */
  }

  /* "ctf/tensor.pyx":421
 *             dtype = dtype.type
 * 
 *         if dtype is int:             # <<<<<<<<<<<<<<
 *             dtype = np.int64
 * 
 */
  __pyx_t_6 = (__pyx_v_dtype == ((PyObject *)(&PyInt_Type)));
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":422
 * 
 *         if dtype is int:
 *             dtype = np.int64             # <<<<<<<<<<<<<<
 * 
 *         if dtype is float:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":421
 *             dtype = dtype.type
 * 
 *         if dtype is int:             # <<<<<<<<<<<<<<
 *             dtype = np.int64
 * 
 */
  }

  /* "ctf/tensor.pyx":424
 *             dtype = np.int64
 * 
 *         if dtype is float:             # <<<<<<<<<<<<<<
 *             dtype = np.float64
 * 
 */
  __pyx_t_6 = (__pyx_v_dtype == ((PyObject *)(&PyFloat_Type)));
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":425
 * 
 *         if dtype is float:
 *             dtype = np.float64             # <<<<<<<<<<<<<<
 * 
 *         if dtype == complex:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":424
 *             dtype = np.int64
 * 
 *         if dtype is float:             # <<<<<<<<<<<<<<
 *             dtype = np.float64
 * 
 */
  }

  /* "ctf/tensor.pyx":427
 *             dtype = np.float64
 * 
 *         if dtype == complex:             # <<<<<<<<<<<<<<
 *             dtype = np.complex128
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyComplex_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":428
 * 
 *         if dtype == complex:
 *             dtype = np.complex128             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex128); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":427
 *             dtype = np.float64
 * 
 *         if dtype == complex:             # <<<<<<<<<<<<<<
 *             dtype = np.complex128
 * 
 */
  }

  /* "ctf/tensor.pyx":431
 * 
 * 
 *         if dtype == 'D':             # <<<<<<<<<<<<<<
 *             self.dtype = <cnp.dtype>np.complex128
 *         elif dtype == 'd':
 */
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_dtype, __pyx_n_s_D, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 431, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":432
 * 
 *         if dtype == 'D':
 *             self.dtype = <cnp.dtype>np.complex128             # <<<<<<<<<<<<<<
 *         elif dtype == 'd':
 *             self.dtype = <cnp.dtype>np.float64
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex128); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->dtype);
    __Pyx_DECREF((PyObject *)__pyx_v_self->dtype);
    __pyx_v_self->dtype = ((PyArray_Descr *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":431
 * 
 * 
 *         if dtype == 'D':             # <<<<<<<<<<<<<<
 *             self.dtype = <cnp.dtype>np.complex128
 *         elif dtype == 'd':
 */
    goto __pyx_L18;
  }

  /* "ctf/tensor.pyx":433
 *         if dtype == 'D':
 *             self.dtype = <cnp.dtype>np.complex128
 *         elif dtype == 'd':             # <<<<<<<<<<<<<<
 *             self.dtype = <cnp.dtype>np.float64
 *         else:
 */
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_dtype, __pyx_n_s_d, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 433, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":434
 *             self.dtype = <cnp.dtype>np.complex128
 *         elif dtype == 'd':
 *             self.dtype = <cnp.dtype>np.float64             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype = <cnp.dtype>dtype
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->dtype);
    __Pyx_DECREF((PyObject *)__pyx_v_self->dtype);
    __pyx_v_self->dtype = ((PyArray_Descr *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":433
 *         if dtype == 'D':
 *             self.dtype = <cnp.dtype>np.complex128
 *         elif dtype == 'd':             # <<<<<<<<<<<<<<
 *             self.dtype = <cnp.dtype>np.float64
 *         else:
 */
    goto __pyx_L18;
  }

  /* "ctf/tensor.pyx":436
 *             self.dtype = <cnp.dtype>np.float64
 *         else:
 *             self.dtype = <cnp.dtype>dtype             # <<<<<<<<<<<<<<
 *         if isinstance(lens,int):
 *             lens = (lens,)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_dtype;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->dtype);
    __Pyx_DECREF((PyObject *)__pyx_v_self->dtype);
    __pyx_v_self->dtype = ((PyArray_Descr *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L18:;

  /* "ctf/tensor.pyx":437
 *         else:
 *             self.dtype = <cnp.dtype>dtype
 *         if isinstance(lens,int):             # <<<<<<<<<<<<<<
 *             lens = (lens,)
 *         lens = [int(l) for l in lens]
 */
  __pyx_t_6 = PyInt_Check(__pyx_v_lens); 
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":438
 *             self.dtype = <cnp.dtype>dtype
 *         if isinstance(lens,int):
 *             lens = (lens,)             # <<<<<<<<<<<<<<
 *         lens = [int(l) for l in lens]
 *         self.shape = tuple(lens)
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_lens);
    __Pyx_GIVEREF(__pyx_v_lens);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_lens)) __PYX_ERR(0, 438, __pyx_L1_error);
    __Pyx_DECREF_SET(__pyx_v_lens, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":437
 *         else:
 *             self.dtype = <cnp.dtype>dtype
 *         if isinstance(lens,int):             # <<<<<<<<<<<<<<
 *             lens = (lens,)
 *         lens = [int(l) for l in lens]
 */
  }

  /* "ctf/tensor.pyx":439
 *         if isinstance(lens,int):
 *             lens = (lens,)
 *         lens = [int(l) for l in lens]             # <<<<<<<<<<<<<<
 *         self.shape = tuple(lens)
 *         self.ndim = len(self.shape)
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L22_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_lens)) || PyTuple_CheckExact(__pyx_v_lens)) {
      __pyx_t_1 = __pyx_v_lens; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_lens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 439, __pyx_L22_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 439, __pyx_L22_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 439, __pyx_L22_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 439, __pyx_L22_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 439, __pyx_L22_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 439, __pyx_L22_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_l, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_7genexpr__pyx_v_l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 439, __pyx_L22_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_l); __pyx_7genexpr__pyx_v_l = 0;
    goto __pyx_L26_exit_scope;
    __pyx_L22_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_l); __pyx_7genexpr__pyx_v_l = 0;
    goto __pyx_L1_error;
    __pyx_L26_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_lens, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":440
 *             lens = (lens,)
 *         lens = [int(l) for l in lens]
 *         self.shape = tuple(lens)             # <<<<<<<<<<<<<<
 *         self.ndim = len(self.shape)
 *         if isinstance(order,int):
 */
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_v_lens); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->shape);
  __Pyx_DECREF(__pyx_v_self->shape);
  __pyx_v_self->shape = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":441
 *         lens = [int(l) for l in lens]
 *         self.shape = tuple(lens)
 *         self.ndim = len(self.shape)             # <<<<<<<<<<<<<<
 *         if isinstance(order,int):
 *             self.order = order
 */
  __pyx_t_2 = __pyx_v_self->shape;
  __Pyx_INCREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 441, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->ndim = __pyx_t_7;

  /* "ctf/tensor.pyx":442
 *         self.shape = tuple(lens)
 *         self.ndim = len(self.shape)
 *         if isinstance(order,int):             # <<<<<<<<<<<<<<
 *             self.order = order
 *         else:
 */
  __pyx_t_6 = PyInt_Check(__pyx_v_order); 
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":443
 *         self.ndim = len(self.shape)
 *         if isinstance(order,int):
 *             self.order = order             # <<<<<<<<<<<<<<
 *         else:
 *             self.order = ord(order)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_order); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
    __pyx_v_self->order = __pyx_t_4;

    /* "ctf/tensor.pyx":442
 *         self.shape = tuple(lens)
 *         self.ndim = len(self.shape)
 *         if isinstance(order,int):             # <<<<<<<<<<<<<<
 *             self.order = order
 *         else:
 */
    goto __pyx_L27;
  }

  /* "ctf/tensor.pyx":445
 *             self.order = order
 *         else:
 *             self.order = ord(order)             # <<<<<<<<<<<<<<
 *         self.sp = sp
 *         if sym is None:
 */
  /*else*/ {
    __pyx_t_9 = __Pyx_PyObject_Ord(__pyx_v_order); if (unlikely(__pyx_t_9 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 445, __pyx_L1_error)
    __pyx_v_self->order = __pyx_t_9;
  }
  __pyx_L27:;

  /* "ctf/tensor.pyx":446
 *         else:
 *             self.order = ord(order)
 *         self.sp = sp             # <<<<<<<<<<<<<<
 *         if sym is None:
 *             self.sym = np.asarray([0]*self.ndim)
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_sp); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __pyx_v_self->sp = __pyx_t_4;

  /* "ctf/tensor.pyx":447
 *             self.order = ord(order)
 *         self.sp = sp
 *         if sym is None:             # <<<<<<<<<<<<<<
 *             self.sym = np.asarray([0]*self.ndim)
 *         else:
 */
  __pyx_t_6 = (__pyx_v_sym == Py_None);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":448
 *         self.sp = sp
 *         if sym is None:
 *             self.sym = np.asarray([0]*self.ndim)             # <<<<<<<<<<<<<<
 *         else:
 *             self.sym = np.asarray(sym)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(1 * ((__pyx_v_self->ndim<0) ? 0:__pyx_v_self->ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_self->ndim; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_int_0)) __PYX_ERR(0, 448, __pyx_L1_error);
      }
    }
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->sym);
    __Pyx_DECREF((PyObject *)__pyx_v_self->sym);
    __pyx_v_self->sym = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":447
 *             self.order = ord(order)
 *         self.sp = sp
 *         if sym is None:             # <<<<<<<<<<<<<<
 *             self.sym = np.asarray([0]*self.ndim)
 *         else:
 */
    goto __pyx_L28;
  }

  /* "ctf/tensor.pyx":450
 *             self.sym = np.asarray([0]*self.ndim)
 *         else:
 *             self.sym = np.asarray(sym)             # <<<<<<<<<<<<<<
 *         if self.dtype == np.bool_:
 *             self.itemsize = 1
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_sym};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->sym);
    __Pyx_DECREF((PyObject *)__pyx_v_self->sym);
    __pyx_v_self->sym = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L28:;

  /* "ctf/tensor.pyx":451
 *         else:
 *             self.sym = np.asarray(sym)
 *         if self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *             self.itemsize = 1
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":452
 *             self.sym = np.asarray(sym)
 *         if self.dtype == np.bool_:
 *             self.itemsize = 1             # <<<<<<<<<<<<<<
 *         else:
 *             self.itemsize = np.dtype(self.dtype).itemsize
 */
    __pyx_v_self->itemsize = 1;

    /* "ctf/tensor.pyx":451
 *         else:
 *             self.sym = np.asarray(sym)
 *         if self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *             self.itemsize = 1
 *         else:
 */
    goto __pyx_L29;
  }

  /* "ctf/tensor.pyx":454
 *             self.itemsize = 1
 *         else:
 *             self.itemsize = np.dtype(self.dtype).itemsize             # <<<<<<<<<<<<<<
 *         self.size = 1
 *         for i in range(len(self.shape)):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, ((PyObject *)__pyx_v_self->dtype)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->itemsize = __pyx_t_4;
  }
  __pyx_L29:;

  /* "ctf/tensor.pyx":455
 *         else:
 *             self.itemsize = np.dtype(self.dtype).itemsize
 *         self.size = 1             # <<<<<<<<<<<<<<
 *         for i in range(len(self.shape)):
 *             self.size *= self.shape[i]
 */
  __pyx_v_self->size = 1;

  /* "ctf/tensor.pyx":456
 *             self.itemsize = np.dtype(self.dtype).itemsize
 *         self.size = 1
 *         for i in range(len(self.shape)):             # <<<<<<<<<<<<<<
 *             self.size *= self.shape[i]
 *         self.nbytes = self.size * self.itemsize
 */
  __pyx_t_3 = __pyx_v_self->shape;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 456, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 456, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 456, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 456, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 456, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":457
 *         self.size = 1
 *         for i in range(len(self.shape)):
 *             self.size *= self.shape[i]             # <<<<<<<<<<<<<<
 *         self.nbytes = self.size * self.itemsize
 *         strides = [1] * len(self.shape)
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_self->shape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 457, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_10); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_self->size = __pyx_t_11;

    /* "ctf/tensor.pyx":456
 *             self.itemsize = np.dtype(self.dtype).itemsize
 *         self.size = 1
 *         for i in range(len(self.shape)):             # <<<<<<<<<<<<<<
 *             self.size *= self.shape[i]
 *         self.nbytes = self.size * self.itemsize
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":458
 *         for i in range(len(self.shape)):
 *             self.size *= self.shape[i]
 *         self.nbytes = self.size * self.itemsize             # <<<<<<<<<<<<<<
 *         strides = [1] * len(self.shape)
 *         for i in range(len(self.shape)-1, -1, -1):
 */
  __pyx_v_self->nbytes = (__pyx_v_self->size * __pyx_v_self->itemsize);

  /* "ctf/tensor.pyx":459
 *             self.size *= self.shape[i]
 *         self.nbytes = self.size * self.itemsize
 *         strides = [1] * len(self.shape)             # <<<<<<<<<<<<<<
 *         for i in range(len(self.shape)-1, -1, -1):
 *             if i == len(self.shape) -1:
 */
  __pyx_t_3 = __pyx_v_self->shape;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 459, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(1 * ((__pyx_t_7<0) ? 0:__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_7; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_int_1)) __PYX_ERR(0, 459, __pyx_L1_error);
    }
  }
  __pyx_v_strides = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":460
 *         self.nbytes = self.size * self.itemsize
 *         strides = [1] * len(self.shape)
 *         for i in range(len(self.shape)-1, -1, -1):             # <<<<<<<<<<<<<<
 *             if i == len(self.shape) -1:
 *                 strides[i] = self.itemsize
 */
  __pyx_t_3 = __pyx_v_self->shape;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 460, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_7 - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_int_neg_1)) __PYX_ERR(0, 460, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_int_neg_1)) __PYX_ERR(0, 460, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_10 = __pyx_t_3; __Pyx_INCREF(__pyx_t_10);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 460, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 460, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 460, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 460, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 460, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_10);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 460, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":461
 *         strides = [1] * len(self.shape)
 *         for i in range(len(self.shape)-1, -1, -1):
 *             if i == len(self.shape) -1:             # <<<<<<<<<<<<<<
 *                 strides[i] = self.itemsize
 *             else:
 */
    __pyx_t_3 = __pyx_v_self->shape;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 461, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_12 - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":462
 *         for i in range(len(self.shape)-1, -1, -1):
 *             if i == len(self.shape) -1:
 *                 strides[i] = self.itemsize             # <<<<<<<<<<<<<<
 *             else:
 *                 strides[i] = self.shape[i+1] * strides[i+1]
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyObject_SetItem(__pyx_v_strides, __pyx_v_i, __pyx_t_1) < 0))) __PYX_ERR(0, 462, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":461
 *         strides = [1] * len(self.shape)
 *         for i in range(len(self.shape)-1, -1, -1):
 *             if i == len(self.shape) -1:             # <<<<<<<<<<<<<<
 *                 strides[i] = self.itemsize
 *             else:
 */
      goto __pyx_L35;
    }

    /* "ctf/tensor.pyx":464
 *                 strides[i] = self.itemsize
 *             else:
 *                 strides[i] = self.shape[i+1] * strides[i+1]             # <<<<<<<<<<<<<<
 *         self.strides = tuple(strides)
 *         rlens = lens[:]
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 464, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_strides, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_strides, __pyx_v_i, __pyx_t_1) < 0))) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L35:;

    /* "ctf/tensor.pyx":460
 *         self.nbytes = self.size * self.itemsize
 *         strides = [1] * len(self.shape)
 *         for i in range(len(self.shape)-1, -1, -1):             # <<<<<<<<<<<<<<
 *             if i == len(self.shape) -1:
 *                 strides[i] = self.itemsize
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":465
 *             else:
 *                 strides[i] = self.shape[i+1] * strides[i+1]
 *         self.strides = tuple(strides)             # <<<<<<<<<<<<<<
 *         rlens = lens[:]
 *         rsym = self.sym.copy()
 */
  __pyx_t_10 = PyList_AsTuple(__pyx_v_strides); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->strides);
  __Pyx_DECREF(__pyx_v_self->strides);
  __pyx_v_self->strides = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":466
 *                 strides[i] = self.shape[i+1] * strides[i+1]
 *         self.strides = tuple(strides)
 *         rlens = lens[:]             # <<<<<<<<<<<<<<
 *         rsym = self.sym.copy()
 *         if ctf.helper._ord_comp(self.order, 'F'):
 */
  __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_lens, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_rlens = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":467
 *         self.strides = tuple(strides)
 *         rlens = lens[:]
 *         rsym = self.sym.copy()             # <<<<<<<<<<<<<<
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             rlens = ctf.helper._rev_array(lens)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->sym), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_v_rsym = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":468
 *         rlens = lens[:]
 *         rsym = self.sym.copy()
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             rlens = ctf.helper._rev_array(lens)
 *             if self.ndim > 1:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ord_comp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_2, __pyx_n_s_F};
    __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":469
 *         rsym = self.sym.copy()
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             rlens = ctf.helper._rev_array(lens)             # <<<<<<<<<<<<<<
 *             if self.ndim > 1:
 *                 rsym = ctf.helper._rev_array(rsym)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_lens};
      __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_rlens, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "ctf/tensor.pyx":470
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             rlens = ctf.helper._rev_array(lens)
 *             if self.ndim > 1:             # <<<<<<<<<<<<<<
 *                 rsym = ctf.helper._rev_array(rsym)
 *                 rsym[0:-1] = rsym[1:]
 */
    __pyx_t_6 = (__pyx_v_self->ndim > 1);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":471
 *             rlens = ctf.helper._rev_array(lens)
 *             if self.ndim > 1:
 *                 rsym = ctf.helper._rev_array(rsym)             # <<<<<<<<<<<<<<
 *                 rsym[0:-1] = rsym[1:]
 *                 rsym[-1] = SYM.NS
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_rsym};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_rsym, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "ctf/tensor.pyx":472
 *             if self.ndim > 1:
 *                 rsym = ctf.helper._rev_array(rsym)
 *                 rsym[0:-1] = rsym[1:]             # <<<<<<<<<<<<<<
 *                 rsym[-1] = SYM.NS
 *         cdef int64_t * clens
 */
      __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_rsym, 1, 0, NULL, NULL, &__pyx_slice__5, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_PyObject_SetSlice(__pyx_v_rsym, __pyx_t_10, 0, -1L, NULL, NULL, &__pyx_slice__6, 1, 1, 1) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "ctf/tensor.pyx":473
 *                 rsym = ctf.helper._rev_array(rsym)
 *                 rsym[0:-1] = rsym[1:]
 *                 rsym[-1] = SYM.NS             # <<<<<<<<<<<<<<
 *         cdef int64_t * clens
 *         clens = int64_t_arr_py_to_c(rlens)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_SYM); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_NS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely((__Pyx_SetItemInt(__pyx_v_rsym, -1L, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0))) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":470
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             rlens = ctf.helper._rev_array(lens)
 *             if self.ndim > 1:             # <<<<<<<<<<<<<<
 *                 rsym = ctf.helper._rev_array(rsym)
 *                 rsym[0:-1] = rsym[1:]
 */
    }

    /* "ctf/tensor.pyx":468
 *         rlens = lens[:]
 *         rsym = self.sym.copy()
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             rlens = ctf.helper._rev_array(lens)
 *             if self.ndim > 1:
 */
  }

  /* "ctf/tensor.pyx":475
 *                 rsym[-1] = SYM.NS
 *         cdef int64_t * clens
 *         clens = int64_t_arr_py_to_c(rlens)             # <<<<<<<<<<<<<<
 *         cdef int * csym
 *         csym = int_arr_py_to_c(rsym)
 */
  __pyx_t_13 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_rlens); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_v_clens = __pyx_t_13;

  /* "ctf/tensor.pyx":477
 *         clens = int64_t_arr_py_to_c(rlens)
 *         cdef int * csym
 *         csym = int_arr_py_to_c(rsym)             # <<<<<<<<<<<<<<
 *         cdef World * wrld
 *         if copy is None and idx is not None:
 */
  __pyx_t_14 = __pyx_f_3ctf_7chelper_int_arr_py_to_c(__pyx_v_rsym); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 477, __pyx_L1_error)
  __pyx_v_csym = __pyx_t_14;

  /* "ctf/tensor.pyx":479
 *         csym = int_arr_py_to_c(rsym)
 *         cdef World * wrld
 *         if copy is None and idx is not None:             # <<<<<<<<<<<<<<
 *             idx = ctf.helper._rev_array(idx)
 *             if prl is None:
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_copy) == Py_None);
  if (__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L40_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_idx != Py_None);
  __pyx_t_6 = __pyx_t_5;
  __pyx_L40_bool_binop_done:;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":480
 *         cdef World * wrld
 *         if copy is None and idx is not None:
 *             idx = ctf.helper._rev_array(idx)             # <<<<<<<<<<<<<<
 *             if prl is None:
 *                 raise ValueError("Specify mesh processor toplogy with character labels")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ctf); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_idx, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":481
 *         if copy is None and idx is not None:
 *             idx = ctf.helper._rev_array(idx)
 *             if prl is None:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Specify mesh processor toplogy with character labels")
 *             if blk is None:
 */
    __pyx_t_6 = (((PyObject *)__pyx_v_prl) == Py_None);
    if (unlikely(__pyx_t_6)) {

      /* "ctf/tensor.pyx":482
 *             idx = ctf.helper._rev_array(idx)
 *             if prl is None:
 *                 raise ValueError("Specify mesh processor toplogy with character labels")             # <<<<<<<<<<<<<<
 *             if blk is None:
 *                 blk=idx_partition()
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 482, __pyx_L1_error)

      /* "ctf/tensor.pyx":481
 *         if copy is None and idx is not None:
 *             idx = ctf.helper._rev_array(idx)
 *             if prl is None:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Specify mesh processor toplogy with character labels")
 *             if blk is None:
 */
    }

    /* "ctf/tensor.pyx":483
 *             if prl is None:
 *                 raise ValueError("Specify mesh processor toplogy with character labels")
 *             if blk is None:             # <<<<<<<<<<<<<<
 *                 blk=idx_partition()
 *             wrld = new World()
 */
    __pyx_t_6 = (((PyObject *)__pyx_v_blk) == Py_None);
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":484
 *                 raise ValueError("Specify mesh processor toplogy with character labels")
 *             if blk is None:
 *                 blk=idx_partition()             # <<<<<<<<<<<<<<
 *             wrld = new World()
 *             if self.dtype == np.float64:
 */
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3ctf_9partition_idx_partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_blk, ((struct __pyx_obj_3ctf_9partition_idx_partition *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":483
 *             if prl is None:
 *                 raise ValueError("Specify mesh processor toplogy with character labels")
 *             if blk is None:             # <<<<<<<<<<<<<<
 *                 blk=idx_partition()
 *             wrld = new World()
 */
    }

    /* "ctf/tensor.pyx":485
 *             if blk is None:
 *                 blk=idx_partition()
 *             wrld = new World()             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
    __pyx_v_wrld = new CTF::World();

    /* "ctf/tensor.pyx":486
 *                 blk=idx_partition()
 *             wrld = new World()
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":487
 *             wrld = new World()
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<double> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":486
 *                 blk=idx_partition()
 *             wrld = new World()
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex64:
 */
    }

    /* "ctf/tensor.pyx":488
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex128:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":489
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<__pyx_t_float_complex> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":488
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex128:
 */
    }

    /* "ctf/tensor.pyx":490
 *             if self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.bool_:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex128); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":491
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<__pyx_t_double_complex> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":490
 *             if self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.bool_:
 */
    }

    /* "ctf/tensor.pyx":492
 *             if self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_bool); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":493
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 493, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<bool> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":492
 *             if self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int64:
 */
    }

    /* "ctf/tensor.pyx":494
 *             if self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":495
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int64_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":494
 *             if self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int32:
 */
    }

    /* "ctf/tensor.pyx":496
 *             if self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int16:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":497
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int32_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":496
 *             if self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int16:
 */
    }

    /* "ctf/tensor.pyx":498
 *             if self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int8:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int16); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":499
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int16_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":498
 *             if self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int8:
 */
    }

    /* "ctf/tensor.pyx":500
 *             if self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.float32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":501
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float32:
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int8_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":500
 *             if self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.float32:
 */
    }

    /* "ctf/tensor.pyx":502
 *             if self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *         elif copy is None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":503
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.float32:
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])             # <<<<<<<<<<<<<<
 *         elif copy is None:
 *             if self.dtype == np.float64:
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_idx, __pyx_n_s_encode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<float> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym, (__pyx_v_wrld[0]), __pyx_t_15, (__pyx_v_prl->ip[0]), (__pyx_v_blk->ip[0]));
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":502
 *             if self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *             if self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *         elif copy is None:
 */
    }

    /* "ctf/tensor.pyx":479
 *         csym = int_arr_py_to_c(rsym)
 *         cdef World * wrld
 *         if copy is None and idx is not None:             # <<<<<<<<<<<<<<
 *             idx = ctf.helper._rev_array(idx)
 *             if prl is None:
 */
    goto __pyx_L39;
  }

  /* "ctf/tensor.pyx":504
 *             if self.dtype == np.float32:
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *         elif copy is None:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 */
  __pyx_t_6 = (((PyObject *)__pyx_v_copy) == Py_None);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":505
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *         elif copy is None:
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":506
 *         elif copy is None:
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<double> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":505
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *         elif copy is None:
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex64:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":507
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex128:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":508
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<__pyx_t_float_complex> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":507
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex128:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":509
 *             elif self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.bool_:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex128); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":510
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<__pyx_t_double_complex> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":509
 *             elif self.dtype == np.complex64:
 *                 self.dt = new Tensor[complex64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.bool_:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":511
 *             elif self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_bool); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":512
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<bool> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":511
 *             elif self.dtype == np.complex128:
 *                 self.dt = new Tensor[complex128_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int64:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":513
 *             elif self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":514
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int64_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":513
 *             elif self.dtype == np.bool_:
 *                 self.dt = new Tensor[bool](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int32:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":515
 *             elif self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int16:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":516
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int32_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":515
 *             elif self.dtype == np.int64:
 *                 self.dt = new Tensor[int64_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int16:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":517
 *             elif self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int8:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int16); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":518
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int16_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":517
 *             elif self.dtype == np.int32:
 *                 self.dt = new Tensor[int32_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int8:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":519
 *             elif self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.float32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":520
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float32:
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym)
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<int8_t> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":519
 *             elif self.dtype == np.int16:
 *                 self.dt = new Tensor[int16_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.float32:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":521
 *             elif self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(__pyx_t_6)) {

      /* "ctf/tensor.pyx":522
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.float32:
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_sp); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
      __pyx_v_self->dt = new CTF::Tensor<float> (__pyx_v_self->ndim, __pyx_t_6, __pyx_v_clens, __pyx_v_csym);

      /* "ctf/tensor.pyx":521
 *             elif self.dtype == np.int8:
 *                 self.dt = new Tensor[int8_t](self.ndim, sp, clens, csym)
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym)
 *             else:
 */
      goto __pyx_L53;
    }

    /* "ctf/tensor.pyx":524
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym)
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(copy, tensor):
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 524, __pyx_L1_error)
    }
    __pyx_L53:;

    /* "ctf/tensor.pyx":504
 *             if self.dtype == np.float32:
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym, wrld[0], idx.encode(), prl.ip[0], blk.ip[0])
 *         elif copy is None:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float64:
 *                 self.dt = new Tensor[double](self.ndim, sp, clens, csym)
 */
    goto __pyx_L39;
  }

  /* "ctf/tensor.pyx":526
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         else:
 *             if isinstance(copy, tensor):             # <<<<<<<<<<<<<<
 *                 if dtype is None or dtype == copy.dtype:
 *                     if np.all(sym == copy.sym):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_TypeCheck(((PyObject *)__pyx_v_copy), __pyx_ptype_3ctf_6tensor_tensor); 
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":527
 *         else:
 *             if isinstance(copy, tensor):
 *                 if dtype is None or dtype == copy.dtype:             # <<<<<<<<<<<<<<
 *                     if np.all(sym == copy.sym):
 *                         self.dt = new ctensor(<ctensor*>copy.dt, True, True)
 */
      __pyx_t_5 = (__pyx_v_dtype == Py_None);
      if (!__pyx_t_5) {
      } else {
        __pyx_t_6 = __pyx_t_5;
        goto __pyx_L56_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)__pyx_v_copy->dtype), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __pyx_t_5;
      __pyx_L56_bool_binop_done:;
      if (__pyx_t_6) {

        /* "ctf/tensor.pyx":528
 *             if isinstance(copy, tensor):
 *                 if dtype is None or dtype == copy.dtype:
 *                     if np.all(sym == copy.sym):             # <<<<<<<<<<<<<<
 *                         self.dt = new ctensor(<ctensor*>copy.dt, True, True)
 *                     else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_sym, ((PyObject *)__pyx_v_copy->sym), Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L1_error)
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_10};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 528, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_6) {

          /* "ctf/tensor.pyx":529
 *                 if dtype is None or dtype == copy.dtype:
 *                     if np.all(sym == copy.sym):
 *                         self.dt = new ctensor(<ctensor*>copy.dt, True, True)             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.dt = new ctensor(<ctensor*>copy.dt, csym)
 */
          __pyx_v_self->dt = new CTF_int::tensor(((CTF_int::tensor *)__pyx_v_copy->dt), 1, 1);

          /* "ctf/tensor.pyx":528
 *             if isinstance(copy, tensor):
 *                 if dtype is None or dtype == copy.dtype:
 *                     if np.all(sym == copy.sym):             # <<<<<<<<<<<<<<
 *                         self.dt = new ctensor(<ctensor*>copy.dt, True, True)
 *                     else:
 */
          goto __pyx_L58;
        }

        /* "ctf/tensor.pyx":531
 *                         self.dt = new ctensor(<ctensor*>copy.dt, True, True)
 *                     else:
 *                         self.dt = new ctensor(<ctensor*>copy.dt, csym)             # <<<<<<<<<<<<<<
 *                 else:
 *                     ccopy = tensor(self.shape, sp=self.sp, sym=self.sym, dtype=self.dtype, order=self.order)
 */
        /*else*/ {
          __pyx_v_self->dt = new CTF_int::tensor(((CTF_int::tensor *)__pyx_v_copy->dt), __pyx_v_csym);
        }
        __pyx_L58:;

        /* "ctf/tensor.pyx":527
 *         else:
 *             if isinstance(copy, tensor):
 *                 if dtype is None or dtype == copy.dtype:             # <<<<<<<<<<<<<<
 *                     if np.all(sym == copy.sym):
 *                         self.dt = new ctensor(<ctensor*>copy.dt, True, True)
 */
        goto __pyx_L55;
      }

      /* "ctf/tensor.pyx":533
 *                         self.dt = new ctensor(<ctensor*>copy.dt, csym)
 *                 else:
 *                     ccopy = tensor(self.shape, sp=self.sp, sym=self.sym, dtype=self.dtype, order=self.order)             # <<<<<<<<<<<<<<
 *                     copy._convert_type(ccopy)
 *                     self.dt = new ctensor(<ctensor*>ccopy.dt, True, True)
 */
      /*else*/ {
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_self->shape);
        __Pyx_GIVEREF(__pyx_v_self->shape);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->shape)) __PYX_ERR(0, 533, __pyx_L1_error);
        __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sp, __pyx_t_10) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sym, ((PyObject *)__pyx_v_self->sym)) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_t_10) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_ccopy = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_10);
        __pyx_t_10 = 0;

        /* "ctf/tensor.pyx":534
 *                 else:
 *                     ccopy = tensor(self.shape, sp=self.sp, sym=self.sym, dtype=self.dtype, order=self.order)
 *                     copy._convert_type(ccopy)             # <<<<<<<<<<<<<<
 *                     self.dt = new ctensor(<ctensor*>ccopy.dt, True, True)
 *         free(clens)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_copy), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, ((PyObject *)__pyx_v_ccopy)};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "ctf/tensor.pyx":535
 *                     ccopy = tensor(self.shape, sp=self.sp, sym=self.sym, dtype=self.dtype, order=self.order)
 *                     copy._convert_type(ccopy)
 *                     self.dt = new ctensor(<ctensor*>ccopy.dt, True, True)             # <<<<<<<<<<<<<<
 *         free(clens)
 *         free(csym)
 */
        __pyx_v_self->dt = new CTF_int::tensor(((CTF_int::tensor *)__pyx_v_ccopy->dt), 1, 1);
      }
      __pyx_L55:;

      /* "ctf/tensor.pyx":526
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         else:
 *             if isinstance(copy, tensor):             # <<<<<<<<<<<<<<
 *                 if dtype is None or dtype == copy.dtype:
 *                     if np.all(sym == copy.sym):
 */
    }
  }
  __pyx_L39:;

  /* "ctf/tensor.pyx":536
 *                     copy._convert_type(ccopy)
 *                     self.dt = new ctensor(<ctensor*>ccopy.dt, True, True)
 *         free(clens)             # <<<<<<<<<<<<<<
 *         free(csym)
 *         t_ti.stop()
 */
  free(__pyx_v_clens);

  /* "ctf/tensor.pyx":537
 *                     self.dt = new ctensor(<ctensor*>ccopy.dt, True, True)
 *         free(clens)
 *         free(csym)             # <<<<<<<<<<<<<<
 *         t_ti.stop()
 * 
 */
  free(__pyx_v_csym);

  /* "ctf/tensor.pyx":538
 *         free(clens)
 *         free(csym)
 *         t_ti.stop()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_ti, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":361
 *         return idx, prl, blk
 * 
 *     def __cinit__(self, lens=None, sp=None, sym=None, dtype=None, order=None, tensor copy=None, idx=None, idx_partition prl=None, idx_partition blk=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor object constructor
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ctf.tensor.tensor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t_ti);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_strides);
  __Pyx_XDECREF(__pyx_v_rlens);
  __Pyx_XDECREF(__pyx_v_rsym);
  __Pyx_XDECREF((PyObject *)__pyx_v_ccopy);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_lens);
  __Pyx_XDECREF(__pyx_v_sp);
  __Pyx_XDECREF(__pyx_v_sym);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF((PyObject *)__pyx_v_copy);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF((PyObject *)__pyx_v_blk);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":540
 *         t_ti.stop()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.dt
 * 
 */

/* Python wrapper */
static void __pyx_pw_3ctf_6tensor_6tensor_13__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ctf_6tensor_6tensor_13__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_3ctf_6tensor_6tensor_12__dealloc__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ctf_6tensor_6tensor_12__dealloc__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {

  /* "ctf/tensor.pyx":541
 * 
 *     def __dealloc__(self):
 *         del self.dt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->dt;

  /* "ctf/tensor.pyx":540
 *         t_ti.stop()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.dt
 * 
 */

  /* function exit code */
}

/* "ctf/tensor.pyx":544
 * 
 * 
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.T(axes=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_15T(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_14T, "\n        tensor.T(axes=None)\n        Permute the dimensions of the input tensor.\n\n        Returns\n        -------\n        output: tensor\n            Tensor with permuted axes.\n\n        See Also\n        --------\n        ctf: transpose\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = zeros([3,4,5])\n        >>> a.shape\n        (3, 4, 5)\n        >>> a.T().shape\n        (5, 4, 3)\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_15T = {"T", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_15T, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_14T};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_15T(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("T (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("T", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "T", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_14T(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_14T(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("T", 1);

  /* "ctf/tensor.pyx":567
 *         (5, 4, 3)
 *         """
 *         return ctf.tensor_aux.transpose(self)             # <<<<<<<<<<<<<<
 * 
 *     def transpose(self, *axes):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_transpose); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":544
 * 
 * 
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.T(axes=None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":569
 *         return ctf.tensor_aux.transpose(self)
 * 
 *     def transpose(self, *axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.transpose(*axes)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_17transpose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_16transpose, "\n        tensor.transpose(*axes)\n        Return the transposed tensor with specified order of axes.\n\n        Returns\n        -------\n        output: tensor\n            Tensor with permuted axes.\n\n        See Also\n        --------\n        ctf: transpose\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = zeros([3,4,5])\n        >>> a.shape\n        (3, 4, 5)\n        >>> a.transpose([2,1,0]).shape\n        (5, 4, 3)\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_17transpose = {"transpose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_17transpose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_16transpose};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_17transpose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axes = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transpose", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_axes = __pyx_args;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_16transpose(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_axes);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_axes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_16transpose(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_axes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 1);

  /* "ctf/tensor.pyx":592
 *         (5, 4, 3)
 *         """
 *         if axes:             # <<<<<<<<<<<<<<
 *             if isinstance(axes[0], (tuple, list, np.ndarray)):
 *                 return ctf.tensor_aux.transpose(self, axes[0])
 */
  __pyx_t_1 = (PyTuple_GET_SIZE(__pyx_v_axes) != 0);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":593
 *         """
 *         if axes:
 *             if isinstance(axes[0], (tuple, list, np.ndarray)):             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.transpose(self, axes[0])
 *             else:
 */
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_axes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = PyTuple_Check(__pyx_t_2); 
    if (!__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = PyList_Check(__pyx_t_2); 
    if (!__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = PyObject_IsInstance(__pyx_t_2, __pyx_t_4); 
    __pyx_t_1 = __pyx_t_5;
    __pyx_L5_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":594
 *         if axes:
 *             if isinstance(axes[0], (tuple, list, np.ndarray)):
 *                 return ctf.tensor_aux.transpose(self, axes[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 return ctf.tensor_aux.transpose(self, axes)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_transpose); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_axes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self), __pyx_t_3};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":593
 *         """
 *         if axes:
 *             if isinstance(axes[0], (tuple, list, np.ndarray)):             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.transpose(self, axes[0])
 *             else:
 */
    }

    /* "ctf/tensor.pyx":596
 *                 return ctf.tensor_aux.transpose(self, axes[0])
 *             else:
 *                 return ctf.tensor_aux.transpose(self, axes)             # <<<<<<<<<<<<<<
 *         else:
 *             return ctf.tensor_aux.transpose(self)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_transpose); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_axes};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }

    /* "ctf/tensor.pyx":592
 *         (5, 4, 3)
 *         """
 *         if axes:             # <<<<<<<<<<<<<<
 *             if isinstance(axes[0], (tuple, list, np.ndarray)):
 *                 return ctf.tensor_aux.transpose(self, axes[0])
 */
  }

  /* "ctf/tensor.pyx":598
 *                 return ctf.tensor_aux.transpose(self, axes)
 *         else:
 *             return ctf.tensor_aux.transpose(self)             # <<<<<<<<<<<<<<
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_transpose); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "ctf/tensor.pyx":569
 *         return ctf.tensor_aux.transpose(self)
 * 
 *     def transpose(self, *axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.transpose(*axes)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ctf.tensor.tensor.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":600
 *             return ctf.tensor_aux.transpose(self)
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):             # <<<<<<<<<<<<<<
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_19_ufunc_interpret(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_19_ufunc_interpret = {"_ufunc_interpret", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_19_ufunc_interpret, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_19_ufunc_interpret(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_other = 0;
  PyObject *__pyx_v_gen_tsr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ufunc_interpret (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_gen_tsr,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_gen_tsr);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_ufunc_interpret") < 0)) __PYX_ERR(0, 600, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
    __pyx_v_gen_tsr = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_ufunc_interpret", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 600, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._ufunc_interpret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3ctf_6tensor_tensor, 1, "other", 0))) __PYX_ERR(0, 600, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_18_ufunc_interpret(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_other, __pyx_v_gen_tsr);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_18_ufunc_interpret(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_other, PyObject *__pyx_v_gen_tsr) {
  int __pyx_v_out_order;
  PyObject *__pyx_v_out_dtype = NULL;
  PyObject *__pyx_v_out_dims = NULL;
  int __pyx_v_out_sp;
  PyObject *__pyx_v_out_sym = NULL;
  PyObject *__pyx_v_ind_coll = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_red_idx_num = NULL;
  PyObject *__pyx_v_i = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ufunc_interpret", 1);

  /* "ctf/tensor.pyx":601
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):
 *         if self.order != other.order:             # <<<<<<<<<<<<<<
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 *         out_order = self.order
 */
  __pyx_t_1 = (__pyx_v_self->order != __pyx_v_other->order);
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":602
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")             # <<<<<<<<<<<<<<
 *         out_order = self.order
 *         out_dtype = ctf.helper._get_np_dtype([self.dtype, other.dtype])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 602, __pyx_L1_error)

    /* "ctf/tensor.pyx":601
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):
 *         if self.order != other.order:             # <<<<<<<<<<<<<<
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 *         out_order = self.order
 */
  }

  /* "ctf/tensor.pyx":603
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 *         out_order = self.order             # <<<<<<<<<<<<<<
 *         out_dtype = ctf.helper._get_np_dtype([self.dtype, other.dtype])
 *         out_dims = np.zeros(np.maximum(self.ndim, other.ndim), dtype=int)
 */
  __pyx_t_3 = __pyx_v_self->order;
  __pyx_v_out_order = __pyx_t_3;

  /* "ctf/tensor.pyx":604
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 *         out_order = self.order
 *         out_dtype = ctf.helper._get_np_dtype([self.dtype, other.dtype])             # <<<<<<<<<<<<<<
 *         out_dims = np.zeros(np.maximum(self.ndim, other.ndim), dtype=int)
 *         out_sp = min(self.sp,other.sp)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_helper); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_np_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF((PyObject *)__pyx_v_self->dtype);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->dtype);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self->dtype))) __PYX_ERR(0, 604, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_other->dtype);
  __Pyx_GIVEREF((PyObject *)__pyx_v_other->dtype);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_other->dtype))) __PYX_ERR(0, 604, __pyx_L1_error);
  __pyx_t_6 = NULL;
  __pyx_t_3 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_3 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_out_dtype = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":605
 *         out_order = self.order
 *         out_dtype = ctf.helper._get_np_dtype([self.dtype, other.dtype])
 *         out_dims = np.zeros(np.maximum(self.ndim, other.ndim), dtype=int)             # <<<<<<<<<<<<<<
 *         out_sp = min(self.sp,other.sp)
 *         out_sym = [SYM.NS]*len(out_dims)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_maximum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_other->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_3 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_3 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_5, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_3, 2+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out_dims = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":606
 *         out_dtype = ctf.helper._get_np_dtype([self.dtype, other.dtype])
 *         out_dims = np.zeros(np.maximum(self.ndim, other.ndim), dtype=int)
 *         out_sp = min(self.sp,other.sp)             # <<<<<<<<<<<<<<
 *         out_sym = [SYM.NS]*len(out_dims)
 *         ind_coll = ctf.helper._get_num_str(3*out_dims.size)
 */
  __pyx_t_3 = __pyx_v_other->sp;
  __pyx_t_9 = __pyx_v_self->sp;
  __pyx_t_1 = (__pyx_t_3 < __pyx_t_9);
  if (__pyx_t_1) {
    __pyx_t_10 = __pyx_t_3;
  } else {
    __pyx_t_10 = __pyx_t_9;
  }
  __pyx_v_out_sp = __pyx_t_10;

  /* "ctf/tensor.pyx":607
 *         out_dims = np.zeros(np.maximum(self.ndim, other.ndim), dtype=int)
 *         out_sp = min(self.sp,other.sp)
 *         out_sym = [SYM.NS]*len(out_dims)             # <<<<<<<<<<<<<<
 *         ind_coll = ctf.helper._get_num_str(3*out_dims.size)
 *         idx_C = ind_coll[0:out_dims.size]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_SYM); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_NS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = PyObject_Length(__pyx_v_out_dims); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_t_7 = PyList_New(1 * ((__pyx_t_11<0) ? 0:__pyx_t_11)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_11; __pyx_temp++) {
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error);
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out_sym = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":608
 *         out_sp = min(self.sp,other.sp)
 *         out_sym = [SYM.NS]*len(out_dims)
 *         ind_coll = ctf.helper._get_num_str(3*out_dims.size)             # <<<<<<<<<<<<<<
 *         idx_C = ind_coll[0:out_dims.size]
 *         idx_A = ""
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_num_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dims, __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_MultiplyCObj(__pyx_int_3, __pyx_t_6, 3, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_ind_coll = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":609
 *         out_sym = [SYM.NS]*len(out_dims)
 *         ind_coll = ctf.helper._get_num_str(3*out_dims.size)
 *         idx_C = ind_coll[0:out_dims.size]             # <<<<<<<<<<<<<<
 *         idx_A = ""
 *         idx_B = ""
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dims, __pyx_n_s_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_ind_coll, 0, 0, NULL, &__pyx_t_7, NULL, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_idx_C = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":610
 *         ind_coll = ctf.helper._get_num_str(3*out_dims.size)
 *         idx_C = ind_coll[0:out_dims.size]
 *         idx_A = ""             # <<<<<<<<<<<<<<
 *         idx_B = ""
 *         red_idx_num = out_dims.size
 */
  __Pyx_INCREF(__pyx_kp_s__3);
  __pyx_v_idx_A = __pyx_kp_s__3;

  /* "ctf/tensor.pyx":611
 *         idx_C = ind_coll[0:out_dims.size]
 *         idx_A = ""
 *         idx_B = ""             # <<<<<<<<<<<<<<
 *         red_idx_num = out_dims.size
 *         for i in range(out_dims.size):
 */
  __Pyx_INCREF(__pyx_kp_s__3);
  __pyx_v_idx_B = __pyx_kp_s__3;

  /* "ctf/tensor.pyx":612
 *         idx_A = ""
 *         idx_B = ""
 *         red_idx_num = out_dims.size             # <<<<<<<<<<<<<<
 *         for i in range(out_dims.size):
 *             if i<self.ndim and i<other.ndim:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dims, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_red_idx_num = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":613
 *         idx_B = ""
 *         red_idx_num = out_dims.size
 *         for i in range(out_dims.size):             # <<<<<<<<<<<<<<
 *             if i<self.ndim and i<other.ndim:
 *                 if self.shape[-i-1] == other.shape[-i-1]:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dims, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
    __pyx_t_2 = __pyx_t_7; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_11 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 613, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 613, __pyx_L1_error)
          #endif
          if (__pyx_t_11 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 613, __pyx_L1_error)
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 613, __pyx_L1_error)
          #endif
          if (__pyx_t_11 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely((0 < 0))) __PYX_ERR(0, 613, __pyx_L1_error)
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_12(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 613, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":614
 *         red_idx_num = out_dims.size
 *         for i in range(out_dims.size):
 *             if i<self.ndim and i<other.ndim:             # <<<<<<<<<<<<<<
 *                 if self.shape[-i-1] == other.shape[-i-1]:
 *                     idx_A = idx_C[-i-1] + idx_A
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_i, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_13) {
    } else {
      __pyx_t_1 = __pyx_t_13;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_other->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_i, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __pyx_t_13;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":615
 *         for i in range(out_dims.size):
 *             if i<self.ndim and i<other.ndim:
 *                 if self.shape[-i-1] == other.shape[-i-1]:             # <<<<<<<<<<<<<<
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = idx_C[-i-1] + idx_B
 */
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 615, __pyx_L1_error)
      }
      __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__pyx_v_other->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 615, __pyx_L1_error)
      }
      __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_other->shape, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":616
 *             if i<self.ndim and i<other.ndim:
 *                 if self.shape[-i-1] == other.shape[-i-1]:
 *                     idx_A = idx_C[-i-1] + idx_A             # <<<<<<<<<<<<<<
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<self.ndim and i+1<other.ndim:
 */
        __pyx_t_6 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_idx_C, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_idx_A); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_idx_A, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "ctf/tensor.pyx":617
 *                 if self.shape[-i-1] == other.shape[-i-1]:
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = idx_C[-i-1] + idx_B             # <<<<<<<<<<<<<<
 *                     if i+1<self.ndim and i+1<other.ndim:
 *                         if self.sym[-i-2] == other.sym[-i-2]:
 */
        __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_idx_C, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_idx_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_idx_B, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "ctf/tensor.pyx":618
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<self.ndim and i+1<other.ndim:             # <<<<<<<<<<<<<<
 *                         if self.sym[-i-2] == other.sym[-i-2]:
 *                             out_sym[-i-2] = self.sym[-i-2]
 */
        __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (__pyx_t_13) {
        } else {
          __pyx_t_1 = __pyx_t_13;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_other->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 618, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_1 = __pyx_t_13;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_1) {

          /* "ctf/tensor.pyx":619
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<self.ndim and i+1<other.ndim:
 *                         if self.sym[-i-2] == other.sym[-i-2]:             # <<<<<<<<<<<<<<
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 elif self.shape[-i-1] == 1:
 */
          __pyx_t_6 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->sym), __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_other->sym), __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 619, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (__pyx_t_1) {

            /* "ctf/tensor.pyx":620
 *                     if i+1<self.ndim and i+1<other.ndim:
 *                         if self.sym[-i-2] == other.sym[-i-2]:
 *                             out_sym[-i-2] = self.sym[-i-2]             # <<<<<<<<<<<<<<
 *                 elif self.shape[-i-1] == 1:
 *                     idx_A = ind_coll[red_idx_num] + idx_A
 */
            __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 620, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->sym), __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 620, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 620, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely((PyObject_SetItem(__pyx_v_out_sym, __pyx_t_6, __pyx_t_7) < 0))) __PYX_ERR(0, 620, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "ctf/tensor.pyx":619
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<self.ndim and i+1<other.ndim:
 *                         if self.sym[-i-2] == other.sym[-i-2]:             # <<<<<<<<<<<<<<
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 elif self.shape[-i-1] == 1:
 */
          }

          /* "ctf/tensor.pyx":618
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<self.ndim and i+1<other.ndim:             # <<<<<<<<<<<<<<
 *                         if self.sym[-i-2] == other.sym[-i-2]:
 *                             out_sym[-i-2] = self.sym[-i-2]
 */
        }

        /* "ctf/tensor.pyx":615
 *         for i in range(out_dims.size):
 *             if i<self.ndim and i<other.ndim:
 *                 if self.shape[-i-1] == other.shape[-i-1]:             # <<<<<<<<<<<<<<
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = idx_C[-i-1] + idx_B
 */
        goto __pyx_L9;
      }

      /* "ctf/tensor.pyx":621
 *                         if self.sym[-i-2] == other.sym[-i-2]:
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 elif self.shape[-i-1] == 1:             # <<<<<<<<<<<<<<
 *                     idx_A = ind_coll[red_idx_num] + idx_A
 *                     red_idx_num += 1
 */
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 621, __pyx_L1_error)
      }
      __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_7, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":622
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 elif self.shape[-i-1] == 1:
 *                     idx_A = ind_coll[red_idx_num] + idx_A             # <<<<<<<<<<<<<<
 *                     red_idx_num += 1
 *                     idx_B = idx_C[-i-1] + idx_B
 */
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_ind_coll, __pyx_v_red_idx_num); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_v_idx_A); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_idx_A, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "ctf/tensor.pyx":623
 *                 elif self.shape[-i-1] == 1:
 *                     idx_A = ind_coll[red_idx_num] + idx_A
 *                     red_idx_num += 1             # <<<<<<<<<<<<<<
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<other.ndim:
 */
        __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_red_idx_num, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF_SET(__pyx_v_red_idx_num, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "ctf/tensor.pyx":624
 *                     idx_A = ind_coll[red_idx_num] + idx_A
 *                     red_idx_num += 1
 *                     idx_B = idx_C[-i-1] + idx_B             # <<<<<<<<<<<<<<
 *                     if i+1<other.ndim:
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:
 */
        __pyx_t_6 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_idx_C, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_v_idx_B); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_idx_B, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "ctf/tensor.pyx":625
 *                     red_idx_num += 1
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<other.ndim:             # <<<<<<<<<<<<<<
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:
 *                             out_sym[-i-2] = other.sym[-i-2]
 */
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 625, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_other->ndim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 625, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 625, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 625, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_1) {

          /* "ctf/tensor.pyx":626
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<other.ndim:
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:             # <<<<<<<<<<<<<<
 *                             out_sym[-i-2] = other.sym[-i-2]
 *                 elif other.shape[-i-1] == 1:
 */
          __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (!__pyx_t_13) {
          } else {
            __pyx_t_1 = __pyx_t_13;
            goto __pyx_L16_bool_binop_done;
          }
          if (unlikely(__pyx_v_self->shape == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 626, __pyx_L1_error)
          }
          __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_13 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_7, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_1 = __pyx_t_13;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_1) {

            /* "ctf/tensor.pyx":627
 *                     if i+1<other.ndim:
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:
 *                             out_sym[-i-2] = other.sym[-i-2]             # <<<<<<<<<<<<<<
 *                 elif other.shape[-i-1] == 1:
 *                     idx_A = idx_C[-i-1] + idx_A
 */
            __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_other->sym), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely((PyObject_SetItem(__pyx_v_out_sym, __pyx_t_4, __pyx_t_7) < 0))) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "ctf/tensor.pyx":626
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<other.ndim:
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:             # <<<<<<<<<<<<<<
 *                             out_sym[-i-2] = other.sym[-i-2]
 *                 elif other.shape[-i-1] == 1:
 */
          }

          /* "ctf/tensor.pyx":625
 *                     red_idx_num += 1
 *                     idx_B = idx_C[-i-1] + idx_B
 *                     if i+1<other.ndim:             # <<<<<<<<<<<<<<
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:
 *                             out_sym[-i-2] = other.sym[-i-2]
 */
        }

        /* "ctf/tensor.pyx":621
 *                         if self.sym[-i-2] == other.sym[-i-2]:
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 elif self.shape[-i-1] == 1:             # <<<<<<<<<<<<<<
 *                     idx_A = ind_coll[red_idx_num] + idx_A
 *                     red_idx_num += 1
 */
        goto __pyx_L9;
      }

      /* "ctf/tensor.pyx":628
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:
 *                             out_sym[-i-2] = other.sym[-i-2]
 *                 elif other.shape[-i-1] == 1:             # <<<<<<<<<<<<<<
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = ind_coll[red_idx_num] + idx_B
 */
      if (unlikely(__pyx_v_other->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 628, __pyx_L1_error)
      }
      __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_other->shape, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_7, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":629
 *                             out_sym[-i-2] = other.sym[-i-2]
 *                 elif other.shape[-i-1] == 1:
 *                     idx_A = idx_C[-i-1] + idx_A             # <<<<<<<<<<<<<<
 *                     idx_B = ind_coll[red_idx_num] + idx_B
 *                     red_idx_num += 1
 */
        __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_idx_C, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Add(__pyx_t_7, __pyx_v_idx_A); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_idx_A, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "ctf/tensor.pyx":630
 *                 elif other.shape[-i-1] == 1:
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = ind_coll[red_idx_num] + idx_B             # <<<<<<<<<<<<<<
 *                     red_idx_num += 1
 *                     if i+1<self.ndim:
 */
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_ind_coll, __pyx_v_red_idx_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 630, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyNumber_Add(__pyx_t_4, __pyx_v_idx_B); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_idx_B, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "ctf/tensor.pyx":631
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = ind_coll[red_idx_num] + idx_B
 *                     red_idx_num += 1             # <<<<<<<<<<<<<<
 *                     if i+1<self.ndim:
 *                         if i+1>=other.ndim or other.shape[-i-2] == 1:
 */
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_red_idx_num, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 631, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF_SET(__pyx_v_red_idx_num, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "ctf/tensor.pyx":632
 *                     idx_B = ind_coll[red_idx_num] + idx_B
 *                     red_idx_num += 1
 *                     if i+1<self.ndim:             # <<<<<<<<<<<<<<
 *                         if i+1>=other.ndim or other.shape[-i-2] == 1:
 *                             out_sym[-i-2] = self.sym[-i-2]
 */
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__pyx_t_1) {

          /* "ctf/tensor.pyx":633
 *                     red_idx_num += 1
 *                     if i+1<self.ndim:
 *                         if i+1>=other.ndim or other.shape[-i-2] == 1:             # <<<<<<<<<<<<<<
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 else:
 */
          __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_other->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (!__pyx_t_13) {
          } else {
            __pyx_t_1 = __pyx_t_13;
            goto __pyx_L20_bool_binop_done;
          }
          if (unlikely(__pyx_v_other->shape == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 633, __pyx_L1_error)
          }
          __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_other->shape, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_7, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_1 = __pyx_t_13;
          __pyx_L20_bool_binop_done:;
          if (__pyx_t_1) {

            /* "ctf/tensor.pyx":634
 *                     if i+1<self.ndim:
 *                         if i+1>=other.ndim or other.shape[-i-2] == 1:
 *                             out_sym[-i-2] = self.sym[-i-2]             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError("Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match")
 */
            __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->sym), __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely((PyObject_SetItem(__pyx_v_out_sym, __pyx_t_6, __pyx_t_7) < 0))) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "ctf/tensor.pyx":633
 *                     red_idx_num += 1
 *                     if i+1<self.ndim:
 *                         if i+1>=other.ndim or other.shape[-i-2] == 1:             # <<<<<<<<<<<<<<
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 else:
 */
          }

          /* "ctf/tensor.pyx":632
 *                     idx_B = ind_coll[red_idx_num] + idx_B
 *                     red_idx_num += 1
 *                     if i+1<self.ndim:             # <<<<<<<<<<<<<<
 *                         if i+1>=other.ndim or other.shape[-i-2] == 1:
 *                             out_sym[-i-2] = self.sym[-i-2]
 */
        }

        /* "ctf/tensor.pyx":628
 *                         if i+1>=self.ndim or self.shape[-i-2] == 1:
 *                             out_sym[-i-2] = other.sym[-i-2]
 *                 elif other.shape[-i-1] == 1:             # <<<<<<<<<<<<<<
 *                     idx_A = idx_C[-i-1] + idx_A
 *                     idx_B = ind_coll[red_idx_num] + idx_B
 */
        goto __pyx_L9;
      }

      /* "ctf/tensor.pyx":636
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 else:
 *                     raise ValueError("Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match")             # <<<<<<<<<<<<<<
 *                 out_dims[-i-1] = np.maximum(self.shape[-i-1], other.shape[-i-1])
 *             elif i<self.ndim:
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 636, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 636, __pyx_L1_error)
      }
      __pyx_L9:;

      /* "ctf/tensor.pyx":637
 *                 else:
 *                     raise ValueError("Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match")
 *                 out_dims[-i-1] = np.maximum(self.shape[-i-1], other.shape[-i-1])             # <<<<<<<<<<<<<<
 *             elif i<self.ndim:
 *                 idx_A = idx_C[-i-1] + idx_A
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_maximum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 637, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__pyx_v_other->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 637, __pyx_L1_error)
      }
      __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_other->shape, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_10 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_5};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_out_dims, __pyx_t_5, __pyx_t_7) < 0))) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":614
 *         red_idx_num = out_dims.size
 *         for i in range(out_dims.size):
 *             if i<self.ndim and i<other.ndim:             # <<<<<<<<<<<<<<
 *                 if self.shape[-i-1] == other.shape[-i-1]:
 *                     idx_A = idx_C[-i-1] + idx_A
 */
      goto __pyx_L6;
    }

    /* "ctf/tensor.pyx":638
 *                     raise ValueError("Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match")
 *                 out_dims[-i-1] = np.maximum(self.shape[-i-1], other.shape[-i-1])
 *             elif i<self.ndim:             # <<<<<<<<<<<<<<
 *                 idx_A = idx_C[-i-1] + idx_A
 *                 out_dims[-i-1] = self.shape[-i-1]
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_i, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":639
 *                 out_dims[-i-1] = np.maximum(self.shape[-i-1], other.shape[-i-1])
 *             elif i<self.ndim:
 *                 idx_A = idx_C[-i-1] + idx_A             # <<<<<<<<<<<<<<
 *                 out_dims[-i-1] = self.shape[-i-1]
 *                 if i+1<self.ndim:
 */
      __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_idx_C, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_v_idx_A); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_idx_A, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":640
 *             elif i<self.ndim:
 *                 idx_A = idx_C[-i-1] + idx_A
 *                 out_dims[-i-1] = self.shape[-i-1]             # <<<<<<<<<<<<<<
 *                 if i+1<self.ndim:
 *                     out_sym[-i-2] = self.sym[-i-2]
 */
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 640, __pyx_L1_error)
      }
      __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_out_dims, __pyx_t_4, __pyx_t_7) < 0))) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":641
 *                 idx_A = idx_C[-i-1] + idx_A
 *                 out_dims[-i-1] = self.shape[-i-1]
 *                 if i+1<self.ndim:             # <<<<<<<<<<<<<<
 *                     out_sym[-i-2] = self.sym[-i-2]
 *             else:
 */
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_7, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":642
 *                 out_dims[-i-1] = self.shape[-i-1]
 *                 if i+1<self.ndim:
 *                     out_sym[-i-2] = self.sym[-i-2]             # <<<<<<<<<<<<<<
 *             else:
 *                 idx_B = idx_C[-i-1] + idx_B
 */
        __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->sym), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_out_sym, __pyx_t_7, __pyx_t_5) < 0))) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ctf/tensor.pyx":641
 *                 idx_A = idx_C[-i-1] + idx_A
 *                 out_dims[-i-1] = self.shape[-i-1]
 *                 if i+1<self.ndim:             # <<<<<<<<<<<<<<
 *                     out_sym[-i-2] = self.sym[-i-2]
 *             else:
 */
      }

      /* "ctf/tensor.pyx":638
 *                     raise ValueError("Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match")
 *                 out_dims[-i-1] = np.maximum(self.shape[-i-1], other.shape[-i-1])
 *             elif i<self.ndim:             # <<<<<<<<<<<<<<
 *                 idx_A = idx_C[-i-1] + idx_A
 *                 out_dims[-i-1] = self.shape[-i-1]
 */
      goto __pyx_L6;
    }

    /* "ctf/tensor.pyx":644
 *                     out_sym[-i-2] = self.sym[-i-2]
 *             else:
 *                 idx_B = idx_C[-i-1] + idx_B             # <<<<<<<<<<<<<<
 *                 out_dims[-i-1] = other.shape[-i-1]
 *                 if i+1<other.ndim:
 */
    /*else*/ {
      __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_idx_C, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_v_idx_B); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_idx_B, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":645
 *             else:
 *                 idx_B = idx_C[-i-1] + idx_B
 *                 out_dims[-i-1] = other.shape[-i-1]             # <<<<<<<<<<<<<<
 *                 if i+1<other.ndim:
 *                     out_sym[-i-2] = other.sym[-i-2]
 */
      if (unlikely(__pyx_v_other->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 645, __pyx_L1_error)
      }
      __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_other->shape, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_out_dims, __pyx_t_4, __pyx_t_7) < 0))) __PYX_ERR(0, 645, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":646
 *                 idx_B = idx_C[-i-1] + idx_B
 *                 out_dims[-i-1] = other.shape[-i-1]
 *                 if i+1<other.ndim:             # <<<<<<<<<<<<<<
 *                     out_sym[-i-2] = other.sym[-i-2]
 *         if gen_tsr is True:
 */
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_other->ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_7, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":647
 *                 out_dims[-i-1] = other.shape[-i-1]
 *                 if i+1<other.ndim:
 *                     out_sym[-i-2] = other.sym[-i-2]             # <<<<<<<<<<<<<<
 *         if gen_tsr is True:
 *             out_tsr = tensor(out_dims, out_sp, out_sym, out_dtype, out_order)
 */
        __pyx_t_5 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_other->sym), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_out_sym, __pyx_t_7, __pyx_t_5) < 0))) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ctf/tensor.pyx":646
 *                 idx_B = idx_C[-i-1] + idx_B
 *                 out_dims[-i-1] = other.shape[-i-1]
 *                 if i+1<other.ndim:             # <<<<<<<<<<<<<<
 *                     out_sym[-i-2] = other.sym[-i-2]
 *         if gen_tsr is True:
 */
      }
    }
    __pyx_L6:;

    /* "ctf/tensor.pyx":613
 *         idx_B = ""
 *         red_idx_num = out_dims.size
 *         for i in range(out_dims.size):             # <<<<<<<<<<<<<<
 *             if i<self.ndim and i<other.ndim:
 *                 if self.shape[-i-1] == other.shape[-i-1]:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":648
 *                 if i+1<other.ndim:
 *                     out_sym[-i-2] = other.sym[-i-2]
 *         if gen_tsr is True:             # <<<<<<<<<<<<<<
 *             out_tsr = tensor(out_dims, out_sp, out_sym, out_dtype, out_order)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gen_tsr == Py_True);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":649
 *                     out_sym[-i-2] = other.sym[-i-2]
 *         if gen_tsr is True:
 *             out_tsr = tensor(out_dims, out_sp, out_sym, out_dtype, out_order)             # <<<<<<<<<<<<<<
 *         else:
 *             out_tsr = None
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_out_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_out_order); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_out_dims);
    __Pyx_GIVEREF(__pyx_v_out_dims);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_out_dims)) __PYX_ERR(0, 649, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_out_sym);
    __Pyx_GIVEREF(__pyx_v_out_sym);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_out_sym)) __PYX_ERR(0, 649, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_out_dtype);
    __Pyx_GIVEREF(__pyx_v_out_dtype);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_v_out_dtype)) __PYX_ERR(0, 649, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_out_tsr = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":648
 *                 if i+1<other.ndim:
 *                     out_sym[-i-2] = other.sym[-i-2]
 *         if gen_tsr is True:             # <<<<<<<<<<<<<<
 *             out_tsr = tensor(out_dims, out_sp, out_sym, out_dtype, out_order)
 *         else:
 */
    goto __pyx_L25;
  }

  /* "ctf/tensor.pyx":651
 *             out_tsr = tensor(out_dims, out_sp, out_sym, out_dtype, out_order)
 *         else:
 *             out_tsr = None             # <<<<<<<<<<<<<<
 *         return [idx_A, idx_B, idx_C, out_tsr]
 * 
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_out_tsr = ((struct __pyx_obj_3ctf_6tensor_tensor *)Py_None);
  }
  __pyx_L25:;

  /* "ctf/tensor.pyx":652
 *         else:
 *             out_tsr = None
 *         return [idx_A, idx_B, idx_C, out_tsr]             # <<<<<<<<<<<<<<
 * 
 *     #def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyList_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_idx_A);
  __Pyx_GIVEREF(__pyx_v_idx_A);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_idx_A)) __PYX_ERR(0, 652, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_idx_B);
  __Pyx_GIVEREF(__pyx_v_idx_B);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_v_idx_B)) __PYX_ERR(0, 652, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_idx_C);
  __Pyx_GIVEREF(__pyx_v_idx_C);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_v_idx_C)) __PYX_ERR(0, 652, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_out_tsr);
  __Pyx_GIVEREF((PyObject *)__pyx_v_out_tsr);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, ((PyObject *)__pyx_v_out_tsr))) __PYX_ERR(0, 652, __pyx_L1_error);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":600
 *             return ctf.tensor_aux.transpose(self)
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):             # <<<<<<<<<<<<<<
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor._ufunc_interpret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out_dtype);
  __Pyx_XDECREF(__pyx_v_out_dims);
  __Pyx_XDECREF(__pyx_v_out_sym);
  __Pyx_XDECREF(__pyx_v_ind_coll);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_red_idx_num);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_tsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":659
 *     #    return self.shape[0]
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux.abs(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_21__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_21__abs__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_20__abs__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_20__abs__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 1);

  /* "ctf/tensor.pyx":660
 * 
 *     def __abs__(self):
 *         return ctf.tensor_aux.abs(self)             # <<<<<<<<<<<<<<
 * 
 *     def __nonzero__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":659
 *     #    return self.shape[0]
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux.abs(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":662
 *         return ctf.tensor_aux.abs(self)
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 */

/* Python wrapper */
static int __pyx_pw_3ctf_6tensor_6tensor_23__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3ctf_6tensor_6tensor_23__nonzero__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_22__nonzero__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ctf_6tensor_6tensor_22__nonzero__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__nonzero__", 1);

  /* "ctf/tensor.pyx":663
 * 
 *     def __nonzero__(self):
 *         if self.size != 1 and self.shape != ():             # <<<<<<<<<<<<<<
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 *         if int(self.to_nparray() == 0) == 1:
 */
  __pyx_t_2 = (__pyx_v_self->size != 1);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->shape, __pyx_empty_tuple, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 663, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":664
 *     def __nonzero__(self):
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")             # <<<<<<<<<<<<<<
 *         if int(self.to_nparray() == 0) == 1:
 *             return False
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 664, __pyx_L1_error)

    /* "ctf/tensor.pyx":663
 * 
 *     def __nonzero__(self):
 *         if self.size != 1 and self.shape != ():             # <<<<<<<<<<<<<<
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 *         if int(self.to_nparray() == 0) == 1:
 */
  }

  /* "ctf/tensor.pyx":665
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 *         if int(self.to_nparray() == 0) == 1:             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_nparray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_3, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":666
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 *         if int(self.to_nparray() == 0) == 1:
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             return True
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":665
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 *         if int(self.to_nparray() == 0) == 1:             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  }

  /* "ctf/tensor.pyx":668
 *             return False
 *         else:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     def __int__(self):
 */
  /*else*/ {
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "ctf/tensor.pyx":662
 *         return ctf.tensor_aux.abs(self)
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.__nonzero__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":670
 *             return True
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_25__int__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_25__int__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__int__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_24__int__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_24__int__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__int__", 1);

  /* "ctf/tensor.pyx":671
 * 
 *     def __int__(self):
 *         if self.size != 1 and self.shape != ():             # <<<<<<<<<<<<<<
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 *         return int(self.to_nparray())
 */
  __pyx_t_2 = (__pyx_v_self->size != 1);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->shape, __pyx_empty_tuple, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":672
 *     def __int__(self):
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")             # <<<<<<<<<<<<<<
 *         return int(self.to_nparray())
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 672, __pyx_L1_error)

    /* "ctf/tensor.pyx":671
 * 
 *     def __int__(self):
 *         if self.size != 1 and self.shape != ():             # <<<<<<<<<<<<<<
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 *         return int(self.to_nparray())
 */
  }

  /* "ctf/tensor.pyx":673
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 *         return int(self.to_nparray())             # <<<<<<<<<<<<<<
 * 
 *     def __float__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_nparray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":670
 *             return True
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.__int__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":675
 *         return int(self.to_nparray())
 * 
 *     def __float__(self):             # <<<<<<<<<<<<<<
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_27__float__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_27__float__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__float__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_26__float__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_26__float__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__float__", 1);

  /* "ctf/tensor.pyx":676
 * 
 *     def __float__(self):
 *         if self.size != 1 and self.shape != ():             # <<<<<<<<<<<<<<
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 *         return float(self.to_nparray())
 */
  __pyx_t_2 = (__pyx_v_self->size != 1);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->shape, __pyx_empty_tuple, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":677
 *     def __float__(self):
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")             # <<<<<<<<<<<<<<
 *         return float(self.to_nparray())
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 677, __pyx_L1_error)

    /* "ctf/tensor.pyx":676
 * 
 *     def __float__(self):
 *         if self.size != 1 and self.shape != ():             # <<<<<<<<<<<<<<
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 *         return float(self.to_nparray())
 */
  }

  /* "ctf/tensor.pyx":678
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 *         return float(self.to_nparray())             # <<<<<<<<<<<<<<
 * 
 *     # def __complex__(self, real, imag):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_nparray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":675
 *         return int(self.to_nparray())
 * 
 *     def __float__(self):             # <<<<<<<<<<<<<<
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.__float__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":684
 *     #     return
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         neg_one = ctf.tensor_aux.astensor([-1], dtype=self.dtype)
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self, neg_one)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_29__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_29__neg__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_28__neg__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_28__neg__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_v_neg_one = NULL;
  PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  PyObject *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 1);

  /* "ctf/tensor.pyx":685
 * 
 *     def __neg__(self):
 *         neg_one = ctf.tensor_aux.astensor([-1], dtype=self.dtype)             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self, neg_one)
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astensor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_neg_1)) __PYX_ERR(0, 685, __pyx_L1_error);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_neg_one = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":686
 *     def __neg__(self):
 *         neg_one = ctf.tensor_aux.astensor([-1], dtype=self.dtype)
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self, neg_one)             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match_tensor_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_neg_one};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 686, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_1), 2) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 686, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_tsr = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_otsr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":687
 *         neg_one = ctf.tensor_aux.astensor([-1], dtype=self.dtype)
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self, neg_one)
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)             # <<<<<<<<<<<<<<
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)
 *         return out_tsr
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_otsr};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 687, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_1,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 687, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_1,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_6(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_8), 4) < 0) __PYX_ERR(0, 687, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 687, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":688
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self, neg_one)
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)             # <<<<<<<<<<<<<<
 *         return out_tsr
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_C};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_B};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Lshift(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":689
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)
 *         return out_tsr             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out_tsr);
  __pyx_r = __pyx_v_out_tsr;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":684
 *     #     return
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         neg_one = ctf.tensor_aux.astensor([-1], dtype=self.dtype)
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self, neg_one)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neg_one);
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":691
 *         return out_tsr
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_31__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_31__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_30__add__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_30__add__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  PyObject *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "ctf/tensor.pyx":692
 * 
 *     def __add__(self, other):
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)             # <<<<<<<<<<<<<<
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match_tensor_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 692, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 692, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_tsr = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_otsr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":694
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)             # <<<<<<<<<<<<<<
 * 
 *         out_tsr.i(idx_C) << tsr.i(idx_A)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_otsr};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 694, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 694, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_6(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_8), 4) < 0) __PYX_ERR(0, 694, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 694, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":696
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 * 
 *         out_tsr.i(idx_C) << tsr.i(idx_A)             # <<<<<<<<<<<<<<
 *         out_tsr.i(idx_C) << otsr.i(idx_B)
 *         return out_tsr
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_idx_C};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyNumber_Lshift(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":697
 * 
 *         out_tsr.i(idx_C) << tsr.i(idx_A)
 *         out_tsr.i(idx_C) << otsr.i(idx_B)             # <<<<<<<<<<<<<<
 *         return out_tsr
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_C};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_B};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyNumber_Lshift(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":698
 *         out_tsr.i(idx_C) << tsr.i(idx_A)
 *         out_tsr.i(idx_C) << otsr.i(idx_B)
 *         return out_tsr             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, other_in):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out_tsr);
  __pyx_r = __pyx_v_out_tsr;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":691
 *         return out_tsr
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":700
 *         return out_tsr
 * 
 *     def __iadd__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_33__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_33__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_32__iadd__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_32__iadd__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in) {
  PyObject *__pyx_v_other = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_out_tsr = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iadd__", 1);

  /* "ctf/tensor.pyx":701
 * 
 *     def __iadd__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)             # <<<<<<<<<<<<<<
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other_in};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_other = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":702
 *     def __iadd__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_result_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->dtype), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":703
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 703, __pyx_L1_error)

    /* "ctf/tensor.pyx":702
 *     def __iadd__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  }

  /* "ctf/tensor.pyx":704
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)             # <<<<<<<<<<<<<<
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_other, Py_False};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 704, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 704, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":705
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')
 *         if self.dtype != other.dtype:
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_idx_C); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 705, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_10 != __pyx_v_self->ndim);
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":706
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')             # <<<<<<<<<<<<<<
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 += np.int64
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 706, __pyx_L1_error)

    /* "ctf/tensor.pyx":705
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')
 *         if self.dtype != other.dtype:
 */
  }

  /* "ctf/tensor.pyx":707
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')
 *         if self.dtype != other.dtype:             # <<<<<<<<<<<<<<
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 += np.int64
 *             self.i(idx_C) << otsr.i(idx_A)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":708
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 += np.int64             # <<<<<<<<<<<<<<
 *             self.i(idx_C) << otsr.i(idx_A)
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_match_tensor_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_other};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 708, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2);
      index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_2), 2) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 708, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __pyx_v_tsr = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_otsr = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":709
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 += np.int64
 *             self.i(idx_C) << otsr.i(idx_A)             # <<<<<<<<<<<<<<
 *         else:
 *             self.i(idx_C) << other.i(idx_A)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_C};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 709, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 709, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = PyNumber_Lshift(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":707
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')
 *         if self.dtype != other.dtype:             # <<<<<<<<<<<<<<
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 += np.int64
 *             self.i(idx_C) << otsr.i(idx_A)
 */
    goto __pyx_L7;
  }

  /* "ctf/tensor.pyx":711
 *             self.i(idx_C) << otsr.i(idx_A)
 *         else:
 *             self.i(idx_C) << other.i(idx_A)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_idx_C};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = PyNumber_Lshift(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_L7:;

  /* "ctf/tensor.pyx":712
 *         else:
 *             self.i(idx_C) << other.i(idx_A)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":700
 *         return out_tsr
 * 
 *     def __iadd__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":714
 *         return self
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_35__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_35__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_34__mul__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_34__mul__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  PyObject *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "ctf/tensor.pyx":715
 * 
 *     def __mul__(self, other):
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)             # <<<<<<<<<<<<<<
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match_tensor_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 715, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 715, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_tsr = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_otsr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":717
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)             # <<<<<<<<<<<<<<
 * 
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_otsr};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 717, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 717, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_6(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_8), 4) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 717, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":719
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 * 
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)             # <<<<<<<<<<<<<<
 *         return out_tsr
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_idx_C};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_B};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Lshift(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":720
 * 
 *         out_tsr.i(idx_C) << tsr.i(idx_A)*otsr.i(idx_B)
 *         return out_tsr             # <<<<<<<<<<<<<<
 * 
 *     def __imul__(self, other_in):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out_tsr);
  __pyx_r = __pyx_v_out_tsr;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":714
 *         return self
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":722
 *         return out_tsr
 * 
 *     def __imul__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_37__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_37__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_36__imul__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_36__imul__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in) {
  PyObject *__pyx_v_other = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_out_tsr = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self_copy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__imul__", 1);

  /* "ctf/tensor.pyx":723
 * 
 *     def __imul__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)             # <<<<<<<<<<<<<<
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other_in};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_other = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":724
 *     def __imul__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_result_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->dtype), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":725
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 725, __pyx_L1_error)

    /* "ctf/tensor.pyx":724
 *     def __imul__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  }

  /* "ctf/tensor.pyx":726
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)             # <<<<<<<<<<<<<<
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_other, Py_False};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 726, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 726, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":727
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')
 *         self_copy = tensor(copy=self)
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_idx_C); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_t_11 = (__pyx_t_10 != __pyx_v_self->ndim);
  if (!__pyx_t_11) {
  } else {
    __pyx_t_6 = __pyx_t_11;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_idx_C, __pyx_v_idx_A, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_t_11;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":728
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')             # <<<<<<<<<<<<<<
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 728, __pyx_L1_error)

    /* "ctf/tensor.pyx":727
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')
 *         self_copy = tensor(copy=self)
 */
  }

  /* "ctf/tensor.pyx":729
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')
 *         self_copy = tensor(copy=self)             # <<<<<<<<<<<<<<
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*other.i(idx_B)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self_copy = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":730
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')
 *         self_copy = tensor(copy=self)
 *         self.set_zero()             # <<<<<<<<<<<<<<
 *         self.i(idx_C) << self_copy.i(idx_A)*other.i(idx_B)
 *         return self
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_zero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":731
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*other.i(idx_B)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_idx_C};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self_copy), __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_B};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Lshift(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":732
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*other.i(idx_B)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":722
 *         return out_tsr
 * 
 *     def __imul__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__imul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XDECREF((PyObject *)__pyx_v_self_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":734
 *         return self
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_39__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_39__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_38__sub__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_38__sub__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  PyObject *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_v_iotsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "ctf/tensor.pyx":735
 * 
 *     def __sub__(self, other):
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)             # <<<<<<<<<<<<<<
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match_tensor_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 735, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 735, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 735, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_tsr = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_otsr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":737
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)             # <<<<<<<<<<<<<<
 *         out_tsr.i(idx_C) << tsr.i(idx_A)
 *         iotsr = otsr.i(idx_B)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_otsr};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 737, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_6(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_8), 4) < 0) __PYX_ERR(0, 737, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 737, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":738
 * 
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 *         out_tsr.i(idx_C) << tsr.i(idx_A)             # <<<<<<<<<<<<<<
 *         iotsr = otsr.i(idx_B)
 *         iotsr.scale(-1)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_idx_C};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyNumber_Lshift(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":739
 *         [idx_A, idx_B, idx_C, out_tsr] = tsr._ufunc_interpret(otsr)
 *         out_tsr.i(idx_C) << tsr.i(idx_A)
 *         iotsr = otsr.i(idx_B)             # <<<<<<<<<<<<<<
 *         iotsr.scale(-1)
 *         out_tsr.i(idx_C) << iotsr
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_B};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_v_iotsr = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":740
 *         out_tsr.i(idx_C) << tsr.i(idx_A)
 *         iotsr = otsr.i(idx_B)
 *         iotsr.scale(-1)             # <<<<<<<<<<<<<<
 *         out_tsr.i(idx_C) << iotsr
 *         return out_tsr
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_iotsr, __pyx_n_s_scale); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_int_neg_1};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":741
 *         iotsr = otsr.i(idx_B)
 *         iotsr.scale(-1)
 *         out_tsr.i(idx_C) << iotsr             # <<<<<<<<<<<<<<
 *         return out_tsr
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_tsr, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_C};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = PyNumber_Lshift(__pyx_t_5, __pyx_v_iotsr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":742
 *         iotsr.scale(-1)
 *         out_tsr.i(idx_C) << iotsr
 *         return out_tsr             # <<<<<<<<<<<<<<
 * 
 *     def __isub__(self, other_in):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out_tsr);
  __pyx_r = __pyx_v_out_tsr;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":734
 *         return self
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XDECREF(__pyx_v_iotsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":744
 *         return out_tsr
 * 
 *     def __isub__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_41__isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_41__isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__isub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_40__isub__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_40__isub__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in) {
  PyObject *__pyx_v_other = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_out_tsr = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  PyObject *__pyx_v_iotsr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__isub__", 1);

  /* "ctf/tensor.pyx":745
 * 
 *     def __isub__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)             # <<<<<<<<<<<<<<
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other_in};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_other = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":746
 *     def __isub__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_result_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->dtype), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":747
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 747, __pyx_L1_error)

    /* "ctf/tensor.pyx":746
 *     def __isub__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  }

  /* "ctf/tensor.pyx":748
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)             # <<<<<<<<<<<<<<
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_other, Py_False};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 748, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 748, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":749
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')
 *         if self.dtype != other.dtype:
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_idx_C); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 749, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_10 != __pyx_v_self->ndim);
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":750
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')             # <<<<<<<<<<<<<<
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 750, __pyx_L1_error)

    /* "ctf/tensor.pyx":749
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')
 *         if self.dtype != other.dtype:
 */
  }

  /* "ctf/tensor.pyx":751
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')
 *         if self.dtype != other.dtype:             # <<<<<<<<<<<<<<
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64
 *             iotsr = otsr.i(idx_A)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":752
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64             # <<<<<<<<<<<<<<
 *             iotsr = otsr.i(idx_A)
 *             iotsr.scale(-1)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_match_tensor_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_other};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 752, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2);
      index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_2), 2) < 0) __PYX_ERR(0, 752, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 752, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __pyx_v_tsr = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_otsr = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":753
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64
 *             iotsr = otsr.i(idx_A)             # <<<<<<<<<<<<<<
 *             iotsr.scale(-1)
 *             self.i(idx_C) << iotsr
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_A};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_v_iotsr = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":754
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64
 *             iotsr = otsr.i(idx_A)
 *             iotsr.scale(-1)             # <<<<<<<<<<<<<<
 *             self.i(idx_C) << iotsr
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_iotsr, __pyx_n_s_scale); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_int_neg_1};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":755
 *             iotsr = otsr.i(idx_A)
 *             iotsr.scale(-1)
 *             self.i(idx_C) << iotsr             # <<<<<<<<<<<<<<
 *         else:
 *             iotsr = other.i(idx_A)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_C};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = PyNumber_Lshift(__pyx_t_7, __pyx_v_iotsr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":751
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')
 *         if self.dtype != other.dtype:             # <<<<<<<<<<<<<<
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64
 *             iotsr = otsr.i(idx_A)
 */
    goto __pyx_L7;
  }

  /* "ctf/tensor.pyx":757
 *             self.i(idx_C) << iotsr
 *         else:
 *             iotsr = other.i(idx_A)             # <<<<<<<<<<<<<<
 *             iotsr.scale(-1)
 *             self.i(idx_C) << iotsr
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_A};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_v_iotsr = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":758
 *         else:
 *             iotsr = other.i(idx_A)
 *             iotsr.scale(-1)             # <<<<<<<<<<<<<<
 *             self.i(idx_C) << iotsr
 *         return self
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_iotsr, __pyx_n_s_scale); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_int_neg_1};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":759
 *             iotsr = other.i(idx_A)
 *             iotsr.scale(-1)
 *             self.i(idx_C) << iotsr             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_idx_C};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = PyNumber_Lshift(__pyx_t_5, __pyx_v_iotsr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_L7:;

  /* "ctf/tensor.pyx":760
 *             iotsr.scale(-1)
 *             self.i(idx_C) << iotsr
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":744
 *         return out_tsr
 * 
 *     def __isub__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__isub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF(__pyx_v_iotsr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":762
 *         return self
 * 
 *     def __truediv__(self, other):             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux._div(self,other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_43__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_43__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_42__truediv__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_42__truediv__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 1);

  /* "ctf/tensor.pyx":763
 * 
 *     def __truediv__(self, other):
 *         return ctf.tensor_aux._div(self,other)             # <<<<<<<<<<<<<<
 * 
 *     def __itruediv__(self, other_in):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_div); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":762
 *         return self
 * 
 *     def __truediv__(self, other):             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux._div(self,other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":765
 *         return ctf.tensor_aux._div(self,other)
 * 
 *     def __itruediv__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_45__itruediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_45__itruediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__itruediv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_44__itruediv__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_44__itruediv__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in) {
  PyObject *__pyx_v_other = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self_copy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__itruediv__", 1);

  /* "ctf/tensor.pyx":766
 * 
 *     def __itruediv__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)             # <<<<<<<<<<<<<<
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other_in};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_other = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":767
 *     def __itruediv__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_result_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->dtype), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":768
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 768, __pyx_L1_error)

    /* "ctf/tensor.pyx":767
 *     def __itruediv__(self, other_in):
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  }

  /* "ctf/tensor.pyx":769
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)             # <<<<<<<<<<<<<<
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_other, Py_False};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 769, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 769, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 769, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":770
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')
 *         if isinstance(other_in, tensor):
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_idx_C); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 770, __pyx_L1_error)
  __pyx_t_11 = (__pyx_t_10 != __pyx_v_self->ndim);
  if (!__pyx_t_11) {
  } else {
    __pyx_t_6 = __pyx_t_11;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_idx_C, __pyx_v_idx_A, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_t_11;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":771
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')             # <<<<<<<<<<<<<<
 *         if isinstance(other_in, tensor):
 *             otsr = tensor(copy=other)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 771, __pyx_L1_error)

    /* "ctf/tensor.pyx":770
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')
 *         if isinstance(other_in, tensor):
 */
  }

  /* "ctf/tensor.pyx":772
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')
 *         if isinstance(other_in, tensor):             # <<<<<<<<<<<<<<
 *             otsr = tensor(copy=other)
 *         else:
 */
  __pyx_t_6 = __Pyx_TypeCheck(__pyx_v_other_in, __pyx_ptype_3ctf_6tensor_tensor); 
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":773
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')
 *         if isinstance(other_in, tensor):
 *             otsr = tensor(copy=other)             # <<<<<<<<<<<<<<
 *         else:
 *             otsr = other
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, __pyx_v_other) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_otsr = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":772
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')
 *         if isinstance(other_in, tensor):             # <<<<<<<<<<<<<<
 *             otsr = tensor(copy=other)
 *         else:
 */
    goto __pyx_L9;
  }

  /* "ctf/tensor.pyx":775
 *             otsr = tensor(copy=other)
 *         else:
 *             otsr = other             # <<<<<<<<<<<<<<
 *         otsr._invert_elements()
 *         self_copy = tensor(copy=self)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_other);
    __pyx_v_otsr = __pyx_v_other;
  }
  __pyx_L9:;

  /* "ctf/tensor.pyx":776
 *         else:
 *             otsr = other
 *         otsr._invert_elements()             # <<<<<<<<<<<<<<
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_invert_elements); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":777
 *             otsr = other
 *         otsr._invert_elements()
 *         self_copy = tensor(copy=self)             # <<<<<<<<<<<<<<
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 777, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self_copy = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":778
 *         otsr._invert_elements()
 *         self_copy = tensor(copy=self)
 *         self.set_zero()             # <<<<<<<<<<<<<<
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)
 *         return self
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_zero); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":779
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_idx_C};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self_copy), __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_B};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Lshift(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":780
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __div__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":765
 *         return ctf.tensor_aux._div(self,other)
 * 
 *     def __itruediv__(self, other_in):             # <<<<<<<<<<<<<<
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__itruediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF((PyObject *)__pyx_v_self_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":782
 *         return self
 * 
 *     def __div__(self, other):             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux._div(self,other)
 * 
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_47__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_47__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__div__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_46__div__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_46__div__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__div__", 1);

  /* "ctf/tensor.pyx":783
 * 
 *     def __div__(self, other):
 *         return ctf.tensor_aux._div(self,other)             # <<<<<<<<<<<<<<
 * 
 *     def __idiv__(self, other_in):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_div); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":782
 *         return self
 * 
 *     def __div__(self, other):             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux._div(self,other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.__div__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

/* "ctf/tensor.pyx":785
 *         return ctf.tensor_aux._div(self,other)
 * 
 *     def __idiv__(self, other_in):             # <<<<<<<<<<<<<<
 *         # same with __itruediv__
 *         other = ctf.tensor_aux.astensor(other_in)
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_49__idiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_49__idiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_in) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__idiv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_48__idiv__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_48__idiv__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other_in) {
  PyObject *__pyx_v_other = NULL;
  PyObject *__pyx_v_idx_A = NULL;
  PyObject *__pyx_v_idx_B = NULL;
  PyObject *__pyx_v_idx_C = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_out_tsr = NULL;
  PyObject *__pyx_v_otsr = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self_copy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__idiv__", 1);

  /* "ctf/tensor.pyx":787
 *     def __idiv__(self, other_in):
 *         # same with __itruediv__
 *         other = ctf.tensor_aux.astensor(other_in)             # <<<<<<<<<<<<<<
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other_in};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_other = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":788
 *         # same with __itruediv__
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_result_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->dtype), __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":789
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 789, __pyx_L1_error)

    /* "ctf/tensor.pyx":788
 *         # same with __itruediv__
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:             # <<<<<<<<<<<<<<
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 */
  }

  /* "ctf/tensor.pyx":790
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)             # <<<<<<<<<<<<<<
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ufunc_interpret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_other, Py_False};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 790, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 790, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 790, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_idx_A = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_idx_B = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_idx_C = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_out_tsr = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":791
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')
 *         if isinstance(other_in, tensor):
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_idx_C); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_t_11 = (__pyx_t_10 != __pyx_v_self->ndim);
  if (!__pyx_t_11) {
  } else {
    __pyx_t_6 = __pyx_t_11;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_idx_C, __pyx_v_idx_A, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_t_11;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":792
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')             # <<<<<<<<<<<<<<
 *         if isinstance(other_in, tensor):
 *             otsr = tensor(copy=other)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 792, __pyx_L1_error)

    /* "ctf/tensor.pyx":791
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')
 *         if isinstance(other_in, tensor):
 */
  }

  /* "ctf/tensor.pyx":793
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')
 *         if isinstance(other_in, tensor):             # <<<<<<<<<<<<<<
 *             otsr = tensor(copy=other)
 *         else:
 */
  __pyx_t_6 = __Pyx_TypeCheck(__pyx_v_other_in, __pyx_ptype_3ctf_6tensor_tensor); 
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":794
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')
 *         if isinstance(other_in, tensor):
 *             otsr = tensor(copy=other)             # <<<<<<<<<<<<<<
 *         else:
 *             otsr = other
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, __pyx_v_other) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_otsr = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":793
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')
 *         if isinstance(other_in, tensor):             # <<<<<<<<<<<<<<
 *             otsr = tensor(copy=other)
 *         else:
 */
    goto __pyx_L9;
  }

  /* "ctf/tensor.pyx":796
 *             otsr = tensor(copy=other)
 *         else:
 *             otsr = other             # <<<<<<<<<<<<<<
 *         otsr._invert_elements()
 *         self_copy = tensor(copy=self)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_other);
    __pyx_v_otsr = __pyx_v_other;
  }
  __pyx_L9:;

  /* "ctf/tensor.pyx":797
 *         else:
 *             otsr = other
 *         otsr._invert_elements()             # <<<<<<<<<<<<<<
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_invert_elements); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ctf/tensor.pyx":798
 *             otsr = other
 *         otsr._invert_elements()
 *         self_copy = tensor(copy=self)             # <<<<<<<<<<<<<<
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self_copy = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":799
 *         otsr._invert_elements()
 *         self_copy = tensor(copy=self)
 *         self.set_zero()             # <<<<<<<<<<<<<<
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)
 *         return self
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_zero); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":800
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_idx_C};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self_copy), __pyx_n_s_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_idx_A};
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_otsr, __pyx_n_s_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_idx_B};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Lshift(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":801
 *         self.set_zero()
 *         self.i(idx_C) << self_copy.i(idx_A)*otsr.i(idx_B)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     # def __floordiv__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":785
 *         return ctf.tensor_aux._div(self,other)
 * 
 *     def __idiv__(self, other_in):             # <<<<<<<<<<<<<<
 *         # same with __itruediv__
 *         other = ctf.tensor_aux.astensor(other_in)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__idiv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XDECREF(__pyx_v_idx_A);
  __Pyx_XDECREF(__pyx_v_idx_B);
  __Pyx_XDECREF(__pyx_v_idx_C);
  __Pyx_XDECREF(__pyx_v_out_tsr);
  __Pyx_XDECREF(__pyx_v_otsr);
  __Pyx_XDECREF((PyObject *)__pyx_v_self_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

/* "ctf/tensor.pyx":812
 *     #     return
 * 
 *     def __pow__(self, other, modulus):             # <<<<<<<<<<<<<<
 *         if modulus is not None:
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_51__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_modulus); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_51__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_modulus) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_50__pow__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_modulus));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_50__pow__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_modulus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pow__", 1);

  /* "ctf/tensor.pyx":813
 * 
 *     def __pow__(self, other, modulus):
 *         if modulus is not None:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')
 *         return ctf.tensor_aux.power(self,other)
 */
  __pyx_t_1 = (__pyx_v_modulus != Py_None);
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":814
 *     def __pow__(self, other, modulus):
 *         if modulus is not None:
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux.power(self,other)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 814, __pyx_L1_error)

    /* "ctf/tensor.pyx":813
 * 
 *     def __pow__(self, other, modulus):
 *         if modulus is not None:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')
 *         return ctf.tensor_aux.power(self,other)
 */
  }

  /* "ctf/tensor.pyx":815
 *         if modulus is not None:
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')
 *         return ctf.tensor_aux.power(self,other)             # <<<<<<<<<<<<<<
 * 
 *     # def __ipow__(self, other_in):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_power); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":812
 *     #     return
 * 
 *     def __pow__(self, other, modulus):             # <<<<<<<<<<<<<<
 *         if modulus is not None:
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":826
 * 
 * 
 *     def _invert_elements(self):             # <<<<<<<<<<<<<<
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_53_invert_elements(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_53_invert_elements = {"_invert_elements", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_53_invert_elements, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_53_invert_elements(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_invert_elements (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_invert_elements", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_invert_elements", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_52_invert_elements(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_52_invert_elements(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_invert_elements", 1);

  /* "ctf/tensor.pyx":827
 * 
 *     def _invert_elements(self):
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 *         elif self.dtype == np.float32:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":828
 *     def _invert_elements(self):
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.float32:
 *             self.dt.true_divide[float](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<double>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":827
 * 
 *     def _invert_elements(self):
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 *         elif self.dtype == np.float32:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":829
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[float](<ctensor*>self.dt)
 *         elif self.dtype == np.complex64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":830
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 *         elif self.dtype == np.float32:
 *             self.dt.true_divide[float](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.complex64:
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<float>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":829
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[float](<ctensor*>self.dt)
 *         elif self.dtype == np.complex64:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":831
 *         elif self.dtype == np.float32:
 *             self.dt.true_divide[float](<ctensor*>self.dt)
 *         elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.complex128:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":832
 *             self.dt.true_divide[float](<ctensor*>self.dt)
 *         elif self.dtype == np.complex64:
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.complex128:
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<__pyx_t_float_complex>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":831
 *         elif self.dtype == np.float32:
 *             self.dt.true_divide[float](<ctensor*>self.dt)
 *         elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.complex128:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":833
 *         elif self.dtype == np.complex64:
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex128); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":834
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.complex128:
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int64:
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<__pyx_t_double_complex>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":833
 *         elif self.dtype == np.complex64:
 *             self.dt.true_divide[complex64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int64:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":835
 *         elif self.dtype == np.complex128:
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int32:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":836
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int64:
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int32:
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<int64_t>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":835
 *         elif self.dtype == np.complex128:
 *             self.dt.true_divide[complex128_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int32:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":837
 *         elif self.dtype == np.int64:
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int16:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":838
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int32:
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int16:
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<int32_t>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":837
 *         elif self.dtype == np.int64:
 *             self.dt.true_divide[int64_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int16:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":839
 *         elif self.dtype == np.int32:
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int8:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":840
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int16:
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int8:
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<int16_t>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":839
 *         elif self.dtype == np.int32:
 *             self.dt.true_divide[int32_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int8:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":841
 *         elif self.dtype == np.int16:
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)
 *         elif self.dtype == np.bool_:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":842
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int8:
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.bool_:
 *             self.dt.true_divide[bool](<ctensor*>self.dt)
 */
    __pyx_v_self->dt->true_divide<int8_t>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":841
 *         elif self.dtype == np.int16:
 *             self.dt.true_divide[int16_t](<ctensor*>self.dt)
 *         elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)
 *         elif self.dtype == np.bool_:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":843
 *         elif self.dtype == np.int8:
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)
 *         elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[bool](<ctensor*>self.dt)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":844
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)
 *         elif self.dtype == np.bool_:
 *             self.dt.true_divide[bool](<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 * 
 *     def __matmul__(self, other):
 */
    __pyx_v_self->dt->true_divide<bool>(((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":843
 *         elif self.dtype == np.int8:
 *             self.dt.true_divide[int8_t](<ctensor*>self.dt)
 *         elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *             self.dt.true_divide[bool](<ctensor*>self.dt)
 * 
 */
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":826
 * 
 * 
 *     def _invert_elements(self):             # <<<<<<<<<<<<<<
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor._invert_elements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":846
 *             self.dt.true_divide[bool](<ctensor*>self.dt)
 * 
 *     def __matmul__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, tensor):
 *             raise ValueError("input should be tensors")
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_55__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_55__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_54__matmul__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_3ctf_6tensor_6tensor_54__matmul__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 1);

  /* "ctf/tensor.pyx":847
 * 
 *     def __matmul__(self, other):
 *         if not isinstance(other, tensor):             # <<<<<<<<<<<<<<
 *             raise ValueError("input should be tensors")
 *         return ctf.tensor_aux.dot(self, other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_3ctf_6tensor_tensor); 
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "ctf/tensor.pyx":848
 *     def __matmul__(self, other):
 *         if not isinstance(other, tensor):
 *             raise ValueError("input should be tensors")             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux.dot(self, other)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 848, __pyx_L1_error)

    /* "ctf/tensor.pyx":847
 * 
 *     def __matmul__(self, other):
 *         if not isinstance(other, tensor):             # <<<<<<<<<<<<<<
 *             raise ValueError("input should be tensors")
 *         return ctf.tensor_aux.dot(self, other)
 */
  }

  /* "ctf/tensor.pyx":849
 *         if not isinstance(other, tensor):
 *             raise ValueError("input should be tensors")
 *         return ctf.tensor_aux.dot(self, other)             # <<<<<<<<<<<<<<
 * 
 *     def fill_random(self, mn=None, mx=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_other};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":846
 *             self.dt.true_divide[bool](<ctensor*>self.dt)
 * 
 *     def __matmul__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, tensor):
 *             raise ValueError("input should be tensors")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "ctf/tensor.pyx":851
 *         return ctf.tensor_aux.dot(self, other)
 * 
 *     def fill_random(self, mn=None, mx=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_random(mn=None, mx=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_57fill_random(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_56fill_random, "\n        tensor.fill_random(mn=None, mx=None)\n        Fill random elements to the tensor.\n\n        Parameters\n        ----------\n        mn: int or float\n            The range of random number from, default 0.\n\n        mx: int or float\n            The range of random number to, default 1.\n\n        See Also\n        --------\n        ctf: fill_sp_random()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = zeros([2, 2])\n        >>> a\n            array([[0., 0.],\n                   [0., 0.]])\n        >>> a.fill_random(3,5)\n        >>> a\n            array([[3.31908598, 4.34013067],\n                   [4.5355426 , 4.6763659 ]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_57fill_random = {"fill_random", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_57fill_random, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_56fill_random};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_57fill_random(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_mn = 0;
  PyObject *__pyx_v_mx = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_random (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mn,&__pyx_n_s_mx,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mn);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mx);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fill_random") < 0)) __PYX_ERR(0, 851, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mn = values[0];
    __pyx_v_mx = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_random", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 851, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.fill_random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_56fill_random(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_mn, __pyx_v_mx);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_56fill_random(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_mn, PyObject *__pyx_v_mx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int32_t __pyx_t_4;
  int32_t __pyx_t_5;
  int64_t __pyx_t_6;
  int64_t __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  __pyx_t_float_complex __pyx_t_12;
  __pyx_t_float_complex __pyx_t_13;
  __pyx_t_double_complex __pyx_t_14;
  __pyx_t_double_complex __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_random", 0);
  __Pyx_INCREF(__pyx_v_mn);
  __Pyx_INCREF(__pyx_v_mx);

  /* "ctf/tensor.pyx":880
 *                    [4.5355426 , 4.6763659 ]])
 *         """
 *         if mn is None:             # <<<<<<<<<<<<<<
 *             mn = 0
 *         if mx is None:
 */
  __pyx_t_1 = (__pyx_v_mn == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":881
 *         """
 *         if mn is None:
 *             mn = 0             # <<<<<<<<<<<<<<
 *         if mx is None:
 *             mx = 1
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_mn, __pyx_int_0);

    /* "ctf/tensor.pyx":880
 *                    [4.5355426 , 4.6763659 ]])
 *         """
 *         if mn is None:             # <<<<<<<<<<<<<<
 *             mn = 0
 *         if mx is None:
 */
  }

  /* "ctf/tensor.pyx":882
 *         if mn is None:
 *             mn = 0
 *         if mx is None:             # <<<<<<<<<<<<<<
 *             mx = 1
 *         if self.dtype == np.int32:
 */
  __pyx_t_1 = (__pyx_v_mx == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":883
 *             mn = 0
 *         if mx is None:
 *             mx = 1             # <<<<<<<<<<<<<<
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)
 */
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_DECREF_SET(__pyx_v_mx, __pyx_int_1);

    /* "ctf/tensor.pyx":882
 *         if mn is None:
 *             mn = 0
 *         if mx is None:             # <<<<<<<<<<<<<<
 *             mx = 1
 *         if self.dtype == np.int32:
 */
  }

  /* "ctf/tensor.pyx":884
 *         if mx is None:
 *             mx = 1
 *         if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.int64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":885
 *             mx = 1
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int32_t(__pyx_v_mn); if (unlikely((__pyx_t_4 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 885, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_int32_t(__pyx_v_mx); if (unlikely((__pyx_t_5 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 885, __pyx_L1_error)
    ((CTF::Tensor<int32_t>  *)__pyx_v_self->dt)->fill_random(__pyx_t_4, __pyx_t_5);

    /* "ctf/tensor.pyx":884
 *         if mx is None:
 *             mx = 1
 *         if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.int64:
 */
    goto __pyx_L5;
  }

  /* "ctf/tensor.pyx":886
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float32:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":887
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_v_mn); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_v_mx); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
    ((CTF::Tensor<int64_t>  *)__pyx_v_self->dt)->fill_random(__pyx_t_6, __pyx_t_7);

    /* "ctf/tensor.pyx":886
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float32:
 */
    goto __pyx_L5;
  }

  /* "ctf/tensor.pyx":888
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":889
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.float64:
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)
 */
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_mn); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 889, __pyx_L1_error)
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_mx); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 889, __pyx_L1_error)
    ((CTF::Tensor<float>  *)__pyx_v_self->dt)->fill_random(__pyx_t_8, __pyx_t_9);

    /* "ctf/tensor.pyx":888
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float64:
 */
    goto __pyx_L5;
  }

  /* "ctf/tensor.pyx":890
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":891
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float64:
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.complex64:
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_mn); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L1_error)
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_mx); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L1_error)
    ((CTF::Tensor<double>  *)__pyx_v_self->dt)->fill_random(__pyx_t_10, __pyx_t_11);

    /* "ctf/tensor.pyx":890
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex64:
 */
    goto __pyx_L5;
  }

  /* "ctf/tensor.pyx":892
 *         elif self.dtype == np.float64:
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex128:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":893
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex64:
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.complex128:
 *             (<Tensor[complex128_t]*>self.dt).fill_random(mn,mx)
 */
    __pyx_t_12 = __Pyx_PyComplex_As___pyx_t_float_complex(__pyx_v_mn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyComplex_As___pyx_t_float_complex(__pyx_v_mx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
    ((CTF::Tensor<__pyx_t_float_complex>  *)__pyx_v_self->dt)->fill_random(__pyx_t_12, __pyx_t_13);

    /* "ctf/tensor.pyx":892
 *         elif self.dtype == np.float64:
 *             (<Tensor[double]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex128:
 */
    goto __pyx_L5;
  }

  /* "ctf/tensor.pyx":894
 *         elif self.dtype == np.complex64:
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *             (<Tensor[complex128_t]*>self.dt).fill_random(mn,mx)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex128); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":895
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex128:
 *             (<Tensor[complex128_t]*>self.dt).fill_random(mn,mx)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 */
    __pyx_t_14 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_v_mn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_v_mx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L1_error)
    ((CTF::Tensor<__pyx_t_double_complex>  *)__pyx_v_self->dt)->fill_random(__pyx_t_14, __pyx_t_15);

    /* "ctf/tensor.pyx":894
 *         elif self.dtype == np.complex64:
 *             (<Tensor[complex64_t]*>self.dt).fill_random(mn,mx)
 *         elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *             (<Tensor[complex128_t]*>self.dt).fill_random(mn,mx)
 *         else:
 */
    goto __pyx_L5;
  }

  /* "ctf/tensor.pyx":897
 *             (<Tensor[complex128_t]*>self.dt).fill_random(mn,mx)
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 * 
 *     def fill_sp_random(self, mn=None, mx=None, frac_sp=None):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 897, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "ctf/tensor.pyx":851
 *         return ctf.tensor_aux.dot(self, other)
 * 
 *     def fill_random(self, mn=None, mx=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_random(mn=None, mx=None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.fill_random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mn);
  __Pyx_XDECREF(__pyx_v_mx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":899
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 * 
 *     def fill_sp_random(self, mn=None, mx=None, frac_sp=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_sp_random(mn=None, mx=None, frac_sp=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_59fill_sp_random(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_58fill_sp_random, "\n        tensor.fill_sp_random(mn=None, mx=None, frac_sp=None)\n        Fill random elements to a sparse tensor.\n\n        Parameters\n        ----------\n        mn: int or float\n            The range of random number from, default 0.\n\n        mx: int or float\n            The range of random number to, default 1.\n\n        frac_sp: float\n            The percent of non-zero elements.\n\n        See Also\n        --------\n        ctf: fill_random()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.tensor([3, 3], sp=1)\n        >>> a.fill_sp_random(frac_sp=0.2)\n        >>> a\n        array([[0.96985989, 0.        , 0.        ],\n               [0.        , 0.        , 0.10310342],\n               [0.        , 0.        , 0.        ]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_59fill_sp_random = {"fill_sp_random", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_59fill_sp_random, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_58fill_sp_random};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_59fill_sp_random(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_mn = 0;
  PyObject *__pyx_v_mx = 0;
  PyObject *__pyx_v_frac_sp = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_sp_random (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mn,&__pyx_n_s_mx,&__pyx_n_s_frac_sp,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mn);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mx);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_frac_sp);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fill_sp_random") < 0)) __PYX_ERR(0, 899, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mn = values[0];
    __pyx_v_mx = values[1];
    __pyx_v_frac_sp = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_sp_random", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 899, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.fill_sp_random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_58fill_sp_random(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_mn, __pyx_v_mx, __pyx_v_frac_sp);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_58fill_sp_random(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_mn, PyObject *__pyx_v_mx, PyObject *__pyx_v_frac_sp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int32_t __pyx_t_4;
  int32_t __pyx_t_5;
  double __pyx_t_6;
  int64_t __pyx_t_7;
  int64_t __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_sp_random", 0);
  __Pyx_INCREF(__pyx_v_mn);
  __Pyx_INCREF(__pyx_v_mx);
  __Pyx_INCREF(__pyx_v_frac_sp);

  /* "ctf/tensor.pyx":929
 *                [0.        , 0.        , 0.        ]])
 *         """
 *         if mn is None:             # <<<<<<<<<<<<<<
 *             mn = 0
 *         if mx is None:
 */
  __pyx_t_1 = (__pyx_v_mn == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":930
 *         """
 *         if mn is None:
 *             mn = 0             # <<<<<<<<<<<<<<
 *         if mx is None:
 *             mx = 1
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_mn, __pyx_int_0);

    /* "ctf/tensor.pyx":929
 *                [0.        , 0.        , 0.        ]])
 *         """
 *         if mn is None:             # <<<<<<<<<<<<<<
 *             mn = 0
 *         if mx is None:
 */
  }

  /* "ctf/tensor.pyx":931
 *         if mn is None:
 *             mn = 0
 *         if mx is None:             # <<<<<<<<<<<<<<
 *             mx = 1
 *         if frac_sp is None:
 */
  __pyx_t_1 = (__pyx_v_mx == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":932
 *             mn = 0
 *         if mx is None:
 *             mx = 1             # <<<<<<<<<<<<<<
 *         if frac_sp is None:
 *             frac_sp = .1
 */
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_DECREF_SET(__pyx_v_mx, __pyx_int_1);

    /* "ctf/tensor.pyx":931
 *         if mn is None:
 *             mn = 0
 *         if mx is None:             # <<<<<<<<<<<<<<
 *             mx = 1
 *         if frac_sp is None:
 */
  }

  /* "ctf/tensor.pyx":933
 *         if mx is None:
 *             mx = 1
 *         if frac_sp is None:             # <<<<<<<<<<<<<<
 *             frac_sp = .1
 *         if self.dtype == np.int32:
 */
  __pyx_t_1 = (__pyx_v_frac_sp == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":934
 *             mx = 1
 *         if frac_sp is None:
 *             frac_sp = .1             # <<<<<<<<<<<<<<
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 */
    __Pyx_INCREF(__pyx_float__1);
    __Pyx_DECREF_SET(__pyx_v_frac_sp, __pyx_float__1);

    /* "ctf/tensor.pyx":933
 *         if mx is None:
 *             mx = 1
 *         if frac_sp is None:             # <<<<<<<<<<<<<<
 *             frac_sp = .1
 *         if self.dtype == np.int32:
 */
  }

  /* "ctf/tensor.pyx":935
 *         if frac_sp is None:
 *             frac_sp = .1
 *         if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.int64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":936
 *             frac_sp = .1
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int32_t(__pyx_v_mn); if (unlikely((__pyx_t_4 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_int32_t(__pyx_v_mx); if (unlikely((__pyx_t_5 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_frac_sp); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
    ((CTF::Tensor<int32_t>  *)__pyx_v_self->dt)->fill_sp_random(__pyx_t_4, __pyx_t_5, __pyx_t_6);

    /* "ctf/tensor.pyx":935
 *         if frac_sp is None:
 *             frac_sp = .1
 *         if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.int64:
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":937
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float32:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":938
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 */
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_v_mn); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_v_mx); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_frac_sp); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)
    ((CTF::Tensor<int64_t>  *)__pyx_v_self->dt)->fill_sp_random(__pyx_t_7, __pyx_t_8, __pyx_t_6);

    /* "ctf/tensor.pyx":937
 *         if self.dtype == np.int32:
 *             (<Tensor[int32_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float32:
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":939
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":940
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.float64:
 *             (<Tensor[double]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 */
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_mn); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L1_error)
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_mx); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_frac_sp); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L1_error)
    ((CTF::Tensor<float>  *)__pyx_v_self->dt)->fill_sp_random(__pyx_t_9, __pyx_t_10, __pyx_t_6);

    /* "ctf/tensor.pyx":939
 *         elif self.dtype == np.int64:
 *             (<Tensor[int64_t]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float64:
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":941
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             (<Tensor[double]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":942
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float64:
 *             (<Tensor[double]*>self.dt).fill_sp_random(mn,mx,frac_sp)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_mn); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_mx); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_frac_sp); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
    ((CTF::Tensor<double>  *)__pyx_v_self->dt)->fill_sp_random(__pyx_t_6, __pyx_t_11, __pyx_t_12);

    /* "ctf/tensor.pyx":941
 *         elif self.dtype == np.float32:
 *             (<Tensor[float]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             (<Tensor[double]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         else:
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":944
 *             (<Tensor[double]*>self.dt).fill_sp_random(mn,mx,frac_sp)
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 * 
 *     # read data from file, assumes different data storage format for sparse vs dense tensor
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 944, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "ctf/tensor.pyx":899
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 * 
 *     def fill_sp_random(self, mn=None, mx=None, frac_sp=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_sp_random(mn=None, mx=None, frac_sp=None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.fill_sp_random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mn);
  __Pyx_XDECREF(__pyx_v_mx);
  __Pyx_XDECREF(__pyx_v_frac_sp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":950
 *     # for sparse tensor, file assumed to be text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def read_from_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_61read_from_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_61read_from_file = {"read_from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_61read_from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_61read_from_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_with_vals = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_with_vals,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_path)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_with_vals);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_from_file") < 0)) __PYX_ERR(0, 950, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path = values[0];
    __pyx_v_with_vals = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_file", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 950, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.read_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_60read_from_file(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_path, __pyx_v_with_vals);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_60read_from_file(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_with_vals) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  char *__pyx_t_6;
  bool __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_file", 1);

  /* "ctf/tensor.pyx":951
 *     #   or i_1 ... i_order if with_vals=False
 *     def read_from_file(self, path, with_vals=True):
 *         if self.sp == True:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 */
  __pyx_t_1 = (__pyx_v_self->sp == 1);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":952
 *     def read_from_file(self, path, with_vals=True):
 *         if self.sp == True:
 *             if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":953
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L1_error)
      ((CTF::Tensor<int32_t>  *)__pyx_v_self->dt)->read_sparse_from_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":952
 *     def read_from_file(self, path, with_vals=True):
 *         if self.sp == True:
 *             if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":954
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":955
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 955, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 955, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 955, __pyx_L1_error)
      ((CTF::Tensor<int64_t>  *)__pyx_v_self->dt)->read_sparse_from_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":954
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":956
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":957
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float64:
 *                 (< Tensor[double] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 957, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 957, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 957, __pyx_L1_error)
      ((CTF::Tensor<float>  *)__pyx_v_self->dt)->read_sparse_from_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":956
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":958
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[double] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":959
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:
 *                 (< Tensor[double] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L1_error)
      ((CTF::Tensor<double>  *)__pyx_v_self->dt)->read_sparse_from_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":958
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[double] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":961
 *                 (< Tensor[double] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 *         else:
 *             #FIXME: to be compatible with C++ maybe should reorder
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 961, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "ctf/tensor.pyx":951
 *     #   or i_1 ... i_order if with_vals=False
 *     def read_from_file(self, path, with_vals=True):
 *         if self.sp == True:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).read_sparse_from_file(path.encode(), with_vals, True)
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":964
 *         else:
 *             #FIXME: to be compatible with C++ maybe should reorder
 *             self.dt.read_dense_from_file(path.encode())             # <<<<<<<<<<<<<<
 * 
 *     # write data to file, assumes different data storage format for sparse vs dense tensor
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 964, __pyx_L1_error)
    __pyx_v_self->dt->read_dense_from_file(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":950
 *     # for sparse tensor, file assumed to be text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def read_from_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.read_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":970
 *     # for sparse tensor, file created is text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def write_to_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_63write_to_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_63write_to_file = {"write_to_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_63write_to_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_63write_to_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_with_vals = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_with_vals,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_path)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_with_vals);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "write_to_file") < 0)) __PYX_ERR(0, 970, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path = values[0];
    __pyx_v_with_vals = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_file", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 970, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.write_to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_62write_to_file(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_path, __pyx_v_with_vals);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_62write_to_file(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_with_vals) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  char *__pyx_t_6;
  bool __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_file", 1);

  /* "ctf/tensor.pyx":971
 *     #   or i_1 ... i_order if with_vals=False
 *     def write_to_file(self, path, with_vals=True):
 *         if self.sp == True:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 */
  __pyx_t_1 = (__pyx_v_self->sp == 1);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":972
 *     def write_to_file(self, path, with_vals=True):
 *         if self.sp == True:
 *             if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":973
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L1_error)
      ((CTF::Tensor<int32_t>  *)__pyx_v_self->dt)->write_sparse_to_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":972
 *     def write_to_file(self, path, with_vals=True):
 *         if self.sp == True:
 *             if self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":974
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":975
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)
      ((CTF::Tensor<int64_t>  *)__pyx_v_self->dt)->write_sparse_to_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":974
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":976
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":977
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float64:
 *                 (< Tensor[double] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L1_error)
      ((CTF::Tensor<float>  *)__pyx_v_self->dt)->write_sparse_to_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":976
 *             elif self.dtype == np.int64:
 *                 (< Tensor[int64_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":978
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[double] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":979
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:
 *                 (< Tensor[double] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 979, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_with_vals); if (unlikely((__pyx_t_7 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L1_error)
      ((CTF::Tensor<double>  *)__pyx_v_self->dt)->write_sparse_to_file(__pyx_t_6, __pyx_t_7, 1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":978
 *             elif self.dtype == np.float32:
 *                 (< Tensor[float] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 (< Tensor[double] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":981
 *                 (< Tensor[double] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dt.write_dense_to_file(path.encode())
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 981, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "ctf/tensor.pyx":971
 *     #   or i_1 ... i_order if with_vals=False
 *     def write_to_file(self, path, with_vals=True):
 *         if self.sp == True:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.int32:
 *                 (< Tensor[int32_t] * > self.dt).write_sparse_to_file(path.encode(), with_vals, True)
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":983
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         else:
 *             self.dt.write_dense_to_file(path.encode())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L1_error)
    __pyx_v_self->dt->write_dense_to_file(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":970
 *     # for sparse tensor, file created is text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def write_to_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.write_to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":987
 * 
 *     # the function that call the exp_helper in the C++ level
 *     def _exp_python(self, tensor A, cast = None, dtype = None):             # <<<<<<<<<<<<<<
 *         # when the casting is default that is "same kind"
 *         if cast is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_65_exp_python(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_65_exp_python = {"_exp_python", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_65_exp_python, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_65_exp_python(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A = 0;
  PyObject *__pyx_v_cast = 0;
  PyObject *__pyx_v_dtype = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_exp_python (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_cast,&__pyx_n_s_dtype,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cast);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_exp_python") < 0)) __PYX_ERR(0, 987, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_A = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
    __pyx_v_cast = values[1];
    __pyx_v_dtype = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_exp_python", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 987, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._exp_python", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_3ctf_6tensor_tensor, 1, "A", 0))) __PYX_ERR(0, 987, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_64_exp_python(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_A, __pyx_v_cast, __pyx_v_dtype);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_64_exp_python(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A, PyObject *__pyx_v_cast, PyObject *__pyx_v_dtype) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_exp_python", 1);

  /* "ctf/tensor.pyx":989
 *     def _exp_python(self, tensor A, cast = None, dtype = None):
 *         # when the casting is default that is "same kind"
 *         if cast is None:             # <<<<<<<<<<<<<<
 *             if A.dtype == np.int8:#
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 */
  __pyx_t_1 = (__pyx_v_cast == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":990
 *         # when the casting is default that is "same kind"
 *         if cast is None:
 *             if A.dtype == np.int8:#             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int16:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":991
 *         if cast is None:
 *             if A.dtype == np.int8:#
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.int16:
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<int8_t,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":990
 *         # when the casting is default that is "same kind"
 *         if cast is None:
 *             if A.dtype == np.int8:#             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int16:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":992
 *             if A.dtype == np.int8:#
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":993
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int16:
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.int32:
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<int16_t,float>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":992
 *             if A.dtype == np.int8:#
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int32:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":994
 *             elif A.dtype == np.int16:
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":995
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int32:
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.int64:
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<int32_t,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":994
 *             elif A.dtype == np.int16:
 *                 self.dt.exp_helper[int16_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int64:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":996
 *             elif A.dtype == np.int32:
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float16:#
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":997
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int64:
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.float16:#
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<int64_t,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":996
 *             elif A.dtype == np.int32:
 *                 self.dt.exp_helper[int32_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float16:#
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":998
 *             elif A.dtype == np.int64:
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float16:#             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":999
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float16:#
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.float32:
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<int64_t,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":998
 *             elif A.dtype == np.int64:
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float16:#             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float32:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":1000
 *             elif A.dtype == np.float16:#
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)
 *             elif A.dtype == np.float64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1001
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float32:
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.float64:
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<float,float>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":1000
 *             elif A.dtype == np.float16:#
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)
 *             elif A.dtype == np.float64:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":1002
 *             elif A.dtype == np.float32:
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)
 *             elif A.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float128:#
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1003
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)
 *             elif A.dtype == np.float64:
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.float128:#
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<double,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":1002
 *             elif A.dtype == np.float32:
 *                 self.dt.exp_helper[float, float](<ctensor*>A.dt)
 *             elif A.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float128:#
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":1004
 *             elif A.dtype == np.float64:
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float128:#             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float128); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1005
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float128:#
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("exponentiation not supported for these types")
 */
      __pyx_v_self->dt->exp_helper<double,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":1004
 *             elif A.dtype == np.float64:
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             elif A.dtype == np.float128:#             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "ctf/tensor.pyx":1007
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             else:
 *                 raise ValueError("exponentiation not supported for these types")             # <<<<<<<<<<<<<<
 * #            elif A.dtype == np.complex64:
 * #                self.dt.exp_helper[complex64_t, complex64_t](<ctensor*>A.dt)
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1007, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "ctf/tensor.pyx":989
 *     def _exp_python(self, tensor A, cast = None, dtype = None):
 *         # when the casting is default that is "same kind"
 *         if cast is None:             # <<<<<<<<<<<<<<
 *             if A.dtype == np.int8:#
 *                 self.dt.exp_helper[int8_t, double](<ctensor*>A.dt)
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":1014
 *             #elif A.dtype == np.complex256:#
 *                 #self.dt.exp_helper[double complex, double complex](<ctensor*>A.dt)
 *         elif cast == 'unsafe':             # <<<<<<<<<<<<<<
 *             # we can add more types
 *             if A.dtype == np.int64 and dtype == np.float32:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_cast, __pyx_n_s_unsafe, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1014, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1016
 *         elif cast == 'unsafe':
 *             # we can add more types
 *             if A.dtype == np.int64 and dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int64 and dtype == np.float64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1017
 *             # we can add more types
 *             if A.dtype == np.int64 and dtype == np.float32:
 *                 self.dt.exp_helper[int64_t, float](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             elif A.dtype == np.int64 and dtype == np.float64:
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 */
      __pyx_v_self->dt->exp_helper<int64_t,float>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":1016
 *         elif cast == 'unsafe':
 *             # we can add more types
 *             if A.dtype == np.int64 and dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int64 and dtype == np.float64:
 */
      goto __pyx_L5;
    }

    /* "ctf/tensor.pyx":1018
 *             if A.dtype == np.int64 and dtype == np.float32:
 *                 self.dt.exp_helper[int64_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int64 and dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_A->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L8_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L8_bool_binop_done:;
    if (likely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1019
 *                 self.dt.exp_helper[int64_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int64 and dtype == np.float64:
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("exponentiation not supported for these types")
 */
      __pyx_v_self->dt->exp_helper<int64_t,double>(((CTF_int::tensor *)__pyx_v_A->dt));

      /* "ctf/tensor.pyx":1018
 *             if A.dtype == np.int64 and dtype == np.float32:
 *                 self.dt.exp_helper[int64_t, float](<ctensor*>A.dt)
 *             elif A.dtype == np.int64 and dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "ctf/tensor.pyx":1021
 *                 self.dt.exp_helper[int64_t, double](<ctensor*>A.dt)
 *             else:
 *                 raise ValueError("exponentiation not supported for these types")             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("exponentiation not supported for these types")
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1021, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "ctf/tensor.pyx":1014
 *             #elif A.dtype == np.complex256:#
 *                 #self.dt.exp_helper[double complex, double complex](<ctensor*>A.dt)
 *         elif cast == 'unsafe':             # <<<<<<<<<<<<<<
 *             # we can add more types
 *             if A.dtype == np.int64 and dtype == np.float32:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":1023
 *                 raise ValueError("exponentiation not supported for these types")
 *         else:
 *             raise ValueError("exponentiation not supported for these types")             # <<<<<<<<<<<<<<
 * 
 *     # issue: when shape contains 1 such as [3,4,1], it seems that CTF in C++ does not support sum over empty dims -> sum over 1.
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1023, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":987
 * 
 *     # the function that call the exp_helper in the C++ level
 *     def _exp_python(self, tensor A, cast = None, dtype = None):             # <<<<<<<<<<<<<<
 *         # when the casting is default that is "same kind"
 *         if cast is None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor._exp_python", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1027
 *     # issue: when shape contains 1 such as [3,4,1], it seems that CTF in C++ does not support sum over empty dims -> sum over 1.
 * 
 *     def all(tensor self, axis=None, out=None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         all(axis=None, out=None, keepdims = False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_67all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_66all, "\n        all(axis=None, out=None, keepdims = False)\n        Return whether given an axis elements are True.\n\n        Parameters\n        ----------\n        axis: None or int, optional\n            Currently not supported in CTF Python.\n\n        out: tensor, optional\n            Currently not supported in CTF Python.\n\n        keepdims : bool, optional\n            Currently not supported in CTF Python.\n\n        Returns\n        -------\n        output: tensor_like\n            Output tensor or scalar.\n\n        See Also\n        --------\n        ctf: ctf.all\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[0, 1], [1, 1]])\n        >>> a.all()\n        False\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_67all = {"all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_67all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_66all};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_67all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_out = 0;
  PyObject *__pyx_v_keepdims = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_out,&__pyx_n_s_keepdims,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_out);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_keepdims);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "all") < 0)) __PYX_ERR(0, 1027, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
    __pyx_v_out = values[1];
    __pyx_v_keepdims = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("all", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 1027, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_66all(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_axis, __pyx_v_out, __pyx_v_keepdims);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_66all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_out, PyObject *__pyx_v_keepdims) {
  PyObject *__pyx_v_dims_keep = NULL;
  Py_ssize_t __pyx_v_i;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B = NULL;
  PyObject *__pyx_v_index_A = NULL;
  PyObject *__pyx_v_dim_keep = NULL;
  PyObject *__pyx_v_ret = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_C = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_dim = NULL;
  PyObject *__pyx_v_dim_ret = NULL;
  PyObject *__pyx_v_index_temp = NULL;
  PyObject *__pyx_v_index_B = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("all", 0);
  __Pyx_INCREF(__pyx_v_axis);
  __Pyx_INCREF(__pyx_v_keepdims);

  /* "ctf/tensor.pyx":1059
 *         False
 *         """
 *         if keepdims is None:             # <<<<<<<<<<<<<<
 *             keepdims = False
 *         if axis is None:
 */
  __pyx_t_1 = (__pyx_v_keepdims == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1060
 *         """
 *         if keepdims is None:
 *             keepdims = False             # <<<<<<<<<<<<<<
 *         if axis is None:
 *             if out is not None:
 */
    __Pyx_INCREF(Py_False);
    __Pyx_DECREF_SET(__pyx_v_keepdims, Py_False);

    /* "ctf/tensor.pyx":1059
 *         False
 *         """
 *         if keepdims is None:             # <<<<<<<<<<<<<<
 *             keepdims = False
 *         if axis is None:
 */
  }

  /* "ctf/tensor.pyx":1061
 *         if keepdims is None:
 *             keepdims = False
 *         if axis is None:             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if type(out) != np.ndarray:
 */
  __pyx_t_1 = (__pyx_v_axis == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1062
 *             keepdims = False
 *         if axis is None:
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 */
    __pyx_t_1 = (__pyx_v_out != Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1063
 *         if axis is None:
 *             if out is not None:
 *                 if type(out) != np.ndarray:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if out.shape != () and keepdims == False:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_out)), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1064
 *             if out is not None:
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')             # <<<<<<<<<<<<<<
 *                 if out.shape != () and keepdims == False:
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 1064, __pyx_L1_error)

        /* "ctf/tensor.pyx":1063
 *         if axis is None:
 *             if out is not None:
 *                 if type(out) != np.ndarray:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if out.shape != () and keepdims == False:
 */
      }

      /* "ctf/tensor.pyx":1065
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if out.shape != () and keepdims == False:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 *                 if keepdims == True:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_empty_tuple, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1065, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_4) {
      } else {
        __pyx_t_1 = __pyx_t_4;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_keepdims, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1065, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __pyx_t_4;
      __pyx_L8_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1066
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if out.shape != () and keepdims == False:
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')             # <<<<<<<<<<<<<<
 *                 if keepdims == True:
 *                     dims_keep = []
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1066, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1066, __pyx_L1_error)

        /* "ctf/tensor.pyx":1065
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if out.shape != () and keepdims == False:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 *                 if keepdims == True:
 */
      }

      /* "ctf/tensor.pyx":1067
 *                 if out.shape != () and keepdims == False:
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 *                 if keepdims == True:             # <<<<<<<<<<<<<<
 *                     dims_keep = []
 *                     for i in range(len(self.shape)):
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1068
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 *                 if keepdims == True:
 *                     dims_keep = []             # <<<<<<<<<<<<<<
 *                     for i in range(len(self.shape)):
 *                         dims_keep.append(1)
 */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_v_dims_keep = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1069
 *                 if keepdims == True:
 *                     dims_keep = []
 *                     for i in range(len(self.shape)):             # <<<<<<<<<<<<<<
 *                         dims_keep.append(1)
 *                     dims_keep = tuple(dims_keep)
 */
        __pyx_t_3 = __pyx_v_self->shape;
        __Pyx_INCREF(__pyx_t_3);
        if (unlikely(__pyx_t_3 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          __PYX_ERR(0, 1069, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1069, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = __pyx_t_5;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_i = __pyx_t_7;

          /* "ctf/tensor.pyx":1070
 *                     dims_keep = []
 *                     for i in range(len(self.shape)):
 *                         dims_keep.append(1)             # <<<<<<<<<<<<<<
 *                     dims_keep = tuple(dims_keep)
 *                     if out.shape != dims_keep:
 */
          __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_dims_keep, __pyx_int_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1070, __pyx_L1_error)
        }

        /* "ctf/tensor.pyx":1071
 *                     for i in range(len(self.shape)):
 *                         dims_keep.append(1)
 *                     dims_keep = tuple(dims_keep)             # <<<<<<<<<<<<<<
 *                     if out.shape != dims_keep:
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 */
        __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_dims_keep); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_dims_keep, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1072
 *                         dims_keep.append(1)
 *                     dims_keep = tuple(dims_keep)
 *                     if out.shape != dims_keep:             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             B = tensor((1,), dtype=np.bool_)
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1072, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_dims_keep, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1072, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(__pyx_t_1)) {

          /* "ctf/tensor.pyx":1073
 *                     dims_keep = tuple(dims_keep)
 *                     if out.shape != dims_keep:
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')             # <<<<<<<<<<<<<<
 *             B = tensor((1,), dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 1073, __pyx_L1_error)

          /* "ctf/tensor.pyx":1072
 *                         dims_keep.append(1)
 *                     dims_keep = tuple(dims_keep)
 *                     if out.shape != dims_keep:             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             B = tensor((1,), dtype=np.bool_)
 */
        }

        /* "ctf/tensor.pyx":1067
 *                 if out.shape != () and keepdims == False:
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 *                 if keepdims == True:             # <<<<<<<<<<<<<<
 *                     dims_keep = []
 *                     for i in range(len(self.shape)):
 */
      }

      /* "ctf/tensor.pyx":1062
 *             keepdims = False
 *         if axis is None:
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 */
    }

    /* "ctf/tensor.pyx":1074
 *                     if out.shape != dims_keep:
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             B = tensor((1,), dtype=np.bool_)             # <<<<<<<<<<<<<<
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             if self.dtype == np.float64:
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_bool); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_tuple__30, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "ctf/tensor.pyx":1075
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             B = tensor((1,), dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_num_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_3};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1075, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_v_index_A = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "ctf/tensor.pyx":1076
 *             B = tensor((1,), dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1077
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1077, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1077, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1077, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1077, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
      CTF_int::all_helper<double>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1076
 *             B = tensor((1,), dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int64:
 */
      goto __pyx_L14;
    }

    /* "ctf/tensor.pyx":1078
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1079
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1079, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1079, __pyx_L1_error)
      CTF_int::all_helper<int64_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ctf/tensor.pyx":1078
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int32:
 */
      goto __pyx_L14;
    }

    /* "ctf/tensor.pyx":1080
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int16:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1081
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1081, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1081, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1081, __pyx_L1_error)
      CTF_int::all_helper<int32_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1080
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int16:
 */
      goto __pyx_L14;
    }

    /* "ctf/tensor.pyx":1082
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int8:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int16); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1083
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1083, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L1_error)
      CTF_int::all_helper<int16_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ctf/tensor.pyx":1082
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int8:
 */
      goto __pyx_L14;
    }

    /* "ctf/tensor.pyx":1084
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.bool_:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1085
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1085, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1085, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L1_error)
      CTF_int::all_helper<int8_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1084
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.bool_:
 */
      goto __pyx_L14;
    }

    /* "ctf/tensor.pyx":1086
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             if out is not None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bool); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1087
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if out.dtype != B.get_type():
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1087, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L1_error)
      CTF_int::all_helper<bool>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ctf/tensor.pyx":1086
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             if out is not None:
 */
    }
    __pyx_L14:;

    /* "ctf/tensor.pyx":1088
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:
 */
    __pyx_t_1 = (__pyx_v_out != Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1089
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             if out is not None:
 *                 if out.dtype != B.get_type():             # <<<<<<<<<<<<<<
 *                     if keepdims == True:
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_get_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1089, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_9, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1090
 *             if out is not None:
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:             # <<<<<<<<<<<<<<
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                         ret = ctf.tensor_aux.reshape(B,dim_keep)
 */
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1090, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1090, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_1) {

          /* "ctf/tensor.pyx":1091
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)             # <<<<<<<<<<<<<<
 *                         ret = ctf.tensor_aux.reshape(B,dim_keep)
 *                     C = tensor((1,), dtype=out.dtype)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ones); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __pyx_v_self->shape;
          __Pyx_INCREF(__pyx_t_3);
          if (unlikely(__pyx_t_3 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
            __PYX_ERR(0, 1091, __pyx_L1_error)
          }
          __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_3);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int64); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_dim_keep = __pyx_t_14;
          __pyx_t_14 = 0;

          /* "ctf/tensor.pyx":1092
 *                     if keepdims == True:
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                         ret = ctf.tensor_aux.reshape(B,dim_keep)             # <<<<<<<<<<<<<<
 *                     C = tensor((1,), dtype=out.dtype)
 *                     B._convert_type(C)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1092, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1092, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1092, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_9, ((PyObject *)__pyx_v_B), __pyx_v_dim_keep};
            __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1092, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_v_ret = __pyx_t_14;
          __pyx_t_14 = 0;

          /* "ctf/tensor.pyx":1090
 *             if out is not None:
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:             # <<<<<<<<<<<<<<
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                         ret = ctf.tensor_aux.reshape(B,dim_keep)
 */
        }

        /* "ctf/tensor.pyx":1093
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                         ret = ctf.tensor_aux.reshape(B,dim_keep)
 *                     C = tensor((1,), dtype=out.dtype)             # <<<<<<<<<<<<<<
 *                     B._convert_type(C)
 *                     vals = C.read([0])
 */
        __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_tuple__30, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_v_C = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_3);
        __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1094
 *                         ret = ctf.tensor_aux.reshape(B,dim_keep)
 *                     C = tensor((1,), dtype=out.dtype)
 *                     B._convert_type(C)             # <<<<<<<<<<<<<<
 *                     vals = C.read([0])
 *                     return vals.reshape(out.shape)
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = NULL;
        __pyx_t_11 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_11 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, ((PyObject *)__pyx_v_C)};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1094, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1095
 *                     C = tensor((1,), dtype=out.dtype)
 *                     B._convert_type(C)
 *                     vals = C.read([0])             # <<<<<<<<<<<<<<
 *                     return vals.reshape(out.shape)
 *                 else:
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_C), __pyx_n_s_read); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1095, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1095, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_9, 0, __pyx_int_0)) __PYX_ERR(0, 1095, __pyx_L1_error);
        __pyx_t_2 = NULL;
        __pyx_t_11 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_11 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_9};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1095, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __pyx_v_vals = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1096
 *                     B._convert_type(C)
 *                     vals = C.read([0])
 *                     return vals.reshape(out.shape)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError("CTF PYTHON ERROR: invalid output dtype")
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_vals, __pyx_n_s_reshape); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = NULL;
        __pyx_t_11 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_11 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_9};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1096, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "ctf/tensor.pyx":1089
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             if out is not None:
 *                 if out.dtype != B.get_type():             # <<<<<<<<<<<<<<
 *                     if keepdims == True:
 *                         dim_keep = np.ones(len(self.shape),dtype=np.int64)
 */
      }

      /* "ctf/tensor.pyx":1098
 *                     return vals.reshape(out.shape)
 *                 else:
 *                     raise ValueError("CTF PYTHON ERROR: invalid output dtype")             # <<<<<<<<<<<<<<
 *                     #if keepdims == True:
 *                     #    dim_keep = np.ones(len(self.shape),dtype=np.int64)
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1098, __pyx_L1_error)
      }

      /* "ctf/tensor.pyx":1088
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), "".encode())
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:
 */
    }

    /* "ctf/tensor.pyx":1105
 *                     #inds, vals = B.read_local()
 *                     #return vals.reshape(out.shape)
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                 ret = ctf.tensor_aux.reshape(B,dim_keep)
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1105, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1106
 *                     #return vals.reshape(out.shape)
 *             if keepdims == True:
 *                 dim_keep = np.ones(len(self.shape),dtype=np.int64)             # <<<<<<<<<<<<<<
 *                 ret = ctf.tensor_aux.reshape(B,dim_keep)
 *                 return ret
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ones); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_v_self->shape;
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_t_3 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 1106, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_dim_keep = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "ctf/tensor.pyx":1107
 *             if keepdims == True:
 *                 dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                 ret = ctf.tensor_aux.reshape(B,dim_keep)             # <<<<<<<<<<<<<<
 *                 return ret
 *             vals = B.read([0])
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, ((PyObject *)__pyx_v_B), __pyx_v_dim_keep};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_v_ret = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "ctf/tensor.pyx":1108
 *                 dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                 ret = ctf.tensor_aux.reshape(B,dim_keep)
 *                 return ret             # <<<<<<<<<<<<<<
 *             vals = B.read([0])
 *             return vals[0]
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1105
 *                     #inds, vals = B.read_local()
 *                     #return vals.reshape(out.shape)
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 dim_keep = np.ones(len(self.shape),dtype=np.int64)
 *                 ret = ctf.tensor_aux.reshape(B,dim_keep)
 */
    }

    /* "ctf/tensor.pyx":1109
 *                 ret = ctf.tensor_aux.reshape(B,dim_keep)
 *                 return ret
 *             vals = B.read([0])             # <<<<<<<<<<<<<<
 *             return vals[0]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_9, 0, __pyx_int_0)) __PYX_ERR(0, 1109, __pyx_L1_error);
    __pyx_t_14 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_9};
      __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_vals = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "ctf/tensor.pyx":1110
 *                 return ret
 *             vals = B.read([0])
 *             return vals[0]             # <<<<<<<<<<<<<<
 * 
 *         # when the axis is not None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_vals, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1061
 *         if keepdims is None:
 *             keepdims = False
 *         if axis is None:             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if type(out) != np.ndarray:
 */
  }

  /* "ctf/tensor.pyx":1113
 * 
 *         # when the axis is not None
 *         dim = self.shape             # <<<<<<<<<<<<<<
 *         if isinstance(axis, (int, np.integer)):
 *             if axis < 0:
 */
  __pyx_t_10 = __pyx_v_self->shape;
  __Pyx_INCREF(__pyx_t_10);
  __pyx_v_dim = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":1114
 *         # when the axis is not None
 *         dim = self.shape
 *         if isinstance(axis, (int, np.integer)):             # <<<<<<<<<<<<<<
 *             if axis < 0:
 *                 axis += len(dim)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_axis); 
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_axis, __pyx_t_3); 
  __pyx_t_1 = __pyx_t_4;
  __pyx_L20_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1115
 *         dim = self.shape
 *         if isinstance(axis, (int, np.integer)):
 *             if axis < 0:             # <<<<<<<<<<<<<<
 *                 axis += len(dim)
 *             if axis >= len(dim) or axis < 0:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_axis, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1116
 *         if isinstance(axis, (int, np.integer)):
 *             if axis < 0:
 *                 axis += len(dim)             # <<<<<<<<<<<<<<
 *             if axis >= len(dim) or axis < 0:
 *                 raise ValueError("'axis' entry is out of bounds")
 */
      if (unlikely(__pyx_v_dim == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 1116, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1116, __pyx_L1_error)
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_v_axis, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_axis, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "ctf/tensor.pyx":1115
 *         dim = self.shape
 *         if isinstance(axis, (int, np.integer)):
 *             if axis < 0:             # <<<<<<<<<<<<<<
 *                 axis += len(dim)
 *             if axis >= len(dim) or axis < 0:
 */
    }

    /* "ctf/tensor.pyx":1117
 *             if axis < 0:
 *                 axis += len(dim)
 *             if axis >= len(dim) or axis < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("'axis' entry is out of bounds")
 *             dim_ret = np.delete(dim, axis)
 */
    if (unlikely(__pyx_v_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1117, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1117, __pyx_L1_error)
    __pyx_t_10 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_axis, __pyx_t_10, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_axis, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L24_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1118
 *                 axis += len(dim)
 *             if axis >= len(dim) or axis < 0:
 *                 raise ValueError("'axis' entry is out of bounds")             # <<<<<<<<<<<<<<
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1118, __pyx_L1_error)

      /* "ctf/tensor.pyx":1117
 *             if axis < 0:
 *                 axis += len(dim)
 *             if axis >= len(dim) or axis < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("'axis' entry is out of bounds")
 *             dim_ret = np.delete(dim, axis)
 */
    }

    /* "ctf/tensor.pyx":1119
 *             if axis >= len(dim) or axis < 0:
 *                 raise ValueError("'axis' entry is out of bounds")
 *             dim_ret = np.delete(dim, axis)             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if type(out) != np.ndarray:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_delete); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_v_dim, __pyx_v_axis};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_v_dim_ret = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1120
 *                 raise ValueError("'axis' entry is out of bounds")
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 */
    __pyx_t_1 = (__pyx_v_out != Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1121
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 *                 if type(out) != np.ndarray:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) != len(out.shape):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_out)), __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1121, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1122
 *             if out is not None:
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')             # <<<<<<<<<<<<<<
 *                 if len(dim_ret) != len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1122, __pyx_L1_error)

        /* "ctf/tensor.pyx":1121
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 *                 if type(out) != np.ndarray:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) != len(out.shape):
 */
      }

      /* "ctf/tensor.pyx":1123
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) != len(out.shape):             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_dim_ret); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1123, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1123, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = (__pyx_t_5 != __pyx_t_6);
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1124
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) != len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')             # <<<<<<<<<<<<<<
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] != out.shape[i]:
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1124, __pyx_L1_error)

        /* "ctf/tensor.pyx":1123
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) != len(out.shape):             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 */
      }

      /* "ctf/tensor.pyx":1125
 *                 if len(dim_ret) != len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):             # <<<<<<<<<<<<<<
 *                     if dim_ret[i] != out.shape[i]:
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_dim_ret); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1125, __pyx_L1_error)
      __pyx_t_5 = __pyx_t_6;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "ctf/tensor.pyx":1126
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] != out.shape[i]:             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             dim_keep = None
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dim_ret, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyObject_RichCompare(__pyx_t_3, __pyx_t_10, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1126, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1126, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(__pyx_t_1)) {

          /* "ctf/tensor.pyx":1127
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] != out.shape[i]:
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')             # <<<<<<<<<<<<<<
 *             dim_keep = None
 *             if keepdims == True:
 */
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1127, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_Raise(__pyx_t_9, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __PYX_ERR(0, 1127, __pyx_L1_error)

          /* "ctf/tensor.pyx":1126
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] != out.shape[i]:             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             dim_keep = None
 */
        }
      }

      /* "ctf/tensor.pyx":1120
 *                 raise ValueError("'axis' entry is out of bounds")
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 */
    }

    /* "ctf/tensor.pyx":1128
 *                     if dim_ret[i] != out.shape[i]:
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             dim_keep = None             # <<<<<<<<<<<<<<
 *             if keepdims == True:
 *                 dim_keep = dim
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_dim_keep = Py_None;

    /* "ctf/tensor.pyx":1129
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             dim_keep = None
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 dim_keep = dim
 *                 dim_keep[axis] = 1
 */
    __pyx_t_9 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1130
 *             dim_keep = None
 *             if keepdims == True:
 *                 dim_keep = dim             # <<<<<<<<<<<<<<
 *                 dim_keep[axis] = 1
 *                 if out is not None:
 */
      __Pyx_INCREF(__pyx_v_dim);
      __Pyx_DECREF_SET(__pyx_v_dim_keep, __pyx_v_dim);

      /* "ctf/tensor.pyx":1131
 *             if keepdims == True:
 *                 dim_keep = dim
 *                 dim_keep[axis] = 1             # <<<<<<<<<<<<<<
 *                 if out is not None:
 *                     if tuple(dim_keep) != tuple(out.shape):
 */
      if (unlikely((PyObject_SetItem(__pyx_v_dim_keep, __pyx_v_axis, __pyx_int_1) < 0))) __PYX_ERR(0, 1131, __pyx_L1_error)

      /* "ctf/tensor.pyx":1132
 *                 dim_keep = dim
 *                 dim_keep[axis] = 1
 *                 if out is not None:             # <<<<<<<<<<<<<<
 *                     if tuple(dim_keep) != tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 */
      __pyx_t_1 = (__pyx_v_out != Py_None);
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1133
 *                 dim_keep[axis] = 1
 *                 if out is not None:
 *                     if tuple(dim_keep) != tuple(out.shape):             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             index_A = ctf.helper._get_num_str(self.ndim)
 */
        __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_dim_keep); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_9, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1133, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(__pyx_t_1)) {

          /* "ctf/tensor.pyx":1134
 *                 if out is not None:
 *                     if tuple(dim_keep) != tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')             # <<<<<<<<<<<<<<
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             index_temp = ctf.helper._rev_array(index_A)
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1134, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_Raise(__pyx_t_10, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __PYX_ERR(0, 1134, __pyx_L1_error)

          /* "ctf/tensor.pyx":1133
 *                 dim_keep[axis] = 1
 *                 if out is not None:
 *                     if tuple(dim_keep) != tuple(out.shape):             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             index_A = ctf.helper._get_num_str(self.ndim)
 */
        }

        /* "ctf/tensor.pyx":1132
 *                 dim_keep = dim
 *                 dim_keep[axis] = 1
 *                 if out is not None:             # <<<<<<<<<<<<<<
 *                     if tuple(dim_keep) != tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 */
      }

      /* "ctf/tensor.pyx":1129
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             dim_keep = None
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 dim_keep = dim
 *                 dim_keep[axis] = 1
 */
    }

    /* "ctf/tensor.pyx":1135
 *                     if tuple(dim_keep) != tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             index_A = ctf.helper._get_num_str(self.ndim)             # <<<<<<<<<<<<<<
 *             index_temp = ctf.helper._rev_array(index_A)
 *             index_B = index_temp[0:axis] + index_temp[axis+1:len(dim)]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_get_num_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_9};
      __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_index_A = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "ctf/tensor.pyx":1136
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             index_temp = ctf.helper._rev_array(index_A)             # <<<<<<<<<<<<<<
 *             index_B = index_temp[0:axis] + index_temp[axis+1:len(dim)]
 *             index_B = ctf.helper._rev_array(index_B)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_index_A};
      __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_index_temp = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "ctf/tensor.pyx":1137
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             index_temp = ctf.helper._rev_array(index_A)
 *             index_B = index_temp[0:axis] + index_temp[axis+1:len(dim)]             # <<<<<<<<<<<<<<
 *             index_B = ctf.helper._rev_array(index_B)
 *             B = tensor(dim_ret, dtype=np.bool_)
 */
    __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_index_temp, 0, 0, NULL, &__pyx_v_axis, NULL, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_axis, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1137, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1137, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_v_index_temp, 0, __pyx_t_6, &__pyx_t_3, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_index_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1138
 *             index_temp = ctf.helper._rev_array(index_A)
 *             index_B = index_temp[0:axis] + index_temp[axis+1:len(dim)]
 *             index_B = ctf.helper._rev_array(index_B)             # <<<<<<<<<<<<<<
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             if self.dtype == np.float64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ctf); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_helper); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_index_B};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_index_B, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1139
 *             index_B = index_temp[0:axis] + index_temp[axis+1:len(dim)]
 *             index_B = ctf.helper._rev_array(index_B)
 *             B = tensor(dim_ret, dtype=np.bool_)             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_dim_ret);
    __Pyx_GIVEREF(__pyx_v_dim_ret);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_dim_ret)) __PYX_ERR(0, 1139, __pyx_L1_error);
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_bool); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_14);
    __pyx_t_14 = 0;

    /* "ctf/tensor.pyx":1140
 *             index_B = ctf.helper._rev_array(index_B)
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_float64); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1141
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_14); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1141, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1141, __pyx_L1_error)
      CTF_int::all_helper<double>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ctf/tensor.pyx":1140
 *             index_B = ctf.helper._rev_array(index_B)
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:
 */
      goto __pyx_L35;
    }

    /* "ctf/tensor.pyx":1142
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int64); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_14, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1143
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_14); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
      CTF_int::all_helper<int64_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "ctf/tensor.pyx":1142
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:
 */
      goto __pyx_L35;
    }

    /* "ctf/tensor.pyx":1144
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_bool); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1145
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_14); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1145, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1145, __pyx_L1_error)
      CTF_int::all_helper<bool>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ctf/tensor.pyx":1144
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:
 */
      goto __pyx_L35;
    }

    /* "ctf/tensor.pyx":1146
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_14, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1147
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_14); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L1_error)
      CTF_int::all_helper<int32_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "ctf/tensor.pyx":1146
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:
 */
      goto __pyx_L35;
    }

    /* "ctf/tensor.pyx":1148
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_int16); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1149
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_14); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L1_error)
      CTF_int::all_helper<int16_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ctf/tensor.pyx":1148
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:
 */
      goto __pyx_L35;
    }

    /* "ctf/tensor.pyx":1150
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_14, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1151
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if out.dtype != B.get_type():
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_9); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1151, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_14); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1151, __pyx_L1_error)
      CTF_int::all_helper<int8_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "ctf/tensor.pyx":1150
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 */
    }
    __pyx_L35:;

    /* "ctf/tensor.pyx":1152
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:
 */
    __pyx_t_1 = (__pyx_v_out != Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1153
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 *                 if out.dtype != B.get_type():             # <<<<<<<<<<<<<<
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_get_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1153, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_14, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1154
 *             if out is not None:
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:             # <<<<<<<<<<<<<<
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 */
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1154, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_1) {

          /* "ctf/tensor.pyx":1155
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)             # <<<<<<<<<<<<<<
 *                         B._convert_type(C)
 *                         return ctf.tensor_aux.reshape(C, dim_keep)
 */
          __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_dim_ret);
          __Pyx_GIVEREF(__pyx_v_dim_ret);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_dim_ret)) __PYX_ERR(0, 1155, __pyx_L1_error);
          __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_C = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_14);
          __pyx_t_14 = 0;

          /* "ctf/tensor.pyx":1156
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)             # <<<<<<<<<<<<<<
 *                         return ctf.tensor_aux.reshape(C, dim_keep)
 *                     else:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_3 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_C)};
            __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1156, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "ctf/tensor.pyx":1157
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 *                         return ctf.tensor_aux.reshape(C, dim_keep)             # <<<<<<<<<<<<<<
 *                     else:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ctf); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1157, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1157, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_reshape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1157, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_C), __pyx_v_dim_keep};
            __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1157, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_r = __pyx_t_14;
          __pyx_t_14 = 0;
          goto __pyx_L0;

          /* "ctf/tensor.pyx":1154
 *             if out is not None:
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:             # <<<<<<<<<<<<<<
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 */
        }

        /* "ctf/tensor.pyx":1159
 *                         return ctf.tensor_aux.reshape(C, dim_keep)
 *                     else:
 *                         C = tensor(dim_ret, dtype=out.dtype)             # <<<<<<<<<<<<<<
 *                         B._convert_type(C)
 *                         return C
 */
        /*else*/ {
          __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_v_dim_ret);
          __Pyx_GIVEREF(__pyx_v_dim_ret);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_dim_ret)) __PYX_ERR(0, 1159, __pyx_L1_error);
          __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_14, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_C = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_3);
          __pyx_t_3 = 0;

          /* "ctf/tensor.pyx":1160
 *                     else:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)             # <<<<<<<<<<<<<<
 *                         return C
 *             if keepdims == True:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_14 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, ((PyObject *)__pyx_v_C)};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "ctf/tensor.pyx":1161
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 *                         return C             # <<<<<<<<<<<<<<
 *             if keepdims == True:
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF((PyObject *)__pyx_v_C);
          __pyx_r = ((PyObject *)__pyx_v_C);
          goto __pyx_L0;
        }

        /* "ctf/tensor.pyx":1153
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 *                 if out.dtype != B.get_type():             # <<<<<<<<<<<<<<
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 */
      }

      /* "ctf/tensor.pyx":1152
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if out.dtype != B.get_type():
 *                     if keepdims == True:
 */
    }

    /* "ctf/tensor.pyx":1162
 *                         B._convert_type(C)
 *                         return C
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1163
 *                         return C
 *             if keepdims == True:
 *                 return ctf.tensor_aux.reshape(B, dim_keep)             # <<<<<<<<<<<<<<
 *             return B
 *         elif isinstance(axis, (tuple, np.ndarray)):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ctf); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_reshape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_14, ((PyObject *)__pyx_v_B), __pyx_v_dim_keep};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1162
 *                         B._convert_type(C)
 *                         return C
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B
 */
    }

    /* "ctf/tensor.pyx":1164
 *             if keepdims == True:
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B             # <<<<<<<<<<<<<<
 *         elif isinstance(axis, (tuple, np.ndarray)):
 *             axis = np.asarray(axis, dtype=np.int64)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1114
 *         # when the axis is not None
 *         dim = self.shape
 *         if isinstance(axis, (int, np.integer)):             # <<<<<<<<<<<<<<
 *             if axis < 0:
 *                 axis += len(dim)
 */
  }

  /* "ctf/tensor.pyx":1165
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B
 *         elif isinstance(axis, (tuple, np.ndarray)):             # <<<<<<<<<<<<<<
 *             axis = np.asarray(axis, dtype=np.int64)
 *             dim_keep = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = PyTuple_Check(__pyx_v_axis); 
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L40_bool_binop_done;
  }
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_axis, __pyx_t_9); 
  __pyx_t_1 = __pyx_t_4;
  __pyx_L40_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (likely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1166
 *             return B
 *         elif isinstance(axis, (tuple, np.ndarray)):
 *             axis = np.asarray(axis, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             dim_keep = None
 *             if keepdims == True:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_axis);
    __Pyx_GIVEREF(__pyx_v_axis);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_axis)) __PYX_ERR(0, 1166, __pyx_L1_error);
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF_SET(__pyx_v_axis, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":1167
 *         elif isinstance(axis, (tuple, np.ndarray)):
 *             axis = np.asarray(axis, dtype=np.int64)
 *             dim_keep = None             # <<<<<<<<<<<<<<
 *             if keepdims == True:
 *                 dim_keep = dim
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_dim_keep = Py_None;

    /* "ctf/tensor.pyx":1168
 *             axis = np.asarray(axis, dtype=np.int64)
 *             dim_keep = None
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 dim_keep = dim
 *                 for i in range(len(axis)):
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1169
 *             dim_keep = None
 *             if keepdims == True:
 *                 dim_keep = dim             # <<<<<<<<<<<<<<
 *                 for i in range(len(axis)):
 *                     dim_keep[axis[i]] = 1
 */
      __Pyx_INCREF(__pyx_v_dim);
      __Pyx_DECREF_SET(__pyx_v_dim_keep, __pyx_v_dim);

      /* "ctf/tensor.pyx":1170
 *             if keepdims == True:
 *                 dim_keep = dim
 *                 for i in range(len(axis)):             # <<<<<<<<<<<<<<
 *                     dim_keep[axis[i]] = 1
 *                 if out is not None:
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_axis); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1170, __pyx_L1_error)
      __pyx_t_5 = __pyx_t_6;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "ctf/tensor.pyx":1171
 *                 dim_keep = dim
 *                 for i in range(len(axis)):
 *                     dim_keep[axis[i]] = 1             # <<<<<<<<<<<<<<
 *                 if out is not None:
 *                     if tuple(dim_keep) is not tuple(out.shape):
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_axis, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely((PyObject_SetItem(__pyx_v_dim_keep, __pyx_t_2, __pyx_int_1) < 0))) __PYX_ERR(0, 1171, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "ctf/tensor.pyx":1172
 *                 for i in range(len(axis)):
 *                     dim_keep[axis[i]] = 1
 *                 if out is not None:             # <<<<<<<<<<<<<<
 *                     if tuple(dim_keep) is not tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 */
      __pyx_t_1 = (__pyx_v_out != Py_None);
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1173
 *                     dim_keep[axis[i]] = 1
 *                 if out is not None:
 *                     if tuple(dim_keep) is not tuple(out.shape):             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             for i in range(len(axis.shape)):
 */
        __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_v_dim_keep); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_1 = (((PyObject*)__pyx_t_2) != ((PyObject*)__pyx_t_9));
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(__pyx_t_1)) {

          /* "ctf/tensor.pyx":1174
 *                 if out is not None:
 *                     if tuple(dim_keep) is not tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')             # <<<<<<<<<<<<<<
 *             for i in range(len(axis.shape)):
 *                 if axis[i] < 0:
 */
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1174, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_Raise(__pyx_t_9, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __PYX_ERR(0, 1174, __pyx_L1_error)

          /* "ctf/tensor.pyx":1173
 *                     dim_keep[axis[i]] = 1
 *                 if out is not None:
 *                     if tuple(dim_keep) is not tuple(out.shape):             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             for i in range(len(axis.shape)):
 */
        }

        /* "ctf/tensor.pyx":1172
 *                 for i in range(len(axis)):
 *                     dim_keep[axis[i]] = 1
 *                 if out is not None:             # <<<<<<<<<<<<<<
 *                     if tuple(dim_keep) is not tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 */
      }

      /* "ctf/tensor.pyx":1168
 *             axis = np.asarray(axis, dtype=np.int64)
 *             dim_keep = None
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 dim_keep = dim
 *                 for i in range(len(axis)):
 */
    }

    /* "ctf/tensor.pyx":1175
 *                     if tuple(dim_keep) is not tuple(out.shape):
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             for i in range(len(axis.shape)):             # <<<<<<<<<<<<<<
 *                 if axis[i] < 0:
 *                     axis[i] += len(dim)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_axis, __pyx_n_s_shape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __pyx_t_6;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "ctf/tensor.pyx":1176
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             for i in range(len(axis.shape)):
 *                 if axis[i] < 0:             # <<<<<<<<<<<<<<
 *                     axis[i] += len(dim)
 *                 if axis[i] >= len(dim) or axis[i] < 0:
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_axis, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_9, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1177
 *             for i in range(len(axis.shape)):
 *                 if axis[i] < 0:
 *                     axis[i] += len(dim)             # <<<<<<<<<<<<<<
 *                 if axis[i] >= len(dim) or axis[i] < 0:
 *                     raise ValueError("'axis' entry is out of bounds")
 */
        __pyx_t_15 = __pyx_v_i;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_axis, __pyx_t_15, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__pyx_v_dim == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          __PYX_ERR(0, 1177, __pyx_L1_error)
        }
        __pyx_t_16 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1177, __pyx_L1_error)
        __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely((__Pyx_SetItemInt(__pyx_v_axis, __pyx_t_15, __pyx_t_14, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0))) __PYX_ERR(0, 1177, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "ctf/tensor.pyx":1176
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             for i in range(len(axis.shape)):
 *                 if axis[i] < 0:             # <<<<<<<<<<<<<<
 *                     axis[i] += len(dim)
 *                 if axis[i] >= len(dim) or axis[i] < 0:
 */
      }

      /* "ctf/tensor.pyx":1178
 *                 if axis[i] < 0:
 *                     axis[i] += len(dim)
 *                 if axis[i] >= len(dim) or axis[i] < 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("'axis' entry is out of bounds")
 *             for i in range(len(axis.shape)):
 */
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_axis, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (unlikely(__pyx_v_dim == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 1178, __pyx_L1_error)
      }
      __pyx_t_15 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1178, __pyx_L1_error)
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_14, __pyx_t_9, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!__pyx_t_4) {
      } else {
        __pyx_t_1 = __pyx_t_4;
        goto __pyx_L51_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_axis, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __pyx_t_4;
      __pyx_L51_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1179
 *                     axis[i] += len(dim)
 *                 if axis[i] >= len(dim) or axis[i] < 0:
 *                     raise ValueError("'axis' entry is out of bounds")             # <<<<<<<<<<<<<<
 *             for i in range(len(axis.shape)):
 *                 if np.count_nonzero(axis==axis[i]) > 1:
 */
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 1179, __pyx_L1_error)

        /* "ctf/tensor.pyx":1178
 *                 if axis[i] < 0:
 *                     axis[i] += len(dim)
 *                 if axis[i] >= len(dim) or axis[i] < 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("'axis' entry is out of bounds")
 *             for i in range(len(axis.shape)):
 */
      }
    }

    /* "ctf/tensor.pyx":1180
 *                 if axis[i] >= len(dim) or axis[i] < 0:
 *                     raise ValueError("'axis' entry is out of bounds")
 *             for i in range(len(axis.shape)):             # <<<<<<<<<<<<<<
 *                 if np.count_nonzero(axis==axis[i]) > 1:
 *                     raise ValueError("duplicate value in 'axis'")
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_axis, __pyx_n_s_shape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __pyx_t_6;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "ctf/tensor.pyx":1181
 *                     raise ValueError("'axis' entry is out of bounds")
 *             for i in range(len(axis.shape)):
 *                 if np.count_nonzero(axis==axis[i]) > 1:             # <<<<<<<<<<<<<<
 *                     raise ValueError("duplicate value in 'axis'")
 *             dim_ret = np.delete(dim, axis)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_count_nonzero); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_axis, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_axis, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1181, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __pyx_t_14 = PyObject_RichCompare(__pyx_t_9, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1182
 *             for i in range(len(axis.shape)):
 *                 if np.count_nonzero(axis==axis[i]) > 1:
 *                     raise ValueError("duplicate value in 'axis'")             # <<<<<<<<<<<<<<
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 */
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1182, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_Raise(__pyx_t_14, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __PYX_ERR(0, 1182, __pyx_L1_error)

        /* "ctf/tensor.pyx":1181
 *                     raise ValueError("'axis' entry is out of bounds")
 *             for i in range(len(axis.shape)):
 *                 if np.count_nonzero(axis==axis[i]) > 1:             # <<<<<<<<<<<<<<
 *                     raise ValueError("duplicate value in 'axis'")
 *             dim_ret = np.delete(dim, axis)
 */
      }
    }

    /* "ctf/tensor.pyx":1183
 *                 if np.count_nonzero(axis==axis[i]) > 1:
 *                     raise ValueError("duplicate value in 'axis'")
 *             dim_ret = np.delete(dim, axis)             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if type(out) is not np.ndarray:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_delete); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_v_dim, __pyx_v_axis};
      __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_dim_ret = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "ctf/tensor.pyx":1184
 *                     raise ValueError("duplicate value in 'axis'")
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if type(out) is not np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 */
    __pyx_t_1 = (__pyx_v_out != Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1185
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 *                 if type(out) is not np.ndarray:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) is not len(out.shape):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_out)) != __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1186
 *             if out is not None:
 *                 if type(out) is not np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')             # <<<<<<<<<<<<<<
 *                 if len(dim_ret) is not len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1186, __pyx_L1_error)

        /* "ctf/tensor.pyx":1185
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 *                 if type(out) is not np.ndarray:             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) is not len(out.shape):
 */
      }

      /* "ctf/tensor.pyx":1187
 *                 if type(out) is not np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) is not len(out.shape):             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_dim_ret); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1187, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1187, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = (__pyx_t_6 != __pyx_t_5);
      if (unlikely(__pyx_t_1)) {

        /* "ctf/tensor.pyx":1188
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) is not len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')             # <<<<<<<<<<<<<<
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] is not out.shape[i]:
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1188, __pyx_L1_error)

        /* "ctf/tensor.pyx":1187
 *                 if type(out) is not np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) is not len(out.shape):             # <<<<<<<<<<<<<<
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 */
      }

      /* "ctf/tensor.pyx":1189
 *                 if len(dim_ret) is not len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):             # <<<<<<<<<<<<<<
 *                     if dim_ret[i] is not out.shape[i]:
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_dim_ret); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1189, __pyx_L1_error)
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "ctf/tensor.pyx":1190
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] is not out.shape[i]:             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             B = tensor(dim_ret, dtype=np.bool_)
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dim_ret, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_shape); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_14, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_1 = (__pyx_t_3 != __pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(__pyx_t_1)) {

          /* "ctf/tensor.pyx":1191
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] is not out.shape[i]:
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')             # <<<<<<<<<<<<<<
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)
 */
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1191, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_Raise(__pyx_t_9, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __PYX_ERR(0, 1191, __pyx_L1_error)

          /* "ctf/tensor.pyx":1190
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] is not out.shape[i]:             # <<<<<<<<<<<<<<
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             B = tensor(dim_ret, dtype=np.bool_)
 */
        }
      }

      /* "ctf/tensor.pyx":1184
 *                     raise ValueError("duplicate value in 'axis'")
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if type(out) is not np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 */
    }

    /* "ctf/tensor.pyx":1192
 *                     if dim_ret[i] is not out.shape[i]:
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             B = tensor(dim_ret, dtype=np.bool_)             # <<<<<<<<<<<<<<
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             index_temp = ctf.helper._rev_array(index_A)
 */
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_dim_ret);
    __Pyx_GIVEREF(__pyx_v_dim_ret);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_dim_ret)) __PYX_ERR(0, 1192, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":1193
 *                         raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)             # <<<<<<<<<<<<<<
 *             index_temp = ctf.helper._rev_array(index_A)
 *             index_B = ""
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_get_num_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_index_A = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":1194
 *             B = tensor(dim_ret, dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             index_temp = ctf.helper._rev_array(index_A)             # <<<<<<<<<<<<<<
 *             index_B = ""
 *             for i in range(len(dim)):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_index_A};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_index_temp = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":1195
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             index_temp = ctf.helper._rev_array(index_A)
 *             index_B = ""             # <<<<<<<<<<<<<<
 *             for i in range(len(dim)):
 *                 if i not in axis:
 */
    __Pyx_INCREF(__pyx_kp_s__3);
    __pyx_v_index_B = __pyx_kp_s__3;

    /* "ctf/tensor.pyx":1196
 *             index_temp = ctf.helper._rev_array(index_A)
 *             index_B = ""
 *             for i in range(len(dim)):             # <<<<<<<<<<<<<<
 *                 if i not in axis:
 *                     index_B += index_temp[i]
 */
    if (unlikely(__pyx_v_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1196, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1196, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "ctf/tensor.pyx":1197
 *             index_B = ""
 *             for i in range(len(dim)):
 *                 if i not in axis:             # <<<<<<<<<<<<<<
 *                     index_B += index_temp[i]
 *             index_B = ctf.helper._rev_array(index_B)
 */
      __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_axis, Py_NE)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1198
 *             for i in range(len(dim)):
 *                 if i not in axis:
 *                     index_B += index_temp[i]             # <<<<<<<<<<<<<<
 *             index_B = ctf.helper._rev_array(index_B)
 *             if self.dtype == np.float64:
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_index_temp, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_index_B, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_index_B, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1197
 *             index_B = ""
 *             for i in range(len(dim)):
 *                 if i not in axis:             # <<<<<<<<<<<<<<
 *                     index_B += index_temp[i]
 *             index_B = ctf.helper._rev_array(index_B)
 */
      }
    }

    /* "ctf/tensor.pyx":1199
 *                 if i not in axis:
 *                     index_B += index_temp[i]
 *             index_B = ctf.helper._rev_array(index_B)             # <<<<<<<<<<<<<<
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_index_B};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_index_B, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1200
 *                     index_B += index_temp[i]
 *             index_B = ctf.helper._rev_array(index_B)
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1201
 *             index_B = ctf.helper._rev_array(index_B)
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L1_error)
      CTF_int::all_helper<double>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1200
 *                     index_B += index_temp[i]
 *             index_B = ctf.helper._rev_array(index_B)
 *             if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:
 */
      goto __pyx_L65;
    }

    /* "ctf/tensor.pyx":1202
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1203
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1203, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1203, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1203, __pyx_L1_error)
      CTF_int::all_helper<int64_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1202
 *             if self.dtype == np.float64:
 *                 all_helper[double](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:
 */
      goto __pyx_L65;
    }

    /* "ctf/tensor.pyx":1204
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1205
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1205, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1205, __pyx_L1_error)
      CTF_int::all_helper<int32_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1204
 *             elif self.dtype == np.int64:
 *                 all_helper[int64_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:
 */
      goto __pyx_L65;
    }

    /* "ctf/tensor.pyx":1206
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1207
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L1_error)
      CTF_int::all_helper<int16_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1206
 *             elif self.dtype == np.int32:
 *                 all_helper[int32_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:
 */
      goto __pyx_L65;
    }

    /* "ctf/tensor.pyx":1208
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1209
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
      CTF_int::all_helper<int8_t>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_12, __pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1208
 *             elif self.dtype == np.int16:
 *                 all_helper[int16_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:
 */
      goto __pyx_L65;
    }

    /* "ctf/tensor.pyx":1210
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1211
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())             # <<<<<<<<<<<<<<
 *             if out is not None:
 *                 if out.dtype is not B.get_type():
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_A, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_B, __pyx_n_s_encode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L1_error)
      CTF_int::all_helper<bool>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_B->dt), __pyx_t_13, __pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1210
 *             elif self.dtype == np.int8:
 *                 all_helper[int8_t](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             elif self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 */
    }
    __pyx_L65:;

    /* "ctf/tensor.pyx":1212
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if out.dtype is not B.get_type():
 *                     if keepdims == True:
 */
    __pyx_t_1 = (__pyx_v_out != Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1213
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 *                 if out.dtype is not B.get_type():             # <<<<<<<<<<<<<<
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_get_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_1 = (__pyx_t_3 != __pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1214
 *             if out is not None:
 *                 if out.dtype is not B.get_type():
 *                     if keepdims == True:             # <<<<<<<<<<<<<<
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 */
        __pyx_t_2 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1214, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1214, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_1) {

          /* "ctf/tensor.pyx":1215
 *                 if out.dtype is not B.get_type():
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)             # <<<<<<<<<<<<<<
 *                         B._convert_type(C)
 *                         return ctf.tensor_aux.reshape(C, dim_keep)
 */
          __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_v_dim_ret);
          __Pyx_GIVEREF(__pyx_v_dim_ret);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_dim_ret)) __PYX_ERR(0, 1215, __pyx_L1_error);
          __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1215, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1215, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_C = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_9);
          __pyx_t_9 = 0;

          /* "ctf/tensor.pyx":1216
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)             # <<<<<<<<<<<<<<
 *                         return ctf.tensor_aux.reshape(C, dim_keep)
 *                     else:
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_C)};
            __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1216, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "ctf/tensor.pyx":1217
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 *                         return ctf.tensor_aux.reshape(C, dim_keep)             # <<<<<<<<<<<<<<
 *                     else:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_C), __pyx_v_dim_keep};
            __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1217, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_r = __pyx_t_9;
          __pyx_t_9 = 0;
          goto __pyx_L0;

          /* "ctf/tensor.pyx":1214
 *             if out is not None:
 *                 if out.dtype is not B.get_type():
 *                     if keepdims == True:             # <<<<<<<<<<<<<<
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 */
        }

        /* "ctf/tensor.pyx":1219
 *                         return ctf.tensor_aux.reshape(C, dim_keep)
 *                     else:
 *                         C = tensor(dim_ret, dtype=out.dtype)             # <<<<<<<<<<<<<<
 *                         B._convert_type(C)
 *                         return C
 */
        /*else*/ {
          __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_v_dim_ret);
          __Pyx_GIVEREF(__pyx_v_dim_ret);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_dim_ret)) __PYX_ERR(0, 1219, __pyx_L1_error);
          __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_C = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_2);
          __pyx_t_2 = 0;

          /* "ctf/tensor.pyx":1220
 *                     else:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)             # <<<<<<<<<<<<<<
 *                         return C
 *             if keepdims == True:
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, ((PyObject *)__pyx_v_C)};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "ctf/tensor.pyx":1221
 *                         C = tensor(dim_ret, dtype=out.dtype)
 *                         B._convert_type(C)
 *                         return C             # <<<<<<<<<<<<<<
 *             if keepdims == True:
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF((PyObject *)__pyx_v_C);
          __pyx_r = ((PyObject *)__pyx_v_C);
          goto __pyx_L0;
        }

        /* "ctf/tensor.pyx":1213
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:
 *                 if out.dtype is not B.get_type():             # <<<<<<<<<<<<<<
 *                     if keepdims == True:
 *                         C = tensor(dim_ret, dtype=out.dtype)
 */
      }

      /* "ctf/tensor.pyx":1212
 *             elif self.dtype == np.bool_:
 *                 all_helper[bool](<ctensor*>self.dt, <ctensor*>B.dt, index_A.encode(), index_B.encode())
 *             if out is not None:             # <<<<<<<<<<<<<<
 *                 if out.dtype is not B.get_type():
 *                     if keepdims == True:
 */
    }

    /* "ctf/tensor.pyx":1222
 *                         B._convert_type(C)
 *                         return C
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_keepdims, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1222, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1222, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1223
 *                         return C
 *             if keepdims == True:
 *                 return ctf.tensor_aux.reshape(B, dim_keep)             # <<<<<<<<<<<<<<
 *             return B
 *         else:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_11 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_11 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, ((PyObject *)__pyx_v_B), __pyx_v_dim_keep};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1222
 *                         B._convert_type(C)
 *                         return C
 *             if keepdims == True:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B
 */
    }

    /* "ctf/tensor.pyx":1224
 *             if keepdims == True:
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("an integer is required")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1165
 *                 return ctf.tensor_aux.reshape(B, dim_keep)
 *             return B
 *         elif isinstance(axis, (tuple, np.ndarray)):             # <<<<<<<<<<<<<<
 *             axis = np.asarray(axis, dtype=np.int64)
 *             dim_keep = None
 */
  }

  /* "ctf/tensor.pyx":1226
 *             return B
 *         else:
 *             raise ValueError("an integer is required")             # <<<<<<<<<<<<<<
 * 
 *     def i(self, string):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1226, __pyx_L1_error)
  }

  /* "ctf/tensor.pyx":1027
 *     # issue: when shape contains 1 such as [3,4,1], it seems that CTF in C++ does not support sum over empty dims -> sum over 1.
 * 
 *     def all(tensor self, axis=None, out=None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         all(axis=None, out=None, keepdims = False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ctf.tensor.tensor.all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dims_keep);
  __Pyx_XDECREF((PyObject *)__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_index_A);
  __Pyx_XDECREF(__pyx_v_dim_keep);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF((PyObject *)__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_dim);
  __Pyx_XDECREF(__pyx_v_dim_ret);
  __Pyx_XDECREF(__pyx_v_index_temp);
  __Pyx_XDECREF(__pyx_v_index_B);
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_XDECREF(__pyx_v_keepdims);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1228
 *             raise ValueError("an integer is required")
 * 
 *     def i(self, string):             # <<<<<<<<<<<<<<
 *         """
 *         i(string)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_69i(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_68i, "\n        i(string)\n        Core function on summing the ctensor.\n\n        Parameters\n        ----------\n        string: string\n            Dimensions for summation.\n\n        Returns\n        -------\n        output: tensor_like\n            Output tensor or scalar.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> a.i(\"ij\") << a.i(\"ij\")\n        >>> a\n        array([[ 2,  4,  6],\n               [ 8, 10, 12]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_69i = {"i", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_69i, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_68i};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_69i(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_string = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("i (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_string)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1228, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "i") < 0)) __PYX_ERR(0, 1228, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_string = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("i", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1228, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.i", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_68i(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_string);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_68i(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_string) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("i", 1);

  /* "ctf/tensor.pyx":1252
 *                [ 8, 10, 12]])
 *         """
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             return itensor(self, ctf.helper._rev_array(string))
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ord_comp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_F};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":1253
 *         """
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             return itensor(self, ctf.helper._rev_array(string))             # <<<<<<<<<<<<<<
 *         else:
 *             return itensor(self, string)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_string};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1253, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_4term_itensor), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1252
 *                [ 8, 10, 12]])
 *         """
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             return itensor(self, ctf.helper._rev_array(string))
 *         else:
 */
  }

  /* "ctf/tensor.pyx":1255
 *             return itensor(self, ctf.helper._rev_array(string))
 *         else:
 *             return itensor(self, string)             # <<<<<<<<<<<<<<
 * 
 *     def prnt(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1255, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_string)) __PYX_ERR(0, 1255, __pyx_L1_error);
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_4term_itensor), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "ctf/tensor.pyx":1228
 *             raise ValueError("an integer is required")
 * 
 *     def i(self, string):             # <<<<<<<<<<<<<<
 *         """
 *         i(string)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.i", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1257
 *             return itensor(self, string)
 * 
 *     def prnt(self):             # <<<<<<<<<<<<<<
 *         """
 *         prnt()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_71prnt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_70prnt, "\n        prnt()\n        Function to print the non-zero elements and their indices of a tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([0,1,2,3,0])\n        >>> a.prnt()\n        Printing tensor ZYTP01\n        [1](1, <1>)\n        [2](2, <2>)\n        [3](3, <3>)\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_71prnt = {"prnt", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_71prnt, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_70prnt};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_71prnt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prnt (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("prnt", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "prnt", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_70prnt(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_70prnt(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prnt", 1);

  /* "ctf/tensor.pyx":1272
 *         [3](3, <3>)
 *         """
 *         self.dt.prnt()             # <<<<<<<<<<<<<<
 * 
 *     def real(self,tensor value = None):
 */
  __pyx_v_self->dt->prnt();

  /* "ctf/tensor.pyx":1257
 *             return itensor(self, string)
 * 
 *     def prnt(self):             # <<<<<<<<<<<<<<
 *         """
 *         prnt()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1274
 *         self.dt.prnt()
 * 
 *     def real(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         real(value = None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_73real(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_72real, "\n        real(value = None)\n        Return real part of a tensor or set its real part to new value.\n\n        Returns\n        -------\n        value: tensor_like\n            The value tensor set real to the original tensor, current only support value tensor with dtype `np.float64` or `np.complex128`. Default is none.\n\n        See Also\n        --------\n        ctf: reshape()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1+2j, 3+4j])\n        >>> b = astensor([5,6], dtype=np.float64)\n        >>> a.real(value = b)\n        >>> a\n        array([5.+2.j, 6.+4.j])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_73real = {"real", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_73real, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_72real};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_73real(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_3ctf_6tensor_tensor *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1274, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "real") < 0)) __PYX_ERR(0, 1274, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("real", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1274, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.real", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_3ctf_6tensor_tensor, 1, "value", 0))) __PYX_ERR(0, 1274, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_72real(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_72real(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_value) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("real", 1);

  /* "ctf/tensor.pyx":1297
 *         array([5.+2.j, 6.+4.j])
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_value) == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1298
 *         """
 *         if value is None:
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1299
 *         if value is None:
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)             # <<<<<<<<<<<<<<
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self
 */
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_self->shape);
      __Pyx_GIVEREF(__pyx_v_self->shape);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1299, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp, __pyx_t_4) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_ret = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "ctf/tensor.pyx":1300
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)             # <<<<<<<<<<<<<<
 *                 return self
 *             elif self.dtype == np.complex128:
 */
      CTF_int::get_real<float>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_ret->dt));

      /* "ctf/tensor.pyx":1301
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.complex128:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF((PyObject *)__pyx_v_self);
      __pyx_r = ((PyObject *)__pyx_v_self);
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1298
 *         """
 *         if value is None:
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    }

    /* "ctf/tensor.pyx":1302
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_real[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_complex128); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1303
 *                 return self
 *             elif self.dtype == np.complex128:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)             # <<<<<<<<<<<<<<
 *                 get_real[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return ret
 */
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_self->shape);
      __Pyx_GIVEREF(__pyx_v_self->shape);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1303, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp, __pyx_t_2) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_ret = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1304
 *             elif self.dtype == np.complex128:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_real[double](<ctensor*>self.dt, <ctensor*>ret.dt)             # <<<<<<<<<<<<<<
 *                 return ret
 *             else:
 */
      CTF_int::get_real<double>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_ret->dt));

      /* "ctf/tensor.pyx":1305
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_real[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return ret             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.copy()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF((PyObject *)__pyx_v_ret);
      __pyx_r = ((PyObject *)__pyx_v_ret);
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1302
 *                 get_real[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_real[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    }

    /* "ctf/tensor.pyx":1307
 *                 return ret
 *             else:
 *                 return self.copy()             # <<<<<<<<<<<<<<
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }

    /* "ctf/tensor.pyx":1297
 *         array([5.+2.j, 6.+4.j])
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 */
  }

  /* "ctf/tensor.pyx":1309
 *                 return self.copy()
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_value->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_value->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1310
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1310, __pyx_L1_error)

      /* "ctf/tensor.pyx":1309
 *                 return self.copy()
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:
 */
    }

    /* "ctf/tensor.pyx":1311
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_complex64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1312
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.complex128:
 *                 set_real[double](<ctensor*>value.dt, <ctensor*>self.dt)
 */
      CTF_int::set_real<float>(((CTF_int::tensor *)__pyx_v_value->dt), ((CTF_int::tensor *)__pyx_v_self->dt));

      /* "ctf/tensor.pyx":1311
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:
 */
      goto __pyx_L8;
    }

    /* "ctf/tensor.pyx":1313
 *             if self.dtype == np.complex64:
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 set_real[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_complex128); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1314
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:
 *                 set_real[double](<ctensor*>value.dt, <ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *             else:
 *                 del self.dt
 */
      CTF_int::set_real<double>(((CTF_int::tensor *)__pyx_v_value->dt), ((CTF_int::tensor *)__pyx_v_self->dt));

      /* "ctf/tensor.pyx":1313
 *             if self.dtype == np.complex64:
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 set_real[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 */
      goto __pyx_L8;
    }

    /* "ctf/tensor.pyx":1316
 *                 set_real[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 *                 del self.dt             # <<<<<<<<<<<<<<
 *                 self.__cinit__(copy=value)
 * 
 */
    /*else*/ {
      delete __pyx_v_self->dt;

      /* "ctf/tensor.pyx":1317
 *             else:
 *                 del self.dt
 *                 self.__cinit__(copy=value)             # <<<<<<<<<<<<<<
 * 
 *     def imag(self,tensor value = None):
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cinit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, ((PyObject *)__pyx_v_value)) < 0) __PYX_ERR(0, 1317, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_L8:;
  }

  /* "ctf/tensor.pyx":1274
 *         self.dt.prnt()
 * 
 *     def real(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         real(value = None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.real", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1319
 *                 self.__cinit__(copy=value)
 * 
 *     def imag(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         imag(value = None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_75imag(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_74imag, "\n        imag(value = None)\n        Return imaginary part of a tensor or set its imaginary part to new value.\n\n        Returns\n        -------\n        value: tensor_like\n            The value tensor set imaginary to the original tensor, current only support value tensor with dtype `np.float64` or `np.complex128`. Default is none.\n\n        See Also\n        --------\n        ctf: reshape()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1+2j, 3+4j])\n        >>> b = astensor([5,6], dtype=np.float64)\n        >>> a.imag(value = b)\n        >>> a\n        array([5.+2.j, 6.+4.j])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_75imag = {"imag", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_75imag, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_74imag};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_75imag(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("imag (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_3ctf_6tensor_tensor *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1319, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "imag") < 0)) __PYX_ERR(0, 1319, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("imag", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1319, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.imag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_3ctf_6tensor_tensor, 1, "value", 0))) __PYX_ERR(0, 1319, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_74imag(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_74imag(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_value) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("imag", 1);

  /* "ctf/tensor.pyx":1342
 *         array([5.+2.j, 6.+4.j])
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_value) == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1343
 *         """
 *         if value is None:
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1343, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1344
 *         if value is None:
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)             # <<<<<<<<<<<<<<
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self
 */
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_self->shape);
      __Pyx_GIVEREF(__pyx_v_self->shape);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1344, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp, __pyx_t_4) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_ret = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "ctf/tensor.pyx":1345
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)             # <<<<<<<<<<<<<<
 *                 return self
 *             elif self.dtype == np.complex128:
 */
      CTF_int::get_imag<float>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_ret->dt));

      /* "ctf/tensor.pyx":1346
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.complex128:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF((PyObject *)__pyx_v_self);
      __pyx_r = ((PyObject *)__pyx_v_self);
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1343
 *         """
 *         if value is None:
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    }

    /* "ctf/tensor.pyx":1347
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_complex128); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1348
 *                 return self
 *             elif self.dtype == np.complex128:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)             # <<<<<<<<<<<<<<
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return ret
 */
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_self->shape);
      __Pyx_GIVEREF(__pyx_v_self->shape);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1348, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp, __pyx_t_2) < 0) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_ret = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1349
 *             elif self.dtype == np.complex128:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)             # <<<<<<<<<<<<<<
 *                 return ret
 *             elif self.dtype == np.float32:
 */
      CTF_int::get_imag<double>(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_ret->dt));

      /* "ctf/tensor.pyx":1350
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return ret             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float32:
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF((PyObject *)__pyx_v_ret);
      __pyx_r = ((PyObject *)__pyx_v_ret);
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1347
 *                 get_imag[float](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return self
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float64)
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 */
    }

    /* "ctf/tensor.pyx":1351
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return ret
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)
 *             elif self.dtype == np.float64:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1352
 *                 return ret
 *             elif self.dtype == np.float32:
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.float64:
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float64)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_self->shape);
      __Pyx_GIVEREF(__pyx_v_self->shape);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1352, __pyx_L1_error);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1351
 *                 get_imag[double](<ctensor*>self.dt, <ctensor*>ret.dt)
 *                 return ret
 *             elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)
 *             elif self.dtype == np.float64:
 */
    }

    /* "ctf/tensor.pyx":1353
 *             elif self.dtype == np.float32:
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)
 *             elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float64)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1354
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)
 *             elif self.dtype == np.float64:
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("CTF ERROR: cannot call imag on non-complex/real single/double precision tensor")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ctf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_self->shape);
      __Pyx_GIVEREF(__pyx_v_self->shape);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1354, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1353
 *             elif self.dtype == np.float32:
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float32)
 *             elif self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float64)
 *             else:
 */
    }

    /* "ctf/tensor.pyx":1356
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float64)
 *             else:
 *                 raise ValueError("CTF ERROR: cannot call imag on non-complex/real single/double precision tensor")             # <<<<<<<<<<<<<<
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1356, __pyx_L1_error)
    }

    /* "ctf/tensor.pyx":1342
 *         array([5.+2.j, 6.+4.j])
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 ret = tensor(self.shape, sp=self.sp, dtype=np.float32)
 */
  }

  /* "ctf/tensor.pyx":1358
 *                 raise ValueError("CTF ERROR: cannot call imag on non-complex/real single/double precision tensor")
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_value->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_value->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1359
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1359, __pyx_L1_error)

      /* "ctf/tensor.pyx":1358
 *                 raise ValueError("CTF ERROR: cannot call imag on non-complex/real single/double precision tensor")
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:
 */
    }

    /* "ctf/tensor.pyx":1360
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1361
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *             elif self.dtype == np.complex128:
 *                 set_imag[double](<ctensor*>value.dt, <ctensor*>self.dt)
 */
      CTF_int::set_imag<float>(((CTF_int::tensor *)__pyx_v_value->dt), ((CTF_int::tensor *)__pyx_v_self->dt));

      /* "ctf/tensor.pyx":1360
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")
 *             if self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:
 */
      goto __pyx_L8;
    }

    /* "ctf/tensor.pyx":1362
 *             if self.dtype == np.complex64:
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 set_imag[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_complex128); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1363
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:
 *                 set_imag[double](<ctensor*>value.dt, <ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")
 */
      CTF_int::set_imag<double>(((CTF_int::tensor *)__pyx_v_value->dt), ((CTF_int::tensor *)__pyx_v_self->dt));

      /* "ctf/tensor.pyx":1362
 *             if self.dtype == np.complex64:
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 *             elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *                 set_imag[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 */
      goto __pyx_L8;
    }

    /* "ctf/tensor.pyx":1365
 *                 set_imag[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1365, __pyx_L1_error)
    }
    __pyx_L8:;
  }

  /* "ctf/tensor.pyx":1319
 *                 self.__cinit__(copy=value)
 * 
 *     def imag(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         imag(value = None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ctf.tensor.tensor.imag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1367
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         copy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_77copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_76copy, "\n        copy()\n        Copy the tensor to a new tensor.\n\n        Returns\n        -------\n        output: tensor_like\n            Output copied tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> b = a.copy()\n        >>> id(a) == id(b)\n        False\n        >>> a == b\n        array([[ True,  True,  True],\n               [ True,  True,  True]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_77copy = {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_77copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_76copy};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_77copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_76copy(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_76copy(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 1);

  /* "ctf/tensor.pyx":1388
 *                [ True,  True,  True]])
 *         """
 *         B = tensor(copy=self)             # <<<<<<<<<<<<<<
 *         return B
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 1388, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1389
 *         """
 *         B = tensor(copy=self)
 *         return B             # <<<<<<<<<<<<<<
 * 
 *     def reshape(tensor self, *integer):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_B);
  __pyx_r = ((PyObject *)__pyx_v_B);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1367
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         copy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_B);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1391
 *         return B
 * 
 *     def reshape(tensor self, *integer):             # <<<<<<<<<<<<<<
 *         """
 *         reshape(*integer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_79reshape(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_78reshape, "\n        reshape(*integer)\n        Return a new tensor with reshaped shape.\n\n        Returns\n        -------\n        output: tensor_like\n            Output reshaped tensor.\n\n        See Also\n        --------\n        ctf: reshape()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> a.reshape(6,1)\n        array([[1],\n               [2],\n               [3],\n               [4],\n               [5],\n               [6]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_79reshape = {"reshape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_79reshape, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_78reshape};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_79reshape(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_integer = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reshape (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "reshape", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_integer = __pyx_args;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_78reshape(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_integer);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_integer);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_78reshape(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_integer) {
  PyObject *__pyx_v_t_reshape = NULL;
  PyObject *__pyx_v_dim = NULL;
  PyObject *__pyx_v_total_size = NULL;
  PyObject *__pyx_v_newshape = NULL;
  char *__pyx_v_alpha;
  char *__pyx_v_beta;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_new_size = NULL;
  PyObject *__pyx_v_nega = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B = NULL;
  Py_ssize_t __pyx_v_pos;
  PyObject *__pyx_v_nega_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reshape", 0);
  __Pyx_INCREF(__pyx_v_integer);

  /* "ctf/tensor.pyx":1417
 *                [6]])
 *         """
 *         t_reshape = ctf.profile.timer("pyreshape")             # <<<<<<<<<<<<<<
 *         t_reshape.start()
 *         dim = self.shape
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_profile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_timer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_s_pyreshape};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_t_reshape = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":1418
 *         """
 *         t_reshape = ctf.profile.timer("pyreshape")
 *         t_reshape.start()             # <<<<<<<<<<<<<<
 *         dim = self.shape
 *         total_size = 1
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_reshape, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":1419
 *         t_reshape = ctf.profile.timer("pyreshape")
 *         t_reshape.start()
 *         dim = self.shape             # <<<<<<<<<<<<<<
 *         total_size = 1
 *         newshape = []
 */
  __pyx_t_1 = __pyx_v_self->shape;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_dim = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":1420
 *         t_reshape.start()
 *         dim = self.shape
 *         total_size = 1             # <<<<<<<<<<<<<<
 *         newshape = []
 *         cdef char * alpha
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_total_size = __pyx_int_1;

  /* "ctf/tensor.pyx":1421
 *         dim = self.shape
 *         total_size = 1
 *         newshape = []             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_newshape = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":1424
 *         cdef char * alpha
 *         cdef char * beta
 *         if not isinstance(integer[0], (int, np.integer)):             # <<<<<<<<<<<<<<
 *             if len(integer)!=1:
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_integer, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = PyObject_IsInstance(__pyx_t_1, __pyx_t_3); 
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (!__pyx_t_5);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":1425
 *         cdef char * beta
 *         if not isinstance(integer[0], (int, np.integer)):
 *             if len(integer)!=1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")
 *             else:
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_integer); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1425, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 1);
    if (unlikely(__pyx_t_6)) {

      /* "ctf/tensor.pyx":1426
 *         if not isinstance(integer[0], (int, np.integer)):
 *             if len(integer)!=1:
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")             # <<<<<<<<<<<<<<
 *             else:
 *                 integer = integer[0]
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 1426, __pyx_L1_error)

      /* "ctf/tensor.pyx":1425
 *         cdef char * beta
 *         if not isinstance(integer[0], (int, np.integer)):
 *             if len(integer)!=1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")
 *             else:
 */
    }

    /* "ctf/tensor.pyx":1428
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")
 *             else:
 *                 integer = integer[0]             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(integer, (int, np.integer)):
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_integer, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_integer, __pyx_t_1);
      __pyx_t_1 = 0;
    }

    /* "ctf/tensor.pyx":1424
 *         cdef char * alpha
 *         cdef char * beta
 *         if not isinstance(integer[0], (int, np.integer)):             # <<<<<<<<<<<<<<
 *             if len(integer)!=1:
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")
 */
  }

  /* "ctf/tensor.pyx":1430
 *                 integer = integer[0]
 * 
 *         if isinstance(integer, (int, np.integer)):             # <<<<<<<<<<<<<<
 *             newshape.append(integer)
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = PyInt_Check(__pyx_v_integer); 
  if (!__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_integer, __pyx_t_3); 
  __pyx_t_6 = __pyx_t_5;
  __pyx_L8_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":1431
 * 
 *         if isinstance(integer, (int, np.integer)):
 *             newshape.append(integer)             # <<<<<<<<<<<<<<
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):
 *             for i in range(len(integer)):
 */
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_newshape, __pyx_v_integer); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1431, __pyx_L1_error)

    /* "ctf/tensor.pyx":1430
 *                 integer = integer[0]
 * 
 *         if isinstance(integer, (int, np.integer)):             # <<<<<<<<<<<<<<
 *             newshape.append(integer)
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):
 */
    goto __pyx_L7;
  }

  /* "ctf/tensor.pyx":1432
 *         if isinstance(integer, (int, np.integer)):
 *             newshape.append(integer)
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):             # <<<<<<<<<<<<<<
 *             for i in range(len(integer)):
 *                 newshape.append(integer[i])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyTuple_Check(__pyx_v_newshape); 
  if (!__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_5 = PyList_Check(__pyx_v_newshape); 
  if (!__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_newshape, __pyx_t_1); 
  __pyx_t_6 = __pyx_t_5;
  __pyx_L10_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":1433
 *             newshape.append(integer)
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):
 *             for i in range(len(integer)):             # <<<<<<<<<<<<<<
 *                 newshape.append(integer[i])
 *         else:
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_integer); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1433, __pyx_L1_error)
    __pyx_t_9 = __pyx_t_7;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "ctf/tensor.pyx":1434
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):
 *             for i in range(len(integer)):
 *                 newshape.append(integer[i])             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("CTF PYTHON ERROR: invalid shape input to reshape")
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_integer, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_newshape, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "ctf/tensor.pyx":1432
 *         if isinstance(integer, (int, np.integer)):
 *             newshape.append(integer)
 *         elif isinstance(newshape, (tuple, list, np.ndarray)):             # <<<<<<<<<<<<<<
 *             for i in range(len(integer)):
 *                 newshape.append(integer[i])
 */
    goto __pyx_L7;
  }

  /* "ctf/tensor.pyx":1436
 *                 newshape.append(integer[i])
 *         else:
 *             raise ValueError("CTF PYTHON ERROR: invalid shape input to reshape")             # <<<<<<<<<<<<<<
 *         for i in range(len(dim)):
 *             total_size *= dim[i]
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1436, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "ctf/tensor.pyx":1437
 *         else:
 *             raise ValueError("CTF PYTHON ERROR: invalid shape input to reshape")
 *         for i in range(len(dim)):             # <<<<<<<<<<<<<<
 *             total_size *= dim[i]
 *         newshape = np.asarray(newshape, dtype=np.int64)
 */
  if (unlikely(__pyx_v_dim == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1437, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dim); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1437, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_7;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "ctf/tensor.pyx":1438
 *             raise ValueError("CTF PYTHON ERROR: invalid shape input to reshape")
 *         for i in range(len(dim)):
 *             total_size *= dim[i]             # <<<<<<<<<<<<<<
 *         newshape = np.asarray(newshape, dtype=np.int64)
 *         new_size = 1
 */
    if (unlikely(__pyx_v_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1438, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_dim, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_v_total_size, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_total_size, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "ctf/tensor.pyx":1439
 *         for i in range(len(dim)):
 *             total_size *= dim[i]
 *         newshape = np.asarray(newshape, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         new_size = 1
 *         nega = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_newshape);
  __Pyx_GIVEREF(__pyx_v_newshape);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_newshape)) __PYX_ERR(0, 1439, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_int64); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_newshape, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "ctf/tensor.pyx":1440
 *             total_size *= dim[i]
 *         newshape = np.asarray(newshape, dtype=np.int64)
 *         new_size = 1             # <<<<<<<<<<<<<<
 *         nega = 0
 *         for i in range(len(newshape)):
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_new_size = __pyx_int_1;

  /* "ctf/tensor.pyx":1441
 *         newshape = np.asarray(newshape, dtype=np.int64)
 *         new_size = 1
 *         nega = 0             # <<<<<<<<<<<<<<
 *         for i in range(len(newshape)):
 *             if newshape[i] < 0:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_nega = __pyx_int_0;

  /* "ctf/tensor.pyx":1442
 *         new_size = 1
 *         nega = 0
 *         for i in range(len(newshape)):             # <<<<<<<<<<<<<<
 *             if newshape[i] < 0:
 *                 nega += 1
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_newshape); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1442, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_7;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "ctf/tensor.pyx":1443
 *         nega = 0
 *         for i in range(len(newshape)):
 *             if newshape[i] < 0:             # <<<<<<<<<<<<<<
 *                 nega += 1
 *         if nega == 0:
 */
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_newshape, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "ctf/tensor.pyx":1444
 *         for i in range(len(newshape)):
 *             if newshape[i] < 0:
 *                 nega += 1             # <<<<<<<<<<<<<<
 *         if nega == 0:
 *             for i in range(len(newshape)):
 */
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_nega, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_nega, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1443
 *         nega = 0
 *         for i in range(len(newshape)):
 *             if newshape[i] < 0:             # <<<<<<<<<<<<<<
 *                 nega += 1
 *         if nega == 0:
 */
    }
  }

  /* "ctf/tensor.pyx":1445
 *             if newshape[i] < 0:
 *                 nega += 1
 *         if nega == 0:             # <<<<<<<<<<<<<<
 *             for i in range(len(newshape)):
 *                 new_size *= newshape[i]
 */
  __pyx_t_6 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_nega, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1445, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":1446
 *                 nega += 1
 *         if nega == 0:
 *             for i in range(len(newshape)):             # <<<<<<<<<<<<<<
 *                 new_size *= newshape[i]
 *             if new_size != total_size:
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_newshape); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1446, __pyx_L1_error)
    __pyx_t_9 = __pyx_t_7;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "ctf/tensor.pyx":1447
 *         if nega == 0:
 *             for i in range(len(newshape)):
 *                 new_size *= newshape[i]             # <<<<<<<<<<<<<<
 *             if new_size != total_size:
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_newshape, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = PyNumber_InPlaceMultiply(__pyx_v_new_size, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_new_size, __pyx_t_12);
      __pyx_t_12 = 0;
    }

    /* "ctf/tensor.pyx":1448
 *             for i in range(len(newshape)):
 *                 new_size *= newshape[i]
 *             if new_size != total_size:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 */
    __pyx_t_12 = PyObject_RichCompare(__pyx_v_new_size, __pyx_v_total_size, Py_NE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1448, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1448, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(__pyx_t_6)) {

      /* "ctf/tensor.pyx":1449
 *                 new_size *= newshape[i]
 *             if new_size != total_size:
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")             # <<<<<<<<<<<<<<
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()
 */
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 1449, __pyx_L1_error)

      /* "ctf/tensor.pyx":1448
 *             for i in range(len(newshape)):
 *                 new_size *= newshape[i]
 *             if new_size != total_size:             # <<<<<<<<<<<<<<
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 */
    }

    /* "ctf/tensor.pyx":1450
 *             if new_size != total_size:
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *             beta = <char*>self.dt.sr.addid()
 */
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_v_newshape);
    __Pyx_GIVEREF(__pyx_v_newshape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_newshape)) __PYX_ERR(0, 1450, __pyx_L1_error);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sp, __pyx_t_3) < 0) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 1450, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1451
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *             (<ctensor*>B.dt).reshape(<ctensor*>self.dt, alpha, beta)
 */
    __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

    /* "ctf/tensor.pyx":1452
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()
 *             beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *             (<ctensor*>B.dt).reshape(<ctensor*>self.dt, alpha, beta)
 *             #inds, vals = self.read_local_nnz()
 */
    __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

    /* "ctf/tensor.pyx":1453
 *             alpha = <char*>self.dt.sr.mulid()
 *             beta = <char*>self.dt.sr.addid()
 *             (<ctensor*>B.dt).reshape(<ctensor*>self.dt, alpha, beta)             # <<<<<<<<<<<<<<
 *             #inds, vals = self.read_local_nnz()
 *             #B.write(inds, vals)
 */
    ((CTF_int::tensor *)__pyx_v_B->dt)->reshape(((CTF_int::tensor *)__pyx_v_self->dt), __pyx_v_alpha, __pyx_v_beta);

    /* "ctf/tensor.pyx":1456
 *             #inds, vals = self.read_local_nnz()
 *             #B.write(inds, vals)
 *             t_reshape.stop()             # <<<<<<<<<<<<<<
 *             return B
 *         elif nega == 1:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_reshape, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1457
 *             #B.write(inds, vals)
 *             t_reshape.stop()
 *             return B             # <<<<<<<<<<<<<<
 *         elif nega == 1:
 *             pos = 0
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1445
 *             if newshape[i] < 0:
 *                 nega += 1
 *         if nega == 0:             # <<<<<<<<<<<<<<
 *             for i in range(len(newshape)):
 *                 new_size *= newshape[i]
 */
  }

  /* "ctf/tensor.pyx":1458
 *             t_reshape.stop()
 *             return B
 *         elif nega == 1:             # <<<<<<<<<<<<<<
 *             pos = 0
 *             for i in range(len(newshape)):
 */
  __pyx_t_6 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_nega, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1458, __pyx_L1_error)
  if (likely(__pyx_t_6)) {

    /* "ctf/tensor.pyx":1459
 *             return B
 *         elif nega == 1:
 *             pos = 0             # <<<<<<<<<<<<<<
 *             for i in range(len(newshape)):
 *                 if newshape[i] > 0:
 */
    __pyx_v_pos = 0;

    /* "ctf/tensor.pyx":1460
 *         elif nega == 1:
 *             pos = 0
 *             for i in range(len(newshape)):             # <<<<<<<<<<<<<<
 *                 if newshape[i] > 0:
 *                     new_size *= newshape[i]
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_newshape); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1460, __pyx_L1_error)
    __pyx_t_9 = __pyx_t_7;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "ctf/tensor.pyx":1461
 *             pos = 0
 *             for i in range(len(newshape)):
 *                 if newshape[i] > 0:             # <<<<<<<<<<<<<<
 *                     new_size *= newshape[i]
 *                 else:
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_newshape, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1461, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1461, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_6) {

        /* "ctf/tensor.pyx":1462
 *             for i in range(len(newshape)):
 *                 if newshape[i] > 0:
 *                     new_size *= newshape[i]             # <<<<<<<<<<<<<<
 *                 else:
 *                     pos = i
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_newshape, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_v_new_size, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_new_size, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "ctf/tensor.pyx":1461
 *             pos = 0
 *             for i in range(len(newshape)):
 *                 if newshape[i] > 0:             # <<<<<<<<<<<<<<
 *                     new_size *= newshape[i]
 *                 else:
 */
        goto __pyx_L26;
      }

      /* "ctf/tensor.pyx":1464
 *                     new_size *= newshape[i]
 *                 else:
 *                     pos = i             # <<<<<<<<<<<<<<
 *             nega_size = total_size / new_size
 *             if nega_size < 1:
 */
      /*else*/ {
        __pyx_v_pos = __pyx_v_i;
      }
      __pyx_L26:;
    }

    /* "ctf/tensor.pyx":1465
 *                 else:
 *                     pos = i
 *             nega_size = total_size / new_size             # <<<<<<<<<<<<<<
 *             if nega_size < 1:
 *                 raise ValueError("can not reshape into this size")
 */
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_total_size, __pyx_v_new_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_nega_size = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1466
 *                     pos = i
 *             nega_size = total_size / new_size
 *             if nega_size < 1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("can not reshape into this size")
 *             newshape[pos] = nega_size
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_nega_size, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1466, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1466, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_6)) {

      /* "ctf/tensor.pyx":1467
 *             nega_size = total_size / new_size
 *             if nega_size < 1:
 *                 raise ValueError("can not reshape into this size")             # <<<<<<<<<<<<<<
 *             newshape[pos] = nega_size
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1467, __pyx_L1_error)

      /* "ctf/tensor.pyx":1466
 *                     pos = i
 *             nega_size = total_size / new_size
 *             if nega_size < 1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("can not reshape into this size")
 *             newshape[pos] = nega_size
 */
    }

    /* "ctf/tensor.pyx":1468
 *             if nega_size < 1:
 *                 raise ValueError("can not reshape into this size")
 *             newshape[pos] = nega_size             # <<<<<<<<<<<<<<
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()
 */
    if (unlikely((__Pyx_SetItemInt(__pyx_v_newshape, __pyx_v_pos, __pyx_v_nega_size, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0))) __PYX_ERR(0, 1468, __pyx_L1_error)

    /* "ctf/tensor.pyx":1469
 *                 raise ValueError("can not reshape into this size")
 *             newshape[pos] = nega_size
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *             beta = <char*>self.dt.sr.addid()
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_newshape);
    __Pyx_GIVEREF(__pyx_v_newshape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_newshape)) __PYX_ERR(0, 1469, __pyx_L1_error);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sp, __pyx_t_12) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "ctf/tensor.pyx":1470
 *             newshape[pos] = nega_size
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *             (<ctensor*>B.dt).reshape(<ctensor*>self.dt,alpha,beta)
 */
    __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

    /* "ctf/tensor.pyx":1471
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()
 *             beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *             (<ctensor*>B.dt).reshape(<ctensor*>self.dt,alpha,beta)
 *             #inds, vals = self.read_local_nnz()
 */
    __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

    /* "ctf/tensor.pyx":1472
 *             alpha = <char*>self.dt.sr.mulid()
 *             beta = <char*>self.dt.sr.addid()
 *             (<ctensor*>B.dt).reshape(<ctensor*>self.dt,alpha,beta)             # <<<<<<<<<<<<<<
 *             #inds, vals = self.read_local_nnz()
 *             #B.write(inds, vals)
 */
    ((CTF_int::tensor *)__pyx_v_B->dt)->reshape(((CTF_int::tensor *)__pyx_v_self->dt), __pyx_v_alpha, __pyx_v_beta);

    /* "ctf/tensor.pyx":1475
 *             #inds, vals = self.read_local_nnz()
 *             #B.write(inds, vals)
 *             t_reshape.stop()             # <<<<<<<<<<<<<<
 *             return B
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_reshape, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "ctf/tensor.pyx":1476
 *             #B.write(inds, vals)
 *             t_reshape.stop()
 *             return B             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: can only specify one unknown dimension')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1458
 *             t_reshape.stop()
 *             return B
 *         elif nega == 1:             # <<<<<<<<<<<<<<
 *             pos = 0
 *             for i in range(len(newshape)):
 */
  }

  /* "ctf/tensor.pyx":1478
 *             return B
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: can only specify one unknown dimension')             # <<<<<<<<<<<<<<
 *             t_reshape.stop()
 *             return None
 */
  /*else*/ {
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_Raise(__pyx_t_12, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(0, 1478, __pyx_L1_error)
  }

  /* "ctf/tensor.pyx":1391
 *         return B
 * 
 *     def reshape(tensor self, *integer):             # <<<<<<<<<<<<<<
 *         """
 *         reshape(*integer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("ctf.tensor.tensor.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_integer);
  __Pyx_XDECREF(__pyx_v_t_reshape);
  __Pyx_XDECREF(__pyx_v_dim);
  __Pyx_XDECREF(__pyx_v_total_size);
  __Pyx_XDECREF(__pyx_v_newshape);
  __Pyx_XDECREF(__pyx_v_new_size);
  __Pyx_XDECREF(__pyx_v_nega);
  __Pyx_XDECREF((PyObject *)__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_nega_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1482
 *             return None
 * 
 *     def ravel(self, order="F"):             # <<<<<<<<<<<<<<
 *         """
 *         ravel(order="F")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_81ravel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_80ravel, "\n        ravel(order=\"F\")\n        Return the flattened tensor.\n\n        Returns\n        -------\n        output: tensor_like\n            Output flattened tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3],[4,5,6]])\n        >>> a.ravel()\n        array([1, 2, 3, 4, 5, 6])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_81ravel = {"ravel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_81ravel, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_80ravel};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_81ravel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ravel (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_F));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1482, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ravel") < 0)) __PYX_ERR(0, 1482, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ravel", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1482, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.ravel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_80ravel(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_order);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_80ravel(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ravel", 1);

  /* "ctf/tensor.pyx":1499
 *         array([1, 2, 3, 4, 5, 6])
 *         """
 *         return ctf.tensor_aux.ravel(self, order)             # <<<<<<<<<<<<<<
 * 
 *     def read(self, inds, vals=None, a=None, b=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ravel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_order};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1482
 *             return None
 * 
 *     def ravel(self, order="F"):             # <<<<<<<<<<<<<<
 *         """
 *         ravel(order="F")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.ravel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1501
 *         return ctf.tensor_aux.ravel(self, order)
 * 
 *     def read(self, inds, vals=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         read(inds, vals=None, a=None, b=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_83read(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_82read, "\n        read(inds, vals=None, a=None, b=None)\n\n        Retrieves and accumulates a set of values to a corresponding set of specified indices (a is scaling for vals and b is scaling for old vlaues in tensor).\n        vals[i] = b*vals[i] + a*T[inds[i]]\n        Each MPI process is expected to read a different subset of values and all MPI processes must participate (even if reading nothing).\n        However, the set of values read may overlap.\n        \n        Parameters\n        ----------\n        inds: array (1D or 2D)\n            If 1D array, each index specifies global index, e.g. access T[i,j,k] via n^2*i+n*j+n^2*k, if 2D array, a corresponding row would be [i,j,k]\n        vals: array\n            A 1D array specifying values to be accumulated to for each index, if None, this array will be returned\n        a: scalar\n            Scaling factor to apply to data in tensor (default is 1)\n        b: scalar\n            Scaling factor to apply to vals (default is 0)\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_83read = {"read", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_83read, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_82read};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_83read(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_inds = 0;
  PyObject *__pyx_v_vals = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inds,&__pyx_n_s_vals,&__pyx_n_s_a,&__pyx_n_s_b,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inds)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vals);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read") < 0)) __PYX_ERR(0, 1501, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inds = values[0];
    __pyx_v_vals = values[1];
    __pyx_v_a = values[2];
    __pyx_v_b = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 1501, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_82read(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_inds, __pyx_v_vals, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_82read(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_inds, PyObject *__pyx_v_vals, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_v_iinds = NULL;
  PyObject *__pyx_v_mystrides = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_gvals = NULL;
  PyArrayObject *__pyx_v_buf = 0;
  char *__pyx_v_alpha;
  char *__pyx_v_beta;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_v_na = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_nb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  size_t __pyx_t_14;
  char __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  char *__pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 1);

  /* "ctf/tensor.pyx":1521
 *             Scaling factor to apply to vals (default is 0)
 *         """
 *         iinds = np.asarray(inds)             # <<<<<<<<<<<<<<
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_inds};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_iinds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":1523
 *         iinds = np.asarray(inds)
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:             # <<<<<<<<<<<<<<
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_iinds, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_1, __pyx_int_2, 2, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1524
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:
 *             mystrides = np.ones(self.ndim,dtype=np.int32)             # <<<<<<<<<<<<<<
 *             for i in range(1,self.ndim):
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ones); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_mystrides = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":1525
 *         if iinds.ndim == 2:
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):             # <<<<<<<<<<<<<<
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 *             iinds = np.dot(iinds, np.asarray(mystrides) )
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1)) __PYX_ERR(0, 1525, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7)) __PYX_ERR(0, 1525, __pyx_L1_error);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_1 = __pyx_t_7; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1525, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1525, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1525, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1525, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1525, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1525, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1525, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_1);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1525, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":1526
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]             # <<<<<<<<<<<<<<
 *             iinds = np.dot(iinds, np.asarray(mystrides) )
 *         cdef char * ca
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_7, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_mystrides, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1526, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyNumber_Subtract(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_mystrides, __pyx_t_2, __pyx_t_3) < 0))) __PYX_ERR(0, 1526, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1525
 *         if iinds.ndim == 2:
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):             # <<<<<<<<<<<<<<
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 *             iinds = np.dot(iinds, np.asarray(mystrides) )
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":1527
 *             for i in range(1,self.ndim):
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 *             iinds = np.dot(iinds, np.asarray(mystrides) )             # <<<<<<<<<<<<<<
 *         cdef char * ca
 *         if vals is not None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_mystrides};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_iinds, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_iinds, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":1523
 *         iinds = np.asarray(inds)
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:             # <<<<<<<<<<<<<<
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):
 */
  }

  /* "ctf/tensor.pyx":1529
 *             iinds = np.dot(iinds, np.asarray(mystrides) )
 *         cdef char * ca
 *         if vals is not None:             # <<<<<<<<<<<<<<
 *             if vals.dtype != self.dtype:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 */
  __pyx_t_5 = (__pyx_v_vals != Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1530
 *         cdef char * ca
 *         if vals is not None:
 *             if vals.dtype != self.dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 *         gvals = vals
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vals, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_5)) {

      /* "ctf/tensor.pyx":1531
 *         if vals is not None:
 *             if vals.dtype != self.dtype:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')             # <<<<<<<<<<<<<<
 *         gvals = vals
 *         if vals is None:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1531, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1531, __pyx_L1_error)

      /* "ctf/tensor.pyx":1530
 *         cdef char * ca
 *         if vals is not None:
 *             if vals.dtype != self.dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 *         gvals = vals
 */
    }

    /* "ctf/tensor.pyx":1529
 *             iinds = np.dot(iinds, np.asarray(mystrides) )
 *         cdef char * ca
 *         if vals is not None:             # <<<<<<<<<<<<<<
 *             if vals.dtype != self.dtype:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 */
  }

  /* "ctf/tensor.pyx":1532
 *             if vals.dtype != self.dtype:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 *         gvals = vals             # <<<<<<<<<<<<<<
 *         if vals is None:
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)
 */
  __Pyx_INCREF(__pyx_v_vals);
  __pyx_v_gvals = __pyx_v_vals;

  /* "ctf/tensor.pyx":1533
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 *         gvals = vals
 *         if vals is None:             # <<<<<<<<<<<<<<
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 */
  __pyx_t_5 = (__pyx_v_vals == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1534
 *         gvals = vals
 *         if vals is None:
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)             # <<<<<<<<<<<<<<
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 *         buf['a'][:] = iinds[:]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = PyObject_Length(__pyx_v_iinds); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1534, __pyx_L1_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 1534, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_gvals, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":1533
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')
 *         gvals = vals
 *         if vals is None:             # <<<<<<<<<<<<<<
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 */
  }

  /* "ctf/tensor.pyx":1535
 *         if vals is None:
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))             # <<<<<<<<<<<<<<
 *         buf['a'][:] = iinds[:]
 *         buf['b'][:] = gvals[:]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = PyObject_Length(__pyx_v_iinds); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1535, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6)) __PYX_ERR(0, 1535, __pyx_L1_error);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_b);
  __Pyx_GIVEREF(__pyx_n_s_b);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_b)) __PYX_ERR(0, 1535, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self->dtype);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->dtype);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->dtype))) __PYX_ERR(0, 1535, __pyx_L1_error);
  __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_tuple__46)) __PYX_ERR(0, 1535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10)) __PYX_ERR(0, 1535, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ctf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_helper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_use_align_for_pair); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_13, ((PyObject *)__pyx_v_self->dtype)};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_align, __pyx_t_11) < 0) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1535, __pyx_L1_error)
  __pyx_v_buf = ((PyArrayObject *)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "ctf/tensor.pyx":1536
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 *         buf['a'][:] = iinds[:]             # <<<<<<<<<<<<<<
 *         buf['b'][:] = gvals[:]
 * 
 */
  __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_iinds, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_buf), __pyx_n_s_a); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetSlice(__pyx_t_6, __pyx_t_11, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "ctf/tensor.pyx":1537
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 *         buf['a'][:] = iinds[:]
 *         buf['b'][:] = gvals[:]             # <<<<<<<<<<<<<<
 * 
 *         cdef char * alpha
 */
  __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_gvals, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_buf), __pyx_n_s_b); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetSlice(__pyx_t_6, __pyx_t_11, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "ctf/tensor.pyx":1541
 *         cdef char * alpha
 *         cdef char * beta
 *         st = np.ndarray([],dtype=self.dtype).itemsize             # <<<<<<<<<<<<<<
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_11)) __PYX_ERR(0, 1541, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_st = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "ctf/tensor.pyx":1542
 *         cdef char * beta
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
  __pyx_t_5 = (__pyx_v_a == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1543
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *         else:
 *             alpha = <char*>malloc(st)
 */
    __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

    /* "ctf/tensor.pyx":1542
 *         cdef char * beta
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
    goto __pyx_L10;
  }

  /* "ctf/tensor.pyx":1545
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 *             alpha = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             na = np.array([a])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_st); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1545, __pyx_L1_error)
    __pyx_v_alpha = ((char *)malloc(__pyx_t_14));

    /* "ctf/tensor.pyx":1546
 *         else:
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_a);
    __Pyx_GIVEREF(__pyx_v_a);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_a)) __PYX_ERR(0, 1546, __pyx_L1_error);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_na = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "ctf/tensor.pyx":1547
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 */
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_int_0)) __PYX_ERR(0, 1547, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_st)) __PYX_ERR(0, 1547, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_11 = __pyx_t_3; __Pyx_INCREF(__pyx_t_11);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1547, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_11))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1547, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1547, __pyx_L1_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1547, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1547, __pyx_L1_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_11);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1547, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1548
 *             na = np.array([a])
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_na, __pyx_n_s_view); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_char(__pyx_t_2); if (unlikely((__pyx_t_15 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1548, __pyx_L1_error)
      (__pyx_v_alpha[__pyx_t_16]) = __pyx_t_15;

      /* "ctf/tensor.pyx":1547
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 */
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_L10:;

  /* "ctf/tensor.pyx":1549
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
  __pyx_t_5 = (__pyx_v_b == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1550
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *         else:
 *             beta = <char*>malloc(st)
 */
    __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

    /* "ctf/tensor.pyx":1549
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
    goto __pyx_L14;
  }

  /* "ctf/tensor.pyx":1552
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 *             beta = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             nb = np.array([b])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_st); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1552, __pyx_L1_error)
    __pyx_v_beta = ((char *)malloc(__pyx_t_14));

    /* "ctf/tensor.pyx":1553
 *         else:
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_b)) __PYX_ERR(0, 1553, __pyx_L1_error);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __pyx_v_nb = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "ctf/tensor.pyx":1554
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)
 */
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_int_0)) __PYX_ERR(0, 1554, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_st)) __PYX_ERR(0, 1554, __pyx_L1_error);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_11, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
      __pyx_t_11 = __pyx_t_10; __Pyx_INCREF(__pyx_t_11);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1554, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_11))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1554, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1554, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1554, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1554, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1554, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1554, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_11);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1554, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "ctf/tensor.pyx":1555
 *             nb = np.array([b])
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)
 *         gvals[:] = buf['b'][:]
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_nb, __pyx_n_s_view); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_char(__pyx_t_2); if (unlikely((__pyx_t_15 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L1_error)
      (__pyx_v_beta[__pyx_t_16]) = __pyx_t_15;

      /* "ctf/tensor.pyx":1554
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)
 */
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_L14:;

  /* "ctf/tensor.pyx":1556
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)             # <<<<<<<<<<<<<<
 *         gvals[:] = buf['b'][:]
 *         if a is not None:
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_iinds); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1556, __pyx_L1_error)
  __pyx_t_17 = __pyx_f_5numpy_7ndarray_4data_data(__pyx_v_buf); if (unlikely(__pyx_t_17 == ((char *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L1_error)
  (void)(((CTF_int::tensor *)__pyx_v_self->dt)->read(__pyx_t_8, ((char *)__pyx_v_alpha), ((char *)__pyx_v_beta), __pyx_t_17));

  /* "ctf/tensor.pyx":1557
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)
 *         gvals[:] = buf['b'][:]             # <<<<<<<<<<<<<<
 *         if a is not None:
 *             free(alpha)
 */
  __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_buf), __pyx_n_s_b); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_11, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (__Pyx_PyObject_SetSlice(__pyx_v_gvals, __pyx_t_2, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1558
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)
 *         gvals[:] = buf['b'][:]
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  __pyx_t_5 = (__pyx_v_a != Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1559
 *         gvals[:] = buf['b'][:]
 *         if a is not None:
 *             free(alpha)             # <<<<<<<<<<<<<<
 *         if b is not None:
 *             free(beta)
 */
    free(__pyx_v_alpha);

    /* "ctf/tensor.pyx":1558
 *         (<ctensor*>self.dt).read(len(iinds),<char*>alpha,<char*>beta,buf.data)
 *         gvals[:] = buf['b'][:]
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  }

  /* "ctf/tensor.pyx":1560
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *         if vals is None:
 */
  __pyx_t_5 = (__pyx_v_b != Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1561
 *             free(alpha)
 *         if b is not None:
 *             free(beta)             # <<<<<<<<<<<<<<
 *         if vals is None:
 *             return gvals
 */
    free(__pyx_v_beta);

    /* "ctf/tensor.pyx":1560
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *         if vals is None:
 */
  }

  /* "ctf/tensor.pyx":1562
 *         if b is not None:
 *             free(beta)
 *         if vals is None:             # <<<<<<<<<<<<<<
 *             return gvals
 * 
 */
  __pyx_t_5 = (__pyx_v_vals == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":1563
 *             free(beta)
 *         if vals is None:
 *             return gvals             # <<<<<<<<<<<<<<
 * 
 *     def item(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_gvals);
    __pyx_r = __pyx_v_gvals;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1562
 *         if b is not None:
 *             free(beta)
 *         if vals is None:             # <<<<<<<<<<<<<<
 *             return gvals
 * 
 */
  }

  /* "ctf/tensor.pyx":1501
 *         return ctf.tensor_aux.ravel(self, order)
 * 
 *     def read(self, inds, vals=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         read(inds, vals=None, a=None, b=None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ctf.tensor.tensor.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_iinds);
  __Pyx_XDECREF(__pyx_v_mystrides);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_gvals);
  __Pyx_XDECREF((PyObject *)__pyx_v_buf);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_v_na);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_nb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1565
 *             return gvals
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         """
 *         item()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_85item(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_84item, "\n        item()\n        get value of scalar stored in size 1 tensor\n\n        Returns\n        -------\n        output: scalar\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_85item = {"item", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_85item, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_84item};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_85item(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("item (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("item", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "item", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_84item(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_84item(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("item", 1);

  /* "ctf/tensor.pyx":1574
 *         output: scalar
 *         """
 *         if self.dt.get_tot_size(False) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("item() must be called on array of size 0")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->dt->get_tot_size(0) != 1);
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1575
 *         """
 *         if self.dt.get_tot_size(False) != 1:
 *             raise ValueError("item() must be called on array of size 0")             # <<<<<<<<<<<<<<
 * 
 *         arr = self.read_all()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1575, __pyx_L1_error)

    /* "ctf/tensor.pyx":1574
 *         output: scalar
 *         """
 *         if self.dt.get_tot_size(False) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("item() must be called on array of size 0")
 * 
 */
  }

  /* "ctf/tensor.pyx":1577
 *             raise ValueError("item() must be called on array of size 0")
 * 
 *         arr = self.read_all()             # <<<<<<<<<<<<<<
 *         return arr.item()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_arr = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1578
 * 
 *         arr = self.read_all()
 *         return arr.item()             # <<<<<<<<<<<<<<
 * 
 *     def astype(self, dtype, order='F', casting='unsafe'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_item); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1565
 *             return gvals
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         """
 *         item()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1580
 *         return arr.item()
 * 
 *     def astype(self, dtype, order='F', casting='unsafe'):             # <<<<<<<<<<<<<<
 *         """
 *         astype(dtype, order='F', casting='unsafe')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_87astype(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_86astype, "\n        astype(dtype, order='F', casting='unsafe')\n        Copy the tensor to specified type.\n\n        Parameters\n        ----------\n        dtype: data-type\n            Numpy data-type.\n\n        order: {'F', 'C'}\n            Bytes order for the tensor.\n\n        casting: {\342\200\230no\342\200\231, \342\200\230equiv\342\200\231, \342\200\230safe\342\200\231, \342\200\230same_kind\342\200\231, \342\200\230unsafe\342\200\231}, optional\n            Control the casting. Please refer to numpy.ndarray.astype, please refer to numpy.ndarray.astype for more information.\n\n        Returns\n        -------\n        output: tensor\n            Copied tensor with specified data-type.\n\n        See Also\n        --------\n        numpy: numpy.ndarray.astype\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.dtype\n        <class 'numpy.int64'>\n        >>> a.astype(np.float64).dtype\n        <class 'numpy.float64'>\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_87astype = {"astype", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_87astype, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_86astype};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_87astype(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_v_casting = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("astype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dtype,&__pyx_n_s_order,&__pyx_n_s_casting,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_F));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_unsafe));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_casting);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "astype") < 0)) __PYX_ERR(0, 1580, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dtype = values[0];
    __pyx_v_order = values[1];
    __pyx_v_casting = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("astype", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 1580, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.astype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_86astype(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_dtype, __pyx_v_order, __pyx_v_casting);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_86astype(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_dtype, PyObject *__pyx_v_order, PyObject *__pyx_v_casting) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_B = NULL;
  PyObject *__pyx_v_str_self = NULL;
  PyObject *__pyx_v_str_dtype = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("astype", 0);
  __Pyx_INCREF(__pyx_v_dtype);

  /* "ctf/tensor.pyx":1614
 *         <class 'numpy.float64'>
 *         """
 *         if dtype == 'D':             # <<<<<<<<<<<<<<
 *             return self.astype(np.complex128, order, casting)
 *         if dtype == 'd':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_dtype, __pyx_n_s_D, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1614, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1615
 *         """
 *         if dtype == 'D':
 *             return self.astype(np.complex128, order, casting)             # <<<<<<<<<<<<<<
 *         if dtype == 'd':
 *             return self.astype(np.float64, order, casting)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_complex128); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_t_5, __pyx_v_order, __pyx_v_casting};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1614
 *         <class 'numpy.float64'>
 *         """
 *         if dtype == 'D':             # <<<<<<<<<<<<<<
 *             return self.astype(np.complex128, order, casting)
 *         if dtype == 'd':
 */
  }

  /* "ctf/tensor.pyx":1616
 *         if dtype == 'D':
 *             return self.astype(np.complex128, order, casting)
 *         if dtype == 'd':             # <<<<<<<<<<<<<<
 *             return self.astype(np.float64, order, casting)
 *         if dtype == self.dtype:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_dtype, __pyx_n_s_d, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1616, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1617
 *             return self.astype(np.complex128, order, casting)
 *         if dtype == 'd':
 *             return self.astype(np.float64, order, casting)             # <<<<<<<<<<<<<<
 *         if dtype == self.dtype:
 *             return self.copy()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_5, __pyx_t_4, __pyx_v_order, __pyx_v_casting};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1616
 *         if dtype == 'D':
 *             return self.astype(np.complex128, order, casting)
 *         if dtype == 'd':             # <<<<<<<<<<<<<<
 *             return self.astype(np.float64, order, casting)
 *         if dtype == self.dtype:
 */
  }

  /* "ctf/tensor.pyx":1618
 *         if dtype == 'd':
 *             return self.astype(np.float64, order, casting)
 *         if dtype == self.dtype:             # <<<<<<<<<<<<<<
 *             return self.copy()
 *         if casting == 'unsafe':
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)__pyx_v_self->dtype), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1619
 *             return self.astype(np.float64, order, casting)
 *         if dtype == self.dtype:
 *             return self.copy()             # <<<<<<<<<<<<<<
 *         if casting == 'unsafe':
 *             # may add more types
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1618
 *         if dtype == 'd':
 *             return self.astype(np.float64, order, casting)
 *         if dtype == self.dtype:             # <<<<<<<<<<<<<<
 *             return self.copy()
 *         if casting == 'unsafe':
 */
  }

  /* "ctf/tensor.pyx":1620
 *         if dtype == self.dtype:
 *             return self.copy()
 *         if casting == 'unsafe':             # <<<<<<<<<<<<<<
 *             # may add more types
 *             if dtype == int:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_casting, __pyx_n_s_unsafe, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1620, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1622
 *         if casting == 'unsafe':
 *             # may add more types
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1623
 *             # may add more types
 *             if dtype == int:
 *                 dtype = np.int64             # <<<<<<<<<<<<<<
 *             if dtype == float:
 *                 dtype = np.float64
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1622
 *         if casting == 'unsafe':
 *             # may add more types
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    }

    /* "ctf/tensor.pyx":1624
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if str(dtype) == "<class 'bool'>":
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyFloat_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1625
 *                 dtype = np.int64
 *             if dtype == float:
 *                 dtype = np.float64             # <<<<<<<<<<<<<<
 *             if str(dtype) == "<class 'bool'>":
 *                 dtype = np.bool_
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1624
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if str(dtype) == "<class 'bool'>":
 */
    }

    /* "ctf/tensor.pyx":1626
 *             if dtype == float:
 *                 dtype = np.float64
 *             if str(dtype) == "<class 'bool'>":             # <<<<<<<<<<<<<<
 *                 dtype = np.bool_
 *             if str(dtype) == "<class 'complex'>":
 */
    __pyx_t_2 = __Pyx_PyObject_Str(__pyx_v_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_class_bool, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1627
 *                 dtype = np.float64
 *             if str(dtype) == "<class 'bool'>":
 *                 dtype = np.bool_             # <<<<<<<<<<<<<<
 *             if str(dtype) == "<class 'complex'>":
 *                 dtype = np.complex128
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1626
 *             if dtype == float:
 *                 dtype = np.float64
 *             if str(dtype) == "<class 'bool'>":             # <<<<<<<<<<<<<<
 *                 dtype = np.bool_
 *             if str(dtype) == "<class 'complex'>":
 */
    }

    /* "ctf/tensor.pyx":1628
 *             if str(dtype) == "<class 'bool'>":
 *                 dtype = np.bool_
 *             if str(dtype) == "<class 'complex'>":             # <<<<<<<<<<<<<<
 *                 dtype = np.complex128
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 */
    __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s_class_complex, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1629
 *                 dtype = np.bool_
 *             if str(dtype) == "<class 'complex'>":
 *                 dtype = np.complex128             # <<<<<<<<<<<<<<
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 *             self._convert_type(B)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_complex128); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":1628
 *             if str(dtype) == "<class 'bool'>":
 *                 dtype = np.bool_
 *             if str(dtype) == "<class 'complex'>":             # <<<<<<<<<<<<<<
 *                 dtype = np.complex128
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 */
    }

    /* "ctf/tensor.pyx":1630
 *             if str(dtype) == "<class 'complex'>":
 *                 dtype = np.complex128
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)             # <<<<<<<<<<<<<<
 *             self._convert_type(B)
 *             return B
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_self->shape);
    __Pyx_GIVEREF(__pyx_v_self->shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1630, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp, __pyx_t_4) < 0) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_v_dtype) < 0) __PYX_ERR(0, 1630, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ctf/tensor.pyx":1631
 *                 dtype = np.complex128
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 *             self._convert_type(B)             # <<<<<<<<<<<<<<
 *             return B
 *         elif casting == 'safe':
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_B)};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ctf/tensor.pyx":1632
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 *             self._convert_type(B)
 *             return B             # <<<<<<<<<<<<<<
 *         elif casting == 'safe':
 *             if dtype == int:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1620
 *         if dtype == self.dtype:
 *             return self.copy()
 *         if casting == 'unsafe':             # <<<<<<<<<<<<<<
 *             # may add more types
 *             if dtype == int:
 */
  }

  /* "ctf/tensor.pyx":1633
 *             self._convert_type(B)
 *             return B
 *         elif casting == 'safe':             # <<<<<<<<<<<<<<
 *             if dtype == int:
 *                 dtype = np.int64
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_casting, __pyx_n_s_safe, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1633, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1634
 *             return B
 *         elif casting == 'safe':
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1634, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1634, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1635
 *         elif casting == 'safe':
 *             if dtype == int:
 *                 dtype = np.int64             # <<<<<<<<<<<<<<
 *             if dtype == float:
 *                 dtype = np.float64
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1634
 *             return B
 *         elif casting == 'safe':
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    }

    /* "ctf/tensor.pyx":1636
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             # np.bool_ doesnot have itemsize
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyFloat_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1637
 *                 dtype = np.int64
 *             if dtype == float:
 *                 dtype = np.float64             # <<<<<<<<<<<<<<
 *             # np.bool_ doesnot have itemsize
 *             if (self.dtype != np.bool_ and dtype != np.bool_) and self.itemsize > dtype.itemsize:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1636
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             # np.bool_ doesnot have itemsize
 */
    }

    /* "ctf/tensor.pyx":1639
 *                 dtype = np.float64
 *             # np.bool_ doesnot have itemsize
 *             if (self.dtype != np.bool_ and dtype != np.bool_) and self.itemsize > dtype.itemsize:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             if dtype == np.bool_ and self.dtype != np.bool_:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L14_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L14_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1640
 *             # np.bool_ doesnot have itemsize
 *             if (self.dtype != np.bool_ and dtype != np.bool_) and self.itemsize > dtype.itemsize:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             if dtype == np.bool_ and self.dtype != np.bool_:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1640, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1640, __pyx_L1_error)

      /* "ctf/tensor.pyx":1639
 *                 dtype = np.float64
 *             # np.bool_ doesnot have itemsize
 *             if (self.dtype != np.bool_ and dtype != np.bool_) and self.itemsize > dtype.itemsize:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             if dtype == np.bool_ and self.dtype != np.bool_:
 */
    }

    /* "ctf/tensor.pyx":1641
 *             if (self.dtype != np.bool_ and dtype != np.bool_) and self.itemsize > dtype.itemsize:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             if dtype == np.bool_ and self.dtype != np.bool_:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             str_self = str(self.dtype)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L18_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L18_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1642
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             if dtype == np.bool_ and self.dtype != np.bool_:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1642, __pyx_L1_error)

      /* "ctf/tensor.pyx":1641
 *             if (self.dtype != np.bool_ and dtype != np.bool_) and self.itemsize > dtype.itemsize:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             if dtype == np.bool_ and self.dtype != np.bool_:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             str_self = str(self.dtype)
 */
    }

    /* "ctf/tensor.pyx":1643
 *             if dtype == np.bool_ and self.dtype != np.bool_:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             str_self = str(self.dtype)             # <<<<<<<<<<<<<<
 *             str_dtype = str(dtype)
 *             if "float" in str_self and "int" in str_dtype:
 */
    __pyx_t_2 = __Pyx_PyObject_Str(((PyObject *)__pyx_v_self->dtype)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_str_self = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":1644
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)             # <<<<<<<<<<<<<<
 *             if "float" in str_self and "int" in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 */
    __pyx_t_2 = __Pyx_PyObject_Str(__pyx_v_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_str_dtype = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":1645
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)
 *             if "float" in str_self and "int" in str_dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_float, __pyx_v_str_self, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1645, __pyx_L1_error)
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_int, __pyx_v_str_dtype, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1645, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_7;
    __pyx_L21_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1646
 *             str_dtype = str(dtype)
 *             if "float" in str_self and "int" in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1646, __pyx_L1_error)

      /* "ctf/tensor.pyx":1645
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)
 *             if "float" in str_self and "int" in str_dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):
 */
    }

    /* "ctf/tensor.pyx":1647
 *             if "float" in str_self and "int" in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_complex, __pyx_v_str_self, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1647, __pyx_L1_error)
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_int, __pyx_v_str_dtype, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1647, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_float, __pyx_v_str_dtype, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1647, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_7;
    __pyx_L23_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1648
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 *             self._convert_type(B)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1648, __pyx_L1_error)

      /* "ctf/tensor.pyx":1647
 *             if "float" in str_self and "int" in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 */
    }

    /* "ctf/tensor.pyx":1649
 *             elif "complex" in str_self and ("int" in str_dtype or "float" in str_dtype):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)             # <<<<<<<<<<<<<<
 *             self._convert_type(B)
 *             return B
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_self->shape);
    __Pyx_GIVEREF(__pyx_v_self->shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->shape)) __PYX_ERR(0, 1649, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp, __pyx_t_4) < 0) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_v_dtype) < 0) __PYX_ERR(0, 1649, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ctf/tensor.pyx":1650
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 *             self._convert_type(B)             # <<<<<<<<<<<<<<
 *             return B
 *         elif casting == 'equiv':
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_convert_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_B)};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ctf/tensor.pyx":1651
 *             B = tensor(self.shape, sp=self.sp, dtype = dtype)
 *             self._convert_type(B)
 *             return B             # <<<<<<<<<<<<<<
 *         elif casting == 'equiv':
 *             # only allows byte-wise change
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1633
 *             self._convert_type(B)
 *             return B
 *         elif casting == 'safe':             # <<<<<<<<<<<<<<
 *             if dtype == int:
 *                 dtype = np.int64
 */
  }

  /* "ctf/tensor.pyx":1652
 *             self._convert_type(B)
 *             return B
 *         elif casting == 'equiv':             # <<<<<<<<<<<<<<
 *             # only allows byte-wise change
 *             if dtype == int:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_casting, __pyx_n_s_equiv, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1652, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1654
 *         elif casting == 'equiv':
 *             # only allows byte-wise change
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1655
 *             # only allows byte-wise change
 *             if dtype == int:
 *                 dtype = np.int64             # <<<<<<<<<<<<<<
 *             if dtype == float:
 *                 dtype = np.float64
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1654
 *         elif casting == 'equiv':
 *             # only allows byte-wise change
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    }

    /* "ctf/tensor.pyx":1656
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if self.dtype != dtype:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyFloat_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1657
 *                 dtype = np.int64
 *             if dtype == float:
 *                 dtype = np.float64             # <<<<<<<<<<<<<<
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1656
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if self.dtype != dtype:
 */
    }

    /* "ctf/tensor.pyx":1658
 *             if dtype == float:
 *                 dtype = np.float64
 *             if self.dtype != dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *         elif casting == 'no':
 */
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1659
 *                 dtype = np.float64
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *         elif casting == 'no':
 *             if dtype == int:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1659, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1659, __pyx_L1_error)

      /* "ctf/tensor.pyx":1658
 *             if dtype == float:
 *                 dtype = np.float64
 *             if self.dtype != dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *         elif casting == 'no':
 */
    }

    /* "ctf/tensor.pyx":1652
 *             self._convert_type(B)
 *             return B
 *         elif casting == 'equiv':             # <<<<<<<<<<<<<<
 *             # only allows byte-wise change
 *             if dtype == int:
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":1660
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *         elif casting == 'no':             # <<<<<<<<<<<<<<
 *             if dtype == int:
 *                 dtype = np.int64
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_casting, __pyx_n_s_no, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1660, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1661
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *         elif casting == 'no':
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1662
 *         elif casting == 'no':
 *             if dtype == int:
 *                 dtype = np.int64             # <<<<<<<<<<<<<<
 *             if dtype == float:
 *                 dtype = np.float64
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1661
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *         elif casting == 'no':
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    }

    /* "ctf/tensor.pyx":1663
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if self.dtype != dtype:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyFloat_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1663, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1663, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1664
 *                 dtype = np.int64
 *             if dtype == float:
 *                 dtype = np.float64             # <<<<<<<<<<<<<<
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'".format(self.dtype,dtype))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1663
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             if self.dtype != dtype:
 */
    }

    /* "ctf/tensor.pyx":1665
 *             if dtype == float:
 *                 dtype = np.float64
 *             if self.dtype != dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'".format(self.dtype,dtype))
 *             B = tensor(copy = self)
 */
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1665, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1666
 *                 dtype = np.float64
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             B = tensor(copy = self)
 *             return B
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1666, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1666, __pyx_L1_error)

      /* "ctf/tensor.pyx":1665
 *             if dtype == float:
 *                 dtype = np.float64
 *             if self.dtype != dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'".format(self.dtype,dtype))
 *             B = tensor(copy = self)
 */
    }

    /* "ctf/tensor.pyx":1667
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'".format(self.dtype,dtype))
 *             B = tensor(copy = self)             # <<<<<<<<<<<<<<
 *             return B
 *         elif casting == 'same_kind':
 */
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 1667, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_B = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1668
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'no'".format(self.dtype,dtype))
 *             B = tensor(copy = self)
 *             return B             # <<<<<<<<<<<<<<
 *         elif casting == 'same_kind':
 *             if dtype == int:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1660
 *             if self.dtype != dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'safe'".format(self.dtype,dtype))
 *         elif casting == 'no':             # <<<<<<<<<<<<<<
 *             if dtype == int:
 *                 dtype = np.int64
 */
  }

  /* "ctf/tensor.pyx":1669
 *             B = tensor(copy = self)
 *             return B
 *         elif casting == 'same_kind':             # <<<<<<<<<<<<<<
 *             if dtype == int:
 *                 dtype = np.int64
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_casting, __pyx_n_s_same_kind, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1669, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1670
 *             return B
 *         elif casting == 'same_kind':
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1670, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1671
 *         elif casting == 'same_kind':
 *             if dtype == int:
 *                 dtype = np.int64             # <<<<<<<<<<<<<<
 *             if dtype == float:
 *                 dtype = np.float64
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1670
 *             return B
 *         elif casting == 'same_kind':
 *             if dtype == int:             # <<<<<<<<<<<<<<
 *                 dtype = np.int64
 *             if dtype == float:
 */
    }

    /* "ctf/tensor.pyx":1672
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             str_self = str(self.dtype)
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, ((PyObject *)(&PyFloat_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1672, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1672, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1673
 *                 dtype = np.int64
 *             if dtype == float:
 *                 dtype = np.float64             # <<<<<<<<<<<<<<
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":1672
 *             if dtype == int:
 *                 dtype = np.int64
 *             if dtype == float:             # <<<<<<<<<<<<<<
 *                 dtype = np.float64
 *             str_self = str(self.dtype)
 */
    }

    /* "ctf/tensor.pyx":1674
 *             if dtype == float:
 *                 dtype = np.float64
 *             str_self = str(self.dtype)             # <<<<<<<<<<<<<<
 *             str_dtype = str(dtype)
 *             if 'float' in str_self and 'int' in str_dtype:
 */
    __pyx_t_3 = __Pyx_PyObject_Str(((PyObject *)__pyx_v_self->dtype)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_str_self = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1675
 *                 dtype = np.float64
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)             # <<<<<<<<<<<<<<
 *             if 'float' in str_self and 'int' in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 */
    __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_str_dtype = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1676
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)
 *             if 'float' in str_self and 'int' in str_dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_float, __pyx_v_str_self, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1676, __pyx_L1_error)
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_int, __pyx_v_str_dtype, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1676, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_7;
    __pyx_L35_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1677
 *             str_dtype = str(dtype)
 *             if 'float' in str_self and 'int' in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1677, __pyx_L1_error)

      /* "ctf/tensor.pyx":1676
 *             str_self = str(self.dtype)
 *             str_dtype = str(dtype)
 *             if 'float' in str_self and 'int' in str_dtype:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):
 */
    }

    /* "ctf/tensor.pyx":1678
 *             if 'float' in str_self and 'int' in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if self.dtype != np.bool_ and dtype == np.bool_:
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_complex, __pyx_v_str_self, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1678, __pyx_L1_error)
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L38_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_int, __pyx_v_str_dtype, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1678, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L38_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_float, __pyx_v_str_dtype, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1678, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_7;
    __pyx_L38_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1679
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *             if self.dtype != np.bool_ and dtype == np.bool_:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1679, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1679, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1679, __pyx_L1_error)

      /* "ctf/tensor.pyx":1678
 *             if 'float' in str_self and 'int' in str_dtype:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if self.dtype != np.bool_ and dtype == np.bool_:
 */
    }

    /* "ctf/tensor.pyx":1680
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if self.dtype != np.bool_ and dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_bool); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L42_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_bool); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L42_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ctf/tensor.pyx":1681
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if self.dtype != np.bool_ and dtype == np.bool_:
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->dtype), __pyx_v_dtype};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1681, __pyx_L1_error)

      /* "ctf/tensor.pyx":1680
 *             if 'complex' in str_self and ('int' in str_dtype or ('float' in str_dtype)):
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *             if self.dtype != np.bool_ and dtype == np.bool_:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *         else:
 */
    }

    /* "ctf/tensor.pyx":1669
 *             B = tensor(copy = self)
 *             return B
 *         elif casting == 'same_kind':             # <<<<<<<<<<<<<<
 *             if dtype == int:
 *                 dtype = np.int64
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":1683
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *         else:
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")             # <<<<<<<<<<<<<<
 * 
 *     def read_local(self, unpack_sym=True):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1683, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "ctf/tensor.pyx":1580
 *         return arr.item()
 * 
 *     def astype(self, dtype, order='F', casting='unsafe'):             # <<<<<<<<<<<<<<
 *         """
 *         astype(dtype, order='F', casting='unsafe')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ctf.tensor.tensor.astype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_str_self);
  __Pyx_XDECREF(__pyx_v_str_dtype);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1685
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")
 * 
 *     def read_local(self, unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_89read_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_88read_local, "\n        read_local()\n        Obtains tensor values stored on this MPI process\n\n        Parameters\n        ----------\n        unpack_sym: if true retrieves symmetrically equivalent entries, if alse only the ones unique up to symmetry\n        Returns\n        inds: array of global indices of nonzeros\n        vals: array of values of nonzeros\n        -------\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_89read_local = {"read_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_89read_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_88read_local};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_89read_local(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_unpack_sym = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_local (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unpack_sym,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unpack_sym);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1685, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_local") < 0)) __PYX_ERR(0, 1685, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_unpack_sym = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_local", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1685, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.read_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_88read_local(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_unpack_sym);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_88read_local(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack_sym) {
  int64_t *__pyx_v_cinds;
  char *__pyx_v_cdata;
  int64_t __pyx_v_n;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_local", 1);

  /* "ctf/tensor.pyx":1701
 *         cdef char * cdata
 *         cdef int64_t n
 *         self.dt.read_local(&n,&cinds,&cdata,unpack_sym)             # <<<<<<<<<<<<<<
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unpack_sym); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1701, __pyx_L1_error)
  (void)(__pyx_v_self->dt->read_local((&__pyx_v_n), (&__pyx_v_cinds), (&__pyx_v_cdata), __pyx_t_1));

  /* "ctf/tensor.pyx":1702
 *         cdef int64_t n
 *         self.dt.read_local(&n,&cinds,&cdata,unpack_sym)
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)             # <<<<<<<<<<<<<<
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 *         return inds, vals
 */
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_2, ((char *)__pyx_v_cinds), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_inds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":1703
 *         self.dt.read_local(&n,&cinds,&cdata,unpack_sym)
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)             # <<<<<<<<<<<<<<
 *         return inds, vals
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->dtype);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_2 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_3, __pyx_v_cdata, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vals = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1704
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 *         return inds, vals             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, other, out=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_inds);
  __Pyx_GIVEREF(__pyx_v_inds);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_inds)) __PYX_ERR(0, 1704, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_vals)) __PYX_ERR(0, 1704, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1685
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")
 * 
 *     def read_local(self, unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.read_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1706
 *         return inds, vals
 * 
 *     def dot(self, other, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         dot(other, out=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_91dot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_90dot, "\n        dot(other, out=None)\n        Return the dot product with tensor other.\n\n        Parameters\n        ----------\n        other: tensor_like\n            The other input tensor.\n\n        out: tensor\n            Currently not supported in CTF Python.\n\n        Returns\n        -------\n        output: tensor\n            Dot product of two tensors.\n\n        See Also\n        --------\n        numpy: numpy.dot()\n        ctf: dot()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> b = astensor([1,1,1])\n        >>> a.dot(b)\n        array([ 6, 15, 24])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_91dot = {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_91dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_90dot};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_91dot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other = 0;
  PyObject *__pyx_v_out = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_out,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1706, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_out);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1706, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dot") < 0)) __PYX_ERR(0, 1706, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = values[0];
    __pyx_v_out = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dot", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1706, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_90dot(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_other, __pyx_v_out);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_90dot(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_out) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 1);

  /* "ctf/tensor.pyx":1737
 *         array([ 6, 15, 24])
 *         """
 *         return ctf.tensor_aux.dot(self,other,out)             # <<<<<<<<<<<<<<
 * 
 *     def tensordot(self, other, axes):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_v_out};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1706
 *         return inds, vals
 * 
 *     def dot(self, other, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         dot(other, out=None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1739
 *         return ctf.tensor_aux.dot(self,other,out)
 * 
 *     def tensordot(self, other, axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensordot(other, axes=2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_93tensordot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_92tensordot, "\n        tensordot(other, axes=2)\n        Return the tensor dot product of two tensors along axes.\n\n        Parameters\n        ----------\n        other: tensor_like\n            Second input tensor.\n\n        axes: int or array_like\n            Sum over which axes.\n\n        Returns\n        -------\n        output: tensor\n            Tensor dot product of two tensors.\n\n        See Also\n        --------\n        numpy: numpy.tensordot()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> import numpy as np\n        >>> a = np.arange(60.).reshape(3,4,5)\n        >>> b = np.arange(24.).reshape(4,3,2)\n        >>> a = astensor(a)\n        >>> b = astensor(b)\n        >>> a.tensordot(b, axes=([1,0],[0,1]))\n        array([[4400., 4730.],\n               [4532., 4874.],\n               [4664., 5018.],\n               [4796., 5162.],\n               [4928., 5306.]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_93tensordot = {"tensordot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_93tensordot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_92tensordot};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_93tensordot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other = 0;
  PyObject *__pyx_v_axes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tensordot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_axes,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1739, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axes)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1739, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("tensordot", 1, 2, 2, 1); __PYX_ERR(0, 1739, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "tensordot") < 0)) __PYX_ERR(0, 1739, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_other = values[0];
    __pyx_v_axes = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tensordot", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1739, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.tensordot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_92tensordot(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_other, __pyx_v_axes);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_92tensordot(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_axes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tensordot", 1);

  /* "ctf/tensor.pyx":1776
 *                [4928., 5306.]])
 *         """
 *         return ctf.tensor_aux.tensordot(self,other,axes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensordot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_v_axes};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1739
 *         return ctf.tensor_aux.dot(self,other,out)
 * 
 *     def tensordot(self, other, axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensordot(other, axes=2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.tensordot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1779
 * 
 * 
 *     def read_local_nnz(self,unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local_nnz()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_95read_local_nnz(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_94read_local_nnz, "\n        read_local_nnz()\n        Obtains nonzeros of tensor stored on this MPI process\n\n        Parameters\n        ----------\n        unpack_sym: if true retrieves symmetrically equivalent entries, if alse only the ones unique up to symmetry\n        Returns\n        inds: array of global indices of nonzeros\n        vals: array of values of nonzeros\n        -------\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_95read_local_nnz = {"read_local_nnz", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_95read_local_nnz, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_94read_local_nnz};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_95read_local_nnz(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_unpack_sym = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_local_nnz (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unpack_sym,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unpack_sym);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1779, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_local_nnz") < 0)) __PYX_ERR(0, 1779, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_unpack_sym = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_local_nnz", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1779, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.read_local_nnz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_94read_local_nnz(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_unpack_sym);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_94read_local_nnz(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack_sym) {
  int64_t *__pyx_v_cinds;
  char *__pyx_v_cdata;
  int64_t __pyx_v_n;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_local_nnz", 1);

  /* "ctf/tensor.pyx":1795
 *         cdef char * cdata
 *         cdef int64_t n
 *         self.dt.read_local_nnz(&n,&cinds,&cdata,unpack_sym)             # <<<<<<<<<<<<<<
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unpack_sym); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)
  (void)(__pyx_v_self->dt->read_local_nnz((&__pyx_v_n), (&__pyx_v_cinds), (&__pyx_v_cdata), __pyx_t_1));

  /* "ctf/tensor.pyx":1796
 *         cdef int64_t n
 *         self.dt.read_local_nnz(&n,&cinds,&cdata,unpack_sym)
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)             # <<<<<<<<<<<<<<
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 *         return inds, vals
 */
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_2, ((char *)__pyx_v_cinds), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_inds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":1797
 *         self.dt.read_local_nnz(&n,&cinds,&cdata,unpack_sym)
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)             # <<<<<<<<<<<<<<
 *         return inds, vals
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->dtype);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_2 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_3, __pyx_v_cdata, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vals = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1798
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 *         return inds, vals             # <<<<<<<<<<<<<<
 * 
 *     def tot_size(self, unpack=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_inds);
  __Pyx_GIVEREF(__pyx_v_inds);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_inds)) __PYX_ERR(0, 1798, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_vals)) __PYX_ERR(0, 1798, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1779
 * 
 * 
 *     def read_local_nnz(self,unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local_nnz()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.read_local_nnz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1800
 *         return inds, vals
 * 
 *     def tot_size(self, unpack=True):             # <<<<<<<<<<<<<<
 *         return self.dt.get_tot_size(not unpack)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_97tot_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_97tot_size = {"tot_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_97tot_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_97tot_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_unpack = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tot_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unpack,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unpack);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1800, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "tot_size") < 0)) __PYX_ERR(0, 1800, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_unpack = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tot_size", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1800, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.tot_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_96tot_size(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_unpack);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_96tot_size(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tot_size", 1);

  /* "ctf/tensor.pyx":1801
 * 
 *     def tot_size(self, unpack=True):
 *         return self.dt.get_tot_size(not unpack)             # <<<<<<<<<<<<<<
 * 
 *     def read_all(self, arr=None, unpack=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unpack); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1801, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_self->dt->get_tot_size((!__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1800
 *         return inds, vals
 * 
 *     def tot_size(self, unpack=True):             # <<<<<<<<<<<<<<
 *         return self.dt.get_tot_size(not unpack)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor.tot_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1803
 *         return self.dt.get_tot_size(not unpack)
 * 
 *     def read_all(self, arr=None, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all(arr=None, unpack=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_99read_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_98read_all, "\n        read_all(arr=None, unpack=True)\n        reads all values in the tensor\n\n        Parameters\n        ----------\n        arr: array (optional, default: None)\n            preallocated storage for data, of size equal to number of elements in tensor\n        unpack: bool (default: True)\n            whether to read symmetrically-equivallent values or only unique values\n        Returns\n        -------\n        output: tensor if arr is None, otherwise nothing\n        ----------\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_99read_all = {"read_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_99read_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_98read_all};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_99read_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_unpack = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_all (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_unpack,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arr);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unpack);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_all") < 0)) __PYX_ERR(0, 1803, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arr = values[0];
    __pyx_v_unpack = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_all", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 1803, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.read_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_98read_all(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_arr, __pyx_v_unpack);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_98read_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_unpack) {
  char *__pyx_v_cvals;
  int64_t __pyx_v_sz;
  PyObject *__pyx_v_tB = NULL;
  PyObject *__pyx_v_arr_in = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  size_t __pyx_t_8;
  bool __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_all", 1);

  /* "ctf/tensor.pyx":1821
 *         cdef char * cvals
 *         cdef int64_t sz
 *         sz = self.dt.get_tot_size(not unpack)             # <<<<<<<<<<<<<<
 *         tB = self.dtype.itemsize
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unpack); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1821, __pyx_L1_error)
  __pyx_v_sz = __pyx_v_self->dt->get_tot_size((!__pyx_t_1));

  /* "ctf/tensor.pyx":1822
 *         cdef int64_t sz
 *         sz = self.dt.get_tot_size(not unpack)
 *         tB = self.dtype.itemsize             # <<<<<<<<<<<<<<
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             arr_in = arr
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->dtype->elsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_tB = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1823
 *         sz = self.dt.get_tot_size(not unpack)
 *         tB = self.dtype.itemsize
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             arr_in = arr
 *             if arr is None:
 */
  __pyx_t_3 = (__pyx_v_self->dt->wrld->np == 1);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_self->sp == 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_SYM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_NS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->sym), __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1824
 *         tB = self.dtype.itemsize
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             arr_in = arr             # <<<<<<<<<<<<<<
 *             if arr is None:
 *                 arr_in = np.zeros(sz, dtype=self.dtype)
 */
    __Pyx_INCREF(__pyx_v_arr);
    __pyx_v_arr_in = __pyx_v_arr;

    /* "ctf/tensor.pyx":1825
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             arr_in = arr
 *             if arr is None:             # <<<<<<<<<<<<<<
 *                 arr_in = np.zeros(sz, dtype=self.dtype)
 *             self.__read_all(arr_in)
 */
    __pyx_t_1 = (__pyx_v_arr == Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1826
 *             arr_in = arr
 *             if arr is None:
 *                 arr_in = np.zeros(sz, dtype=self.dtype)             # <<<<<<<<<<<<<<
 *             self.__read_all(arr_in)
 *             if arr is None:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_sz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 1826, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_arr_in, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ctf/tensor.pyx":1825
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             arr_in = arr
 *             if arr is None:             # <<<<<<<<<<<<<<
 *                 arr_in = np.zeros(sz, dtype=self.dtype)
 *             self.__read_all(arr_in)
 */
    }

    /* "ctf/tensor.pyx":1827
 *             if arr is None:
 *                 arr_in = np.zeros(sz, dtype=self.dtype)
 *             self.__read_all(arr_in)             # <<<<<<<<<<<<<<
 *             if arr is None:
 *                 return arr_in
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tensor__read_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_arr_in};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":1828
 *                 arr_in = np.zeros(sz, dtype=self.dtype)
 *             self.__read_all(arr_in)
 *             if arr is None:             # <<<<<<<<<<<<<<
 *                 return arr_in
 *             else:
 */
    __pyx_t_1 = (__pyx_v_arr == Py_None);
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":1829
 *             self.__read_all(arr_in)
 *             if arr is None:
 *                 return arr_in             # <<<<<<<<<<<<<<
 *             else:
 *                 return
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_arr_in);
      __pyx_r = __pyx_v_arr_in;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":1828
 *                 arr_in = np.zeros(sz, dtype=self.dtype)
 *             self.__read_all(arr_in)
 *             if arr is None:             # <<<<<<<<<<<<<<
 *                 return arr_in
 *             else:
 */
    }

    /* "ctf/tensor.pyx":1831
 *                 return arr_in
 *             else:
 *                 return             # <<<<<<<<<<<<<<
 *         cvals = <char*> malloc(sz*tB)
 *         self.dt.allread(&sz, cvals, unpack)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }

    /* "ctf/tensor.pyx":1823
 *         sz = self.dt.get_tot_size(not unpack)
 *         tB = self.dtype.itemsize
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             arr_in = arr
 *             if arr is None:
 */
  }

  /* "ctf/tensor.pyx":1832
 *             else:
 *                 return
 *         cvals = <char*> malloc(sz*tB)             # <<<<<<<<<<<<<<
 *         self.dt.allread(&sz, cvals, unpack)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 */
  __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_sz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_v_tB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cvals = ((char *)malloc(__pyx_t_8));

  /* "ctf/tensor.pyx":1833
 *                 return
 *         cvals = <char*> malloc(sz*tB)
 *         self.dt.allread(&sz, cvals, unpack)             # <<<<<<<<<<<<<<
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         if arr is None:
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_unpack); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1833, __pyx_L1_error)
  __pyx_v_self->dt->allread((&__pyx_v_sz), __pyx_v_cvals, __pyx_t_9);

  /* "ctf/tensor.pyx":1834
 *         cvals = <char*> malloc(sz*tB)
 *         self.dt.allread(&sz, cvals, unpack)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)             # <<<<<<<<<<<<<<
 *         if arr is None:
 *             return vals
 */
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_sz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = ((PyObject *)__pyx_v_self->dtype);
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_4 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_2, __pyx_v_cvals, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_vals = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":1835
 *         self.dt.allread(&sz, cvals, unpack)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         if arr is None:             # <<<<<<<<<<<<<<
 *             return vals
 *         else:
 */
  __pyx_t_1 = (__pyx_v_arr == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1836
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         if arr is None:
 *             return vals             # <<<<<<<<<<<<<<
 *         else:
 *             arr[:] = vals[:]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_vals);
    __pyx_r = __pyx_v_vals;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":1835
 *         self.dt.allread(&sz, cvals, unpack)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         if arr is None:             # <<<<<<<<<<<<<<
 *             return vals
 *         else:
 */
  }

  /* "ctf/tensor.pyx":1838
 *             return vals
 *         else:
 *             arr[:] = vals[:]             # <<<<<<<<<<<<<<
 * 
 *     def read_all_nnz(self, unpack=True):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_vals, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_PyObject_SetSlice(__pyx_v_arr, __pyx_t_4, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "ctf/tensor.pyx":1803
 *         return self.dt.get_tot_size(not unpack)
 * 
 *     def read_all(self, arr=None, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all(arr=None, unpack=True)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ctf.tensor.tensor.read_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tB);
  __Pyx_XDECREF(__pyx_v_arr_in);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1840
 *             arr[:] = vals[:]
 * 
 *     def read_all_nnz(self, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all_nnz(arr=None, unpack=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_101read_all_nnz(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_100read_all_nnz, "\n        read_all_nnz(arr=None, unpack=True)\n        reads all nonzero values in the tensor as key-value pairs where key is the global index\n\n        Parameters\n        ----------\n        unpack: bool (default: True)\n            whether to read symmetrically-equivallent values or only unique values\n\n        Returns\n        -------\n        inds: global indices of each nonzero values\n        vals: the nonzero values\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_101read_all_nnz = {"read_all_nnz", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_101read_all_nnz, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_100read_all_nnz};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_101read_all_nnz(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_unpack = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_all_nnz (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unpack,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unpack);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1840, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_all_nnz") < 0)) __PYX_ERR(0, 1840, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_unpack = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_all_nnz", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1840, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.read_all_nnz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_100read_all_nnz(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_unpack);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_100read_all_nnz(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_unpack) {
  int64_t *__pyx_v_cinds;
  char *__pyx_v_cdata;
  int64_t __pyx_v_n;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_all_nnz", 1);

  /* "ctf/tensor.pyx":1858
 *         cdef char * cdata
 *         cdef int64_t n
 *         self.dt.read_all_pairs(&n, unpack, &cinds, &cdata, True)             # <<<<<<<<<<<<<<
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unpack); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L1_error)
  __pyx_v_self->dt->read_all_pairs((&__pyx_v_n), __pyx_t_1, (&__pyx_v_cinds), (&__pyx_v_cdata), 1);

  /* "ctf/tensor.pyx":1859
 *         cdef int64_t n
 *         self.dt.read_all_pairs(&n, unpack, &cinds, &cdata, True)
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)             # <<<<<<<<<<<<<<
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 *         return inds, vals
 */
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_2, ((char *)__pyx_v_cinds), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_inds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":1860
 *         self.dt.read_all_pairs(&n, unpack, &cinds, &cdata, True)
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)             # <<<<<<<<<<<<<<
 *         return inds, vals
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->dtype);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_2 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_3, __pyx_v_cdata, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vals = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":1861
 *         inds = _cast_carray_as_python(n, <char*>cinds, np.int64)
 *         vals = _cast_carray_as_python(n, cdata, self.dtype)
 *         return inds, vals             # <<<<<<<<<<<<<<
 * 
 *     def __read_all(self, arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_inds);
  __Pyx_GIVEREF(__pyx_v_inds);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_inds)) __PYX_ERR(0, 1861, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_vals)) __PYX_ERR(0, 1861, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1840
 *             arr[:] = vals[:]
 * 
 *     def read_all_nnz(self, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all_nnz(arr=None, unpack=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.read_all_nnz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1863
 *         return inds, vals
 * 
 *     def __read_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __read_all(arr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_103_tensor__read_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_102__read_all, "\n        __read_all(arr)\n        Helper function for reading data from tensor, works only with one processor with dense nonsymmetric tensor.\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_103_tensor__read_all = {"_tensor__read_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_103_tensor__read_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_102__read_all};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_103_tensor__read_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_arr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tensor__read_all (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1863, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_tensor__read_all") < 0)) __PYX_ERR(0, 1863, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_arr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_tensor__read_all", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1863, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._tensor__read_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_102__read_all(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_arr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_102__read_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr) {
  char *__pyx_v_cvals;
  int64_t __pyx_v_sz;
  CYTHON_UNUSED PyObject *__pyx_v_tB = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_tensor__read_all", 1);

  /* "ctf/tensor.pyx":1868
 *         Helper function for reading data from tensor, works only with one processor with dense nonsymmetric tensor.
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: cannot __read_all for this type of tensor")
 *         cdef char * cvals
 */
  __pyx_t_2 = (__pyx_v_self->dt->wrld->np != 1);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->sp != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_SYM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_NS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->sym), __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = (!__pyx_t_2);
  __pyx_t_1 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1869
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):
 *             raise ValueError("CTF PYTHON ERROR: cannot __read_all for this type of tensor")             # <<<<<<<<<<<<<<
 *         cdef char * cvals
 *         cdef int64_t sz
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1869, __pyx_L1_error)

    /* "ctf/tensor.pyx":1868
 *         Helper function for reading data from tensor, works only with one processor with dense nonsymmetric tensor.
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: cannot __read_all for this type of tensor")
 *         cdef char * cvals
 */
  }

  /* "ctf/tensor.pyx":1872
 *         cdef char * cvals
 *         cdef int64_t sz
 *         sz = self.dt.get_tot_size(False)             # <<<<<<<<<<<<<<
 *         tB = arr.dtype.itemsize
 *         self.dt.get_raw_data(&cvals, &sz)
 */
  __pyx_v_sz = __pyx_v_self->dt->get_tot_size(0);

  /* "ctf/tensor.pyx":1873
 *         cdef int64_t sz
 *         sz = self.dt.get_tot_size(False)
 *         tB = arr.dtype.itemsize             # <<<<<<<<<<<<<<
 *         self.dt.get_raw_data(&cvals, &sz)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_tB = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":1874
 *         sz = self.dt.get_tot_size(False)
 *         tB = arr.dtype.itemsize
 *         self.dt.get_raw_data(&cvals, &sz)             # <<<<<<<<<<<<<<
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         arr[:] = vals[:]
 */
  __pyx_v_self->dt->get_raw_data((&__pyx_v_cvals), (&__pyx_v_sz));

  /* "ctf/tensor.pyx":1875
 *         tB = arr.dtype.itemsize
 *         self.dt.get_raw_data(&cvals, &sz)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)             # <<<<<<<<<<<<<<
 *         arr[:] = vals[:]
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_sz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->dtype);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_5, __pyx_v_cvals, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vals = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":1876
 *         self.dt.get_raw_data(&cvals, &sz)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         arr[:] = vals[:]             # <<<<<<<<<<<<<<
 * 
 *     def __write_all(self, arr):
 */
  __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_vals, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetSlice(__pyx_v_arr, __pyx_t_4, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":1863
 *         return inds, vals
 * 
 *     def __read_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __read_all(arr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ctf.tensor.tensor._tensor__read_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tB);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1878
 *         arr[:] = vals[:]
 * 
 *     def __write_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __write_all(arr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_105_tensor__write_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_104__write_all, "\n        __write_all(arr)\n        Helper function on writing data in arr to tensor, works only with one processor with dense nonsymmetric tensor.\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_105_tensor__write_all = {"_tensor__write_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_105_tensor__write_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_104__write_all};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_105_tensor__write_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_arr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tensor__write_all (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1878, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_tensor__write_all") < 0)) __PYX_ERR(0, 1878, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_arr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_tensor__write_all", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1878, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._tensor__write_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_104__write_all(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_arr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_104__write_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr) {
  char *__pyx_v_cvals;
  int64_t __pyx_v_sz;
  CYTHON_UNUSED PyObject *__pyx_v_tB = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_rarr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_tensor__write_all", 1);

  /* "ctf/tensor.pyx":1883
 *         Helper function on writing data in arr to tensor, works only with one processor with dense nonsymmetric tensor.
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: cannot __write_all for this type of tensor")
 *         cdef char * cvals
 */
  __pyx_t_2 = (__pyx_v_self->dt->wrld->np != 1);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->sp != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_SYM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_NS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->sym), __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = (!__pyx_t_2);
  __pyx_t_1 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1884
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):
 *             raise ValueError("CTF PYTHON ERROR: cannot __write_all for this type of tensor")             # <<<<<<<<<<<<<<
 *         cdef char * cvals
 *         cdef int64_t sz
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1884, __pyx_L1_error)

    /* "ctf/tensor.pyx":1883
 *         Helper function on writing data in arr to tensor, works only with one processor with dense nonsymmetric tensor.
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: cannot __write_all for this type of tensor")
 *         cdef char * cvals
 */
  }

  /* "ctf/tensor.pyx":1887
 *         cdef char * cvals
 *         cdef int64_t sz
 *         sz = self.dt.get_tot_size(False)             # <<<<<<<<<<<<<<
 *         tB = arr.dtype.itemsize
 *         self.dt.get_raw_data(&cvals, &sz)
 */
  __pyx_v_sz = __pyx_v_self->dt->get_tot_size(0);

  /* "ctf/tensor.pyx":1888
 *         cdef int64_t sz
 *         sz = self.dt.get_tot_size(False)
 *         tB = arr.dtype.itemsize             # <<<<<<<<<<<<<<
 *         self.dt.get_raw_data(&cvals, &sz)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_tB = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":1889
 *         sz = self.dt.get_tot_size(False)
 *         tB = arr.dtype.itemsize
 *         self.dt.get_raw_data(&cvals, &sz)             # <<<<<<<<<<<<<<
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         rarr = arr.ravel()
 */
  __pyx_v_self->dt->get_raw_data((&__pyx_v_cvals), (&__pyx_v_sz));

  /* "ctf/tensor.pyx":1890
 *         tB = arr.dtype.itemsize
 *         self.dt.get_raw_data(&cvals, &sz)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)             # <<<<<<<<<<<<<<
 *         rarr = arr.ravel()
 *         vals[:] = rarr[:]
 */
  __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_sz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->dtype);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_3ctf_7chelper__cast_carray_as_python(__pyx_t_5, __pyx_v_cvals, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vals = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":1891
 *         self.dt.get_raw_data(&cvals, &sz)
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         rarr = arr.ravel()             # <<<<<<<<<<<<<<
 *         vals[:] = rarr[:]
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_ravel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_rarr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":1892
 *         vals = _cast_carray_as_python(sz, cvals, self.dtype)
 *         rarr = arr.ravel()
 *         vals[:] = rarr[:]             # <<<<<<<<<<<<<<
 * 
 *     def conj(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_rarr, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetSlice(__pyx_v_vals, __pyx_t_4, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":1878
 *         arr[:] = vals[:]
 * 
 *     def __write_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __write_all(arr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ctf.tensor.tensor._tensor__write_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tB);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_rarr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1894
 *         vals[:] = rarr[:]
 * 
 *     def conj(self):             # <<<<<<<<<<<<<<
 *         """
 *         conj()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_107conj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_106conj, "\n        conj()\n        Return the self conjugate tensor element-wisely.\n\n        Returns\n        -------\n        output: tensor\n            The element-wise complex conjugate of the tensor. If the tensor is not complex, just return a copy.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([2+3j, 3-2j])\n        >>> a\n        array([2.+3.j, 3.-2.j])\n        >>> a.conj()\n        array([2.-3.j, 3.+2.j])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_107conj = {"conj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_107conj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_106conj};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_107conj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("conj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "conj", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_106conj(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_106conj(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conj", 1);

  /* "ctf/tensor.pyx":1913
 *         array([2.-3.j, 3.+2.j])
 *         """
 *         return ctf.tensor_aux.conj(self)             # <<<<<<<<<<<<<<
 * 
 *     def permute(self, tensor A, p_A=None, p_B=None, a=None, b=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_conj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":1894
 *         vals[:] = rarr[:]
 * 
 *     def conj(self):             # <<<<<<<<<<<<<<
 *         """
 *         conj()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.conj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":1915
 *         return ctf.tensor_aux.conj(self)
 * 
 *     def permute(self, tensor A, p_A=None, p_B=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         permute(self, tensor A, p_A=None, p_B=None, a=None, b=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_109permute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_108permute, "\n        permute(self, tensor A, p_A=None, p_B=None, a=None, b=None)\n\n        Permute the tensor along each mode, so that\n            self[p_B[0,i_1],....,p_B[self.ndim-1,i_ndim]] = A[i_1,....,i_ndim]\n        or\n            B[i_1,....,i_ndim] = A[p_A[0,i_1],....,p_A[self.ndim-1,i_ndim]]\n        exactly one of p_A or p_B should be provided.\n\n        Parameters\n        ----------\n        A: CTF tensor\n            Tensor whose data will be permuted.\n        p_A: list of arrays\n            List of length A.ndim, the ith item of which is an array of slength A.shape[i], with values specifying the\n            permutation target of that index or -1 to denote that this index should be projected away.\n        p_B: list of arrays\n            List of length self.ndim, the ith item of which is an array of slength Aselfshape[i], with values specifying the\n            permutation target of that index or -1 to denote that this index should not be permuted to.\n        a: scalar\n            Scaling for values in a (default 1)\n        b: scalar\n            Scaling for values in self (default 0)\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_109permute = {"permute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_109permute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_108permute};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_109permute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A = 0;
  PyObject *__pyx_v_p_A = 0;
  PyObject *__pyx_v_p_B = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("permute (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_p_A,&__pyx_n_s_p_B,&__pyx_n_s_a,&__pyx_n_s_b,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1915, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p_A);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p_B);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1915, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "permute") < 0)) __PYX_ERR(0, 1915, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_A = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
    __pyx_v_p_A = values[1];
    __pyx_v_p_B = values[2];
    __pyx_v_a = values[3];
    __pyx_v_b = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("permute", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 1915, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.permute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_3ctf_6tensor_tensor, 1, "A", 0))) __PYX_ERR(0, 1915, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_108permute(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_A, __pyx_v_p_A, __pyx_v_p_B, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_108permute(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A, PyObject *__pyx_v_p_A, PyObject *__pyx_v_p_B, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  char *__pyx_v_alpha;
  char *__pyx_v_beta;
  int **__pyx_v_permutation_A;
  int **__pyx_v_permutation_B;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_v_na = NULL;
  PyObject *__pyx_v_nb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  char __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("permute", 1);

  /* "ctf/tensor.pyx":1940
 *             Scaling for values in self (default 0)
 *         """
 *         if p_A is None and p_B is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")
 *         if p_A is not None and p_B is not None:
 */
  __pyx_t_2 = (__pyx_v_p_A == Py_None);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p_B == Py_None);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1941
 *         """
 *         if p_A is None and p_B is None:
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")             # <<<<<<<<<<<<<<
 *         if p_A is not None and p_B is not None:
 *             raise ValueError("CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1941, __pyx_L1_error)

    /* "ctf/tensor.pyx":1940
 *             Scaling for values in self (default 0)
 *         """
 *         if p_A is None and p_B is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")
 *         if p_A is not None and p_B is not None:
 */
  }

  /* "ctf/tensor.pyx":1942
 *         if p_A is None and p_B is None:
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")
 *         if p_A is not None and p_B is not None:             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined")
 *         cdef char * alpha
 */
  __pyx_t_2 = (__pyx_v_p_A != Py_None);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p_B != Py_None);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ctf/tensor.pyx":1943
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")
 *         if p_A is not None and p_B is not None:
 *             raise ValueError("CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined")             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1943, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1943, __pyx_L1_error)

    /* "ctf/tensor.pyx":1942
 *         if p_A is None and p_B is None:
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")
 *         if p_A is not None and p_B is not None:             # <<<<<<<<<<<<<<
 *             raise ValueError("CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined")
 *         cdef char * alpha
 */
  }

  /* "ctf/tensor.pyx":1946
 *         cdef char * alpha
 *         cdef char * beta
 *         cdef int ** permutation_A = NULL             # <<<<<<<<<<<<<<
 *         cdef int ** permutation_B = NULL
 *         if p_A is not None:
 */
  __pyx_v_permutation_A = NULL;

  /* "ctf/tensor.pyx":1947
 *         cdef char * beta
 *         cdef int ** permutation_A = NULL
 *         cdef int ** permutation_B = NULL             # <<<<<<<<<<<<<<
 *         if p_A is not None:
 * #            p_A = np.asarray(p_A)
 */
  __pyx_v_permutation_B = NULL;

  /* "ctf/tensor.pyx":1948
 *         cdef int ** permutation_A = NULL
 *         cdef int ** permutation_B = NULL
 *         if p_A is not None:             # <<<<<<<<<<<<<<
 * #            p_A = np.asarray(p_A)
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)
 */
  __pyx_t_1 = (__pyx_v_p_A != Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1950
 *         if p_A is not None:
 * #            p_A = np.asarray(p_A)
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 if A.order == 'F':
 */
    __pyx_v_permutation_A = ((int **)malloc(((sizeof(int *)) * __pyx_v_A->ndim)));

    /* "ctf/tensor.pyx":1951
 * #            p_A = np.asarray(p_A)
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 if A.order == 'F':
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1951, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1951, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1951, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1951, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1951, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1951, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1951, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1951, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1952
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)
 *             for i in range(self.ndim):
 *                 if A.order == 'F':             # <<<<<<<<<<<<<<
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 *                     for j in range(A.shape[-i-1]):
 */
      __pyx_t_1 = (__pyx_v_A->order == 'F');
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1953
 *             for i in range(self.ndim):
 *                 if A.order == 'F':
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])             # <<<<<<<<<<<<<<
 *                     for j in range(A.shape[-i-1]):
 *                         permutation_A[i][j] = p_A[-i-1][j]
 */
        __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__pyx_v_A->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1953, __pyx_L1_error)
        }
        __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_A->shape, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_8); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1953, __pyx_L1_error)
        (__pyx_v_permutation_A[__pyx_t_10]) = ((int *)malloc(__pyx_t_9));

        /* "ctf/tensor.pyx":1954
 *                 if A.order == 'F':
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 *                     for j in range(A.shape[-i-1]):             # <<<<<<<<<<<<<<
 *                         permutation_A[i][j] = p_A[-i-1][j]
 *                 else:
 */
        if (unlikely(__pyx_v_A->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1954, __pyx_L1_error)
        }
        __pyx_t_8 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_A->shape, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8);
          __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1954, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1954, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1954, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1954, __pyx_L1_error)
              #else
              __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1954, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1954, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1954, __pyx_L1_error)
              #else
              __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1954, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_11(__pyx_t_8);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1954, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "ctf/tensor.pyx":1955
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 *                     for j in range(A.shape[-i-1]):
 *                         permutation_A[i][j] = p_A[-i-1][j]             # <<<<<<<<<<<<<<
 *                 else:
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[i])
 */
          __pyx_t_7 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1955, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1955, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_p_A, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1955, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1955, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1955, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1955, __pyx_L1_error)
          __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1955, __pyx_L1_error)
          ((__pyx_v_permutation_A[__pyx_t_13])[__pyx_t_14]) = __pyx_t_12;

          /* "ctf/tensor.pyx":1954
 *                 if A.order == 'F':
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 *                     for j in range(A.shape[-i-1]):             # <<<<<<<<<<<<<<
 *                         permutation_A[i][j] = p_A[-i-1][j]
 *                 else:
 */
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ctf/tensor.pyx":1952
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)
 *             for i in range(self.ndim):
 *                 if A.order == 'F':             # <<<<<<<<<<<<<<
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 *                     for j in range(A.shape[-i-1]):
 */
        goto __pyx_L12;
      }

      /* "ctf/tensor.pyx":1957
 *                         permutation_A[i][j] = p_A[-i-1][j]
 *                 else:
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[i])             # <<<<<<<<<<<<<<
 *                     for j in range(A.shape[i]):
 *                         permutation_A[i][j] = p_A[i][j]
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__pyx_v_A->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1957, __pyx_L1_error)
        }
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_A->shape, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyNumber_Multiply(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1957, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1957, __pyx_L1_error)
        (__pyx_v_permutation_A[__pyx_t_10]) = ((int *)malloc(__pyx_t_9));

        /* "ctf/tensor.pyx":1958
 *                 else:
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[i])
 *                     for j in range(A.shape[i]):             # <<<<<<<<<<<<<<
 *                         permutation_A[i][j] = p_A[i][j]
 *         if p_B is not None:
 */
        if (unlikely(__pyx_v_A->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1958, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_A->shape, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7);
          __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1958, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1958, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_7))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1958, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1958, __pyx_L1_error)
              #else
              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1958, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1958, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1958, __pyx_L1_error)
              #else
              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1958, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_11(__pyx_t_7);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1958, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "ctf/tensor.pyx":1959
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[i])
 *                     for j in range(A.shape[i]):
 *                         permutation_A[i][j] = p_A[i][j]             # <<<<<<<<<<<<<<
 *         if p_B is not None:
 * #            p_B = np.asarray(p_B)
 */
          __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_p_A, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1959, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1959, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L1_error)
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L1_error)
          ((__pyx_v_permutation_A[__pyx_t_14])[__pyx_t_13]) = __pyx_t_12;

          /* "ctf/tensor.pyx":1958
 *                 else:
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[i])
 *                     for j in range(A.shape[i]):             # <<<<<<<<<<<<<<
 *                         permutation_A[i][j] = p_A[i][j]
 *         if p_B is not None:
 */
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L12:;

      /* "ctf/tensor.pyx":1951
 * #            p_A = np.asarray(p_A)
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 if A.order == 'F':
 *                     permutation_A[i] = <int*>malloc(sizeof(int) * A.shape[-i-1])
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1948
 *         cdef int ** permutation_A = NULL
 *         cdef int ** permutation_B = NULL
 *         if p_A is not None:             # <<<<<<<<<<<<<<
 * #            p_A = np.asarray(p_A)
 *             permutation_A = <int**>malloc(sizeof(int*) * A.ndim)
 */
  }

  /* "ctf/tensor.pyx":1960
 *                     for j in range(A.shape[i]):
 *                         permutation_A[i][j] = p_A[i][j]
 *         if p_B is not None:             # <<<<<<<<<<<<<<
 * #            p_B = np.asarray(p_B)
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)
 */
  __pyx_t_1 = (__pyx_v_p_B != Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1962
 *         if p_B is not None:
 * #            p_B = np.asarray(p_B)
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 if self.order == 'F':
 */
    __pyx_v_permutation_B = ((int **)malloc(((sizeof(int *)) * __pyx_v_self->ndim)));

    /* "ctf/tensor.pyx":1963
 * #            p_B = np.asarray(p_B)
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 if self.order == 'F':
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_3 = __pyx_t_7; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1963, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1963, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1963, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1963, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1963, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1963, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1963, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1963, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":1964
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)
 *             for i in range(self.ndim):
 *                 if self.order == 'F':             # <<<<<<<<<<<<<<
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 *                     for j in range(self.shape[-i-1]):
 */
      __pyx_t_1 = (__pyx_v_self->order == 'F');
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":1965
 *             for i in range(self.ndim):
 *                 if self.order == 'F':
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])             # <<<<<<<<<<<<<<
 *                     for j in range(self.shape[-i-1]):
 *                         permutation_B[i][j] = p_B[-i-1][j]
 */
        __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__pyx_v_self->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1965, __pyx_L1_error)
        }
        __pyx_t_8 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1965, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1965, __pyx_L1_error)
        (__pyx_v_permutation_B[__pyx_t_10]) = ((int *)malloc(__pyx_t_9));

        /* "ctf/tensor.pyx":1966
 *                 if self.order == 'F':
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 *                     for j in range(self.shape[-i-1]):             # <<<<<<<<<<<<<<
 *                         permutation_B[i][j] = p_B[-i-1][j]
 *                 else:
 */
        if (unlikely(__pyx_v_self->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1966, __pyx_L1_error)
        }
        __pyx_t_4 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1966, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_4 = __pyx_t_8; __Pyx_INCREF(__pyx_t_4);
          __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1966, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1966, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1966, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1966, __pyx_L1_error)
              #else
              __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1966, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1966, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1966, __pyx_L1_error)
              #else
              __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1966, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_11(__pyx_t_4);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1966, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "ctf/tensor.pyx":1967
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 *                     for j in range(self.shape[-i-1]):
 *                         permutation_B[i][j] = p_B[-i-1][j]             # <<<<<<<<<<<<<<
 *                 else:
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[i])
 */
          __pyx_t_8 = PyNumber_Negative(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1967, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1967, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_p_B, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1967, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1967, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1967, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1967, __pyx_L1_error)
          __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1967, __pyx_L1_error)
          ((__pyx_v_permutation_B[__pyx_t_13])[__pyx_t_14]) = __pyx_t_12;

          /* "ctf/tensor.pyx":1966
 *                 if self.order == 'F':
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 *                     for j in range(self.shape[-i-1]):             # <<<<<<<<<<<<<<
 *                         permutation_B[i][j] = p_B[-i-1][j]
 *                 else:
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ctf/tensor.pyx":1964
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)
 *             for i in range(self.ndim):
 *                 if self.order == 'F':             # <<<<<<<<<<<<<<
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 *                     for j in range(self.shape[-i-1]):
 */
        goto __pyx_L23;
      }

      /* "ctf/tensor.pyx":1969
 *                         permutation_B[i][j] = p_B[-i-1][j]
 *                 else:
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[i])             # <<<<<<<<<<<<<<
 *                     for j in range(self.shape[i]):
 *                         permutation_B[i][j] = p_B[i][j]
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1969, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__pyx_v_self->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1969, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1969, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1969, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_8); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1969, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1969, __pyx_L1_error)
        (__pyx_v_permutation_B[__pyx_t_10]) = ((int *)malloc(__pyx_t_9));

        /* "ctf/tensor.pyx":1970
 *                 else:
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[i])
 *                     for j in range(self.shape[i]):             # <<<<<<<<<<<<<<
 *                         permutation_B[i][j] = p_B[i][j]
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 */
        if (unlikely(__pyx_v_self->shape == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1970, __pyx_L1_error)
        }
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8);
          __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1970, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1970, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1970, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1970, __pyx_L1_error)
              #else
              __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1970, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1970, __pyx_L1_error)
                #endif
                if (__pyx_t_10 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1970, __pyx_L1_error)
              #else
              __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1970, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_11(__pyx_t_8);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1970, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "ctf/tensor.pyx":1971
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[i])
 *                     for j in range(self.shape[i]):
 *                         permutation_B[i][j] = p_B[i][j]             # <<<<<<<<<<<<<<
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:
 */
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_p_B, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1971, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1971, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1971, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1971, __pyx_L1_error)
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1971, __pyx_L1_error)
          ((__pyx_v_permutation_B[__pyx_t_14])[__pyx_t_13]) = __pyx_t_12;

          /* "ctf/tensor.pyx":1970
 *                 else:
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[i])
 *                     for j in range(self.shape[i]):             # <<<<<<<<<<<<<<
 *                         permutation_B[i][j] = p_B[i][j]
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 */
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_L23:;

      /* "ctf/tensor.pyx":1963
 * #            p_B = np.asarray(p_B)
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 if self.order == 'F':
 *                     permutation_B[i] = <int*>malloc(sizeof(int) * self.shape[-i-1])
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1960
 *                     for j in range(A.shape[i]):
 *                         permutation_A[i][j] = p_A[i][j]
 *         if p_B is not None:             # <<<<<<<<<<<<<<
 * #            p_B = np.asarray(p_B)
 *             permutation_B = <int**>malloc(sizeof(int*) * self.ndim)
 */
  }

  /* "ctf/tensor.pyx":1972
 *                     for j in range(self.shape[i]):
 *                         permutation_B[i][j] = p_B[i][j]
 *         st = np.ndarray([],dtype=self.dtype).itemsize             # <<<<<<<<<<<<<<
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 1972, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 1972, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_st = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":1973
 *                         permutation_B[i][j] = p_B[i][j]
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_a == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1974
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *         else:
 *             alpha = <char*>malloc(st)
 */
    __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

    /* "ctf/tensor.pyx":1973
 *                         permutation_B[i][j] = p_B[i][j]
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
    goto __pyx_L31;
  }

  /* "ctf/tensor.pyx":1976
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 *             alpha = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             na = np.array([a])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_st); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1976, __pyx_L1_error)
    __pyx_v_alpha = ((char *)malloc(__pyx_t_9));

    /* "ctf/tensor.pyx":1977
 *         else:
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_a);
    __Pyx_GIVEREF(__pyx_v_a);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_a)) __PYX_ERR(0, 1977, __pyx_L1_error);
    __pyx_t_8 = NULL;
    __pyx_t_12 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_12 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_na = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1978
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0)) __PYX_ERR(0, 1978, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_st)) __PYX_ERR(0, 1978, __pyx_L1_error);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1978, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1978, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1978, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1978, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1978, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1978, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1978, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1978, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ctf/tensor.pyx":1979
 *             na = np.array([a])
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_na, __pyx_n_s_view); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int8); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_15, __pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_char(__pyx_t_7); if (unlikely((__pyx_t_16 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L1_error)
      (__pyx_v_alpha[__pyx_t_10]) = __pyx_t_16;

      /* "ctf/tensor.pyx":1978
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L31:;

  /* "ctf/tensor.pyx":1980
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_b == Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1981
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *         else:
 *             beta = <char*>malloc(st)
 */
    __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

    /* "ctf/tensor.pyx":1980
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
    goto __pyx_L35;
  }

  /* "ctf/tensor.pyx":1983
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 *             beta = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             nb = np.array([b])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_st); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1983, __pyx_L1_error)
    __pyx_v_beta = ((char *)malloc(__pyx_t_9));

    /* "ctf/tensor.pyx":1984
 *         else:
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_b)) __PYX_ERR(0, 1984, __pyx_L1_error);
    __pyx_t_4 = NULL;
    __pyx_t_12 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_12 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1984, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __pyx_v_nb = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1985
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0)) __PYX_ERR(0, 1985, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_st)) __PYX_ERR(0, 1985, __pyx_L1_error);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
      __pyx_t_3 = __pyx_t_15; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1985, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1985, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_15); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1985, __pyx_L1_error)
          #else
          __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1985, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1985, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_15); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1985, __pyx_L1_error)
          #else
          __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1985, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          #endif
        }
      } else {
        __pyx_t_15 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_15)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1985, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_15);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_15);
      __pyx_t_15 = 0;

      /* "ctf/tensor.pyx":1986
 *             nb = np.array([b])
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)
 *         if a is not None:
 */
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_nb, __pyx_n_s_view); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_char(__pyx_t_7); if (unlikely((__pyx_t_16 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1986, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1986, __pyx_L1_error)
      (__pyx_v_beta[__pyx_t_10]) = __pyx_t_16;

      /* "ctf/tensor.pyx":1985
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L35:;

  /* "ctf/tensor.pyx":1987
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)             # <<<<<<<<<<<<<<
 *         if a is not None:
 *             free(alpha)
 */
  (void)(__pyx_v_self->dt->permute(((CTF_int::tensor *)__pyx_v_A->dt), ((int **)__pyx_v_permutation_A), ((char *)__pyx_v_alpha), ((int **)__pyx_v_permutation_B), ((char *)__pyx_v_beta)));

  /* "ctf/tensor.pyx":1988
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  __pyx_t_1 = (__pyx_v_a != Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1989
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)
 *         if a is not None:
 *             free(alpha)             # <<<<<<<<<<<<<<
 *         if b is not None:
 *             free(beta)
 */
    free(__pyx_v_alpha);

    /* "ctf/tensor.pyx":1988
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         self.dt.permute(<ctensor*>A.dt, <int**>permutation_A, <char*>alpha, <int**>permutation_B, <char*>beta)
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  }

  /* "ctf/tensor.pyx":1990
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *         if p_A is not None:
 */
  __pyx_t_1 = (__pyx_v_b != Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1991
 *             free(alpha)
 *         if b is not None:
 *             free(beta)             # <<<<<<<<<<<<<<
 *         if p_A is not None:
 *             for i in range(self.ndim):
 */
    free(__pyx_v_beta);

    /* "ctf/tensor.pyx":1990
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *         if p_A is not None:
 */
  }

  /* "ctf/tensor.pyx":1992
 *         if b is not None:
 *             free(beta)
 *         if p_A is not None:             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 free(permutation_A[i])
 */
  __pyx_t_1 = (__pyx_v_p_A != Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1993
 *             free(beta)
 *         if p_A is not None:
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 free(permutation_A[i])
 *             free(permutation_A)
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_3 = __pyx_t_7; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1993, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1993, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1993, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1993, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1993, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1993, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1993, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1993, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":1994
 *         if p_A is not None:
 *             for i in range(self.ndim):
 *                 free(permutation_A[i])             # <<<<<<<<<<<<<<
 *             free(permutation_A)
 *         if p_B is not None:
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1994, __pyx_L1_error)
      free((__pyx_v_permutation_A[__pyx_t_10]));

      /* "ctf/tensor.pyx":1993
 *             free(beta)
 *         if p_A is not None:
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 free(permutation_A[i])
 *             free(permutation_A)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1995
 *             for i in range(self.ndim):
 *                 free(permutation_A[i])
 *             free(permutation_A)             # <<<<<<<<<<<<<<
 *         if p_B is not None:
 *             for i in range(self.ndim):
 */
    free(__pyx_v_permutation_A);

    /* "ctf/tensor.pyx":1992
 *         if b is not None:
 *             free(beta)
 *         if p_A is not None:             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 free(permutation_A[i])
 */
  }

  /* "ctf/tensor.pyx":1996
 *                 free(permutation_A[i])
 *             free(permutation_A)
 *         if p_B is not None:             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 free(permutation_B[i])
 */
  __pyx_t_1 = (__pyx_v_p_B != Py_None);
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":1997
 *             free(permutation_A)
 *         if p_B is not None:
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 free(permutation_B[i])
 *             free(permutation_B)
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_3 = __pyx_t_7; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1997, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1997, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1997, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1997, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1997, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1997, __pyx_L1_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1997, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1997, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1997, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":1998
 *         if p_B is not None:
 *             for i in range(self.ndim):
 *                 free(permutation_B[i])             # <<<<<<<<<<<<<<
 *             free(permutation_B)
 * 
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1998, __pyx_L1_error)
      free((__pyx_v_permutation_B[__pyx_t_10]));

      /* "ctf/tensor.pyx":1997
 *             free(permutation_A)
 *         if p_B is not None:
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 free(permutation_B[i])
 *             free(permutation_B)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":1999
 *             for i in range(self.ndim):
 *                 free(permutation_B[i])
 *             free(permutation_B)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, inds, vals, a=None, b=None):
 */
    free(__pyx_v_permutation_B);

    /* "ctf/tensor.pyx":1996
 *                 free(permutation_A[i])
 *             free(permutation_A)
 *         if p_B is not None:             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 free(permutation_B[i])
 */
  }

  /* "ctf/tensor.pyx":1915
 *         return ctf.tensor_aux.conj(self)
 * 
 *     def permute(self, tensor A, p_A=None, p_B=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         permute(self, tensor A, p_A=None, p_B=None, a=None, b=None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("ctf.tensor.tensor.permute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_v_na);
  __Pyx_XDECREF(__pyx_v_nb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2001
 *             free(permutation_B)
 * 
 *     def write(self, inds, vals, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         write(inds, vals, a=None, b=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_111write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_110write, "\n        write(inds, vals, a=None, b=None)\n        \n        Accumulates a set of values to a corresponding set of specified indices (a is scaling for vals and b is scaling for old vlaues in tensor).\n        T[inds[i]] = b*T[inds[i]] + a*vals[i].\n        Each MPI process is expected to write a different subset of values and all MPI processes must participate (even if writing nothing).\n        However, the set of values written may overlap, in which case they will be accumulated.\n        \n        Parameters\n        ----------\n        inds: array (1D or 2D)\n            If 1D array, each index specifies global index, e.g. access T[i,j,k] via n^2*i+n*j+k, if 2D array, a corresponding row would be [i,j,k]\n        vals: array\n            A 1D array specifying values to write for each index\n        a: scalar\n            Scaling factor to apply to vals (default is 1)\n        b: scalar\n            Scaling factor to apply to existing data (default is 0)\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_111write = {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_111write, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_110write};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_111write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_inds = 0;
  PyObject *__pyx_v_vals = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inds,&__pyx_n_s_vals,&__pyx_n_s_a,&__pyx_n_s_b,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inds)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2001, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vals)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2001, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("write", 0, 2, 4, 1); __PYX_ERR(0, 2001, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2001, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2001, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "write") < 0)) __PYX_ERR(0, 2001, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inds = values[0];
    __pyx_v_vals = values[1];
    __pyx_v_a = values[2];
    __pyx_v_b = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 2001, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_110write(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_inds, __pyx_v_vals, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_110write(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_inds, PyObject *__pyx_v_vals, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_v_iinds = NULL;
  PyObject *__pyx_v_vvals = NULL;
  PyObject *__pyx_v_mystrides = NULL;
  PyObject *__pyx_v_i = NULL;
  char *__pyx_v_alpha;
  char *__pyx_v_beta;
  long __pyx_v_st;
  PyObject *__pyx_v_na = NULL;
  long __pyx_v_j;
  PyObject *__pyx_v_nb = NULL;
  PyArrayObject *__pyx_v_buf = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  char __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  char *__pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 1);

  /* "ctf/tensor.pyx":2021
 *             Scaling factor to apply to existing data (default is 0)
 *         """
 *         iinds = np.asarray(inds)             # <<<<<<<<<<<<<<
 *         vvals = np.asarray(vals, dtype=self.dtype)
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_inds};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_iinds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2022
 *         """
 *         iinds = np.asarray(inds)
 *         vvals = np.asarray(vals, dtype=self.dtype)             # <<<<<<<<<<<<<<
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_vals)) __PYX_ERR(0, 2022, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2022, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vvals = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ctf/tensor.pyx":2024
 *         vvals = np.asarray(vals, dtype=self.dtype)
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:             # <<<<<<<<<<<<<<
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_iinds, __pyx_n_s_ndim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_5, __pyx_int_2, 2, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2025
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:
 *             mystrides = np.ones(self.ndim,dtype=np.int32)             # <<<<<<<<<<<<<<
 *             for i in range(1,self.ndim):
 *                 #mystrides[i]=mystrides[i-1]*self.shape[i-1]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ones); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5)) __PYX_ERR(0, 2025, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_mystrides = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ctf/tensor.pyx":2026
 *         if iinds.ndim == 2:
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):             # <<<<<<<<<<<<<<
 *                 #mystrides[i]=mystrides[i-1]*self.shape[i-1]
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_1)) __PYX_ERR(0, 2026, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7)) __PYX_ERR(0, 2026, __pyx_L1_error);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_5 = __pyx_t_7; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2026, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2026, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 2026, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2026, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2026, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 2026, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2026, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_5);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2026, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ctf/tensor.pyx":2028
 *             for i in range(1,self.ndim):
 *                 #mystrides[i]=mystrides[i-1]*self.shape[i-1]
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]             # <<<<<<<<<<<<<<
 *             iinds = np.dot(iinds, np.asarray(mystrides))
 * 
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_7, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_mystrides, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2028, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->shape, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyNumber_Subtract(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_mystrides, __pyx_t_1, __pyx_t_2) < 0))) __PYX_ERR(0, 2028, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ctf/tensor.pyx":2026
 *         if iinds.ndim == 2:
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):             # <<<<<<<<<<<<<<
 *                 #mystrides[i]=mystrides[i-1]*self.shape[i-1]
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":2029
 *                 #mystrides[i]=mystrides[i-1]*self.shape[i-1]
 *                 mystrides[self.ndim-i-1]=mystrides[self.ndim-i]*self.shape[self.ndim-i]
 *             iinds = np.dot(iinds, np.asarray(mystrides))             # <<<<<<<<<<<<<<
 * 
 * #        cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=False))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_mystrides};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_iinds, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_iinds, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":2024
 *         vvals = np.asarray(vals, dtype=self.dtype)
 *         #if each index is a tuple, we have a 2D array, convert it to 1D array of global indices
 *         if iinds.ndim == 2:             # <<<<<<<<<<<<<<
 *             mystrides = np.ones(self.ndim,dtype=np.int32)
 *             for i in range(1,self.ndim):
 */
  }

  /* "ctf/tensor.pyx":2035
 *         cdef char * beta
 *     # if type is np.bool_, assign the st with 1, since bool does not have itemsize in numpy
 *         if self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *             st = 1
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_bool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2036
 *     # if type is np.bool_, assign the st with 1, since bool does not have itemsize in numpy
 *         if self.dtype == np.bool_:
 *             st = 1             # <<<<<<<<<<<<<<
 *         else:
 *             st = self.itemsize
 */
    __pyx_v_st = 1;

    /* "ctf/tensor.pyx":2035
 *         cdef char * beta
 *     # if type is np.bool_, assign the st with 1, since bool does not have itemsize in numpy
 *         if self.dtype == np.bool_:             # <<<<<<<<<<<<<<
 *             st = 1
 *         else:
 */
    goto __pyx_L7;
  }

  /* "ctf/tensor.pyx":2038
 *             st = 1
 *         else:
 *             st = self.itemsize             # <<<<<<<<<<<<<<
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_self->itemsize;
    __pyx_v_st = __pyx_t_4;
  }
  __pyx_L7:;

  /* "ctf/tensor.pyx":2039
 *         else:
 *             st = self.itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
  __pyx_t_6 = (__pyx_v_a == Py_None);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2040
 *             st = self.itemsize
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *         else:
 *             alpha = <char*>malloc(st)
 */
    __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

    /* "ctf/tensor.pyx":2039
 *         else:
 *             st = self.itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
    goto __pyx_L8;
  }

  /* "ctf/tensor.pyx":2042
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 *             alpha = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             na = np.array([a])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_v_alpha = ((char *)malloc(__pyx_v_st));

    /* "ctf/tensor.pyx":2043
 *         else:
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_a);
    __Pyx_GIVEREF(__pyx_v_a);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_a)) __PYX_ERR(0, 2043, __pyx_L1_error);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_1};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2043, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_v_na = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ctf/tensor.pyx":2044
 *             alpha = <char*>malloc(st)
 *             na = np.array([a])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 */
    __pyx_t_10 = __pyx_v_st;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "ctf/tensor.pyx":2045
 *             na = np.array([a])
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_na, __pyx_n_s_view); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_char(__pyx_t_2); if (unlikely((__pyx_t_13 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 2045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_alpha[__pyx_v_j]) = __pyx_t_13;
    }
  }
  __pyx_L8:;

  /* "ctf/tensor.pyx":2046
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
  __pyx_t_6 = (__pyx_v_b == Py_None);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2047
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *         else:
 *             beta = <char*>malloc(st)
 */
    __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

    /* "ctf/tensor.pyx":2046
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
    goto __pyx_L11;
  }

  /* "ctf/tensor.pyx":2049
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 *             beta = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             nb = np.array([b])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_v_beta = ((char *)malloc(__pyx_v_st));

    /* "ctf/tensor.pyx":2050
 *         else:
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_b)) __PYX_ERR(0, 2050, __pyx_L1_error);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2050, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_v_nb = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":2051
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 */
    __pyx_t_10 = __pyx_v_st;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "ctf/tensor.pyx":2052
 *             nb = np.array([b])
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 *         buf['a'][:] = iinds[:]
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_nb, __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_char(__pyx_t_5); if (unlikely((__pyx_t_13 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_beta[__pyx_v_j]) = __pyx_t_13;
    }
  }
  __pyx_L11:;

  /* "ctf/tensor.pyx":2053
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))             # <<<<<<<<<<<<<<
 *         buf['a'][:] = iinds[:]
 *         buf['b'][:] = vvals[:]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = PyObject_Length(__pyx_v_iinds); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2053, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5)) __PYX_ERR(0, 2053, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_b);
  __Pyx_GIVEREF(__pyx_n_s_b);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_b)) __PYX_ERR(0, 2053, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self->dtype);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->dtype);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self->dtype))) __PYX_ERR(0, 2053, __pyx_L1_error);
  __pyx_t_14 = PyList_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_tuple__46)) __PYX_ERR(0, 2053, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14)) __PYX_ERR(0, 2053, __pyx_L1_error);
  __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ctf); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_helper); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_use_align_for_pair); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_17, ((PyObject *)__pyx_v_self->dtype)};
    __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2053, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_align, __pyx_t_15) < 0) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2053, __pyx_L1_error)
  __pyx_v_buf = ((PyArrayObject *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "ctf/tensor.pyx":2054
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 *         buf['a'][:] = iinds[:]             # <<<<<<<<<<<<<<
 *         buf['b'][:] = vvals[:]
 *         self.dt.write(len(iinds),alpha,beta,buf.data)
 */
  __pyx_t_15 = __Pyx_PyObject_GetSlice(__pyx_v_iinds, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_buf), __pyx_n_s_a); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_PyObject_SetSlice(__pyx_t_5, __pyx_t_15, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 2054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "ctf/tensor.pyx":2055
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))
 *         buf['a'][:] = iinds[:]
 *         buf['b'][:] = vvals[:]             # <<<<<<<<<<<<<<
 *         self.dt.write(len(iinds),alpha,beta,buf.data)
 * 
 */
  __pyx_t_15 = __Pyx_PyObject_GetSlice(__pyx_v_vvals, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_buf), __pyx_n_s_b); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_PyObject_SetSlice(__pyx_t_5, __pyx_t_15, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "ctf/tensor.pyx":2056
 *         buf['a'][:] = iinds[:]
 *         buf['b'][:] = vvals[:]
 *         self.dt.write(len(iinds),alpha,beta,buf.data)             # <<<<<<<<<<<<<<
 * 
 *         if a is not None:
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_iinds); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2056, __pyx_L1_error)
  __pyx_t_18 = __pyx_f_5numpy_7ndarray_4data_data(__pyx_v_buf); if (unlikely(__pyx_t_18 == ((char *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 2056, __pyx_L1_error)
  (void)(__pyx_v_self->dt->write(__pyx_t_8, __pyx_v_alpha, __pyx_v_beta, __pyx_t_18));

  /* "ctf/tensor.pyx":2058
 *         self.dt.write(len(iinds),alpha,beta,buf.data)
 * 
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  __pyx_t_6 = (__pyx_v_a != Py_None);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2059
 * 
 *         if a is not None:
 *             free(alpha)             # <<<<<<<<<<<<<<
 *         if b is not None:
 *             free(beta)
 */
    free(__pyx_v_alpha);

    /* "ctf/tensor.pyx":2058
 *         self.dt.write(len(iinds),alpha,beta,buf.data)
 * 
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  }

  /* "ctf/tensor.pyx":2060
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *     put = write
 */
  __pyx_t_6 = (__pyx_v_b != Py_None);
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2061
 *             free(alpha)
 *         if b is not None:
 *             free(beta)             # <<<<<<<<<<<<<<
 *     put = write
 * 
 */
    free(__pyx_v_beta);

    /* "ctf/tensor.pyx":2060
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *     put = write
 */
  }

  /* "ctf/tensor.pyx":2001
 *             free(permutation_B)
 * 
 *     def write(self, inds, vals, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         write(inds, vals, a=None, b=None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("ctf.tensor.tensor.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_iinds);
  __Pyx_XDECREF(__pyx_v_vvals);
  __Pyx_XDECREF(__pyx_v_mystrides);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_na);
  __Pyx_XDECREF(__pyx_v_nb);
  __Pyx_XDECREF((PyObject *)__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2064
 *     put = write
 * 
 *     def _get_slice(self, offsets, ends):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_113_get_slice(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_113_get_slice = {"_get_slice", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_113_get_slice, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_113_get_slice(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_offsets = 0;
  PyObject *__pyx_v_ends = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_slice (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offsets,&__pyx_n_s_ends,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_offsets)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2064, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ends)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2064, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_get_slice", 1, 2, 2, 1); __PYX_ERR(0, 2064, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_get_slice") < 0)) __PYX_ERR(0, 2064, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_offsets = values[0];
    __pyx_v_ends = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_slice", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2064, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_112_get_slice(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_offsets, __pyx_v_ends);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_112_get_slice(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offsets, PyObject *__pyx_v_ends) {
  char *__pyx_v_alpha;
  char *__pyx_v_beta;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A = NULL;
  int64_t *__pyx_v_clens;
  int64_t *__pyx_v_coffs;
  int64_t *__pyx_v_cends;
  int64_t *__pyx_v_czeros;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int64_t *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_slice", 1);

  /* "ctf/tensor.pyx":2067
 *         cdef char * alpha
 *         cdef char * beta
 *         alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *         beta = <char*>self.dt.sr.addid()
 *         A = tensor(np.asarray(ends)-np.asarray(offsets), dtype=self.dtype, sp=self.sp)
 */
  __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

  /* "ctf/tensor.pyx":2068
 *         cdef char * beta
 *         alpha = <char*>self.dt.sr.mulid()
 *         beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *         A = tensor(np.asarray(ends)-np.asarray(offsets), dtype=self.dtype, sp=self.sp)
 *         cdef int64_t * clens
 */
  __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

  /* "ctf/tensor.pyx":2069
 *         alpha = <char*>self.dt.sr.mulid()
 *         beta = <char*>self.dt.sr.addid()
 *         A = tensor(np.asarray(ends)-np.asarray(offsets), dtype=self.dtype, sp=self.sp)             # <<<<<<<<<<<<<<
 *         cdef int64_t * clens
 *         cdef int64_t * coffs
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_ends};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_offsets};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_sp, __pyx_t_1) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_A = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2073
 *         cdef int64_t * coffs
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             clens = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ord_comp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_n_s_F};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ctf/tensor.pyx":2074
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             clens = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))             # <<<<<<<<<<<<<<
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_A->shape};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2074, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_clens = __pyx_t_7;

    /* "ctf/tensor.pyx":2075
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             clens = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))             # <<<<<<<<<<<<<<
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_offsets};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2075, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_coffs = __pyx_t_7;

    /* "ctf/tensor.pyx":2076
 *             clens = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))             # <<<<<<<<<<<<<<
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_ends};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2076, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2076, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cends = __pyx_t_7;

    /* "ctf/tensor.pyx":2077
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))             # <<<<<<<<<<<<<<
 *         else:
 *             clens = int64_t_arr_py_to_c(A.shape)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_v_self->shape;
    __Pyx_INCREF(__pyx_t_1);
    if (unlikely(__pyx_t_1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2077, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyTuple_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_czeros = __pyx_t_7;

    /* "ctf/tensor.pyx":2073
 *         cdef int64_t * coffs
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             clens = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":2079
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *         else:
 *             clens = int64_t_arr_py_to_c(A.shape)             # <<<<<<<<<<<<<<
 *             coffs = int64_t_arr_py_to_c(offsets)
 *             cends = int64_t_arr_py_to_c(ends)
 */
  /*else*/ {
    __pyx_t_9 = __pyx_v_A->shape;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_clens = __pyx_t_7;

    /* "ctf/tensor.pyx":2080
 *         else:
 *             clens = int64_t_arr_py_to_c(A.shape)
 *             coffs = int64_t_arr_py_to_c(offsets)             # <<<<<<<<<<<<<<
 *             cends = int64_t_arr_py_to_c(ends)
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 */
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_offsets); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2080, __pyx_L1_error)
    __pyx_v_coffs = __pyx_t_7;

    /* "ctf/tensor.pyx":2081
 *             clens = int64_t_arr_py_to_c(A.shape)
 *             coffs = int64_t_arr_py_to_c(offsets)
 *             cends = int64_t_arr_py_to_c(ends)             # <<<<<<<<<<<<<<
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *         A.dt.slice(czeros, clens, beta, self.dt, coffs, cends, alpha)
 */
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_ends); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L1_error)
    __pyx_v_cends = __pyx_t_7;

    /* "ctf/tensor.pyx":2082
 *             coffs = int64_t_arr_py_to_c(offsets)
 *             cends = int64_t_arr_py_to_c(ends)
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))             # <<<<<<<<<<<<<<
 *         A.dt.slice(czeros, clens, beta, self.dt, coffs, cends, alpha)
 *         free(czeros)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __pyx_v_self->shape;
    __Pyx_INCREF(__pyx_t_9);
    if (unlikely(__pyx_t_9 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2082, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyTuple_GET_SIZE(__pyx_t_9); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9)) __PYX_ERR(0, 2082, __pyx_L1_error);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_7 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_czeros = __pyx_t_7;
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":2083
 *             cends = int64_t_arr_py_to_c(ends)
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *         A.dt.slice(czeros, clens, beta, self.dt, coffs, cends, alpha)             # <<<<<<<<<<<<<<
 *         free(czeros)
 *         free(cends)
 */
  __pyx_v_A->dt->slice(__pyx_v_czeros, __pyx_v_clens, __pyx_v_beta, __pyx_v_self->dt, __pyx_v_coffs, __pyx_v_cends, __pyx_v_alpha);

  /* "ctf/tensor.pyx":2084
 *             czeros = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *         A.dt.slice(czeros, clens, beta, self.dt, coffs, cends, alpha)
 *         free(czeros)             # <<<<<<<<<<<<<<
 *         free(cends)
 *         free(coffs)
 */
  free(__pyx_v_czeros);

  /* "ctf/tensor.pyx":2085
 *         A.dt.slice(czeros, clens, beta, self.dt, coffs, cends, alpha)
 *         free(czeros)
 *         free(cends)             # <<<<<<<<<<<<<<
 *         free(coffs)
 *         free(clens)
 */
  free(__pyx_v_cends);

  /* "ctf/tensor.pyx":2086
 *         free(czeros)
 *         free(cends)
 *         free(coffs)             # <<<<<<<<<<<<<<
 *         free(clens)
 *         return A
 */
  free(__pyx_v_coffs);

  /* "ctf/tensor.pyx":2087
 *         free(cends)
 *         free(coffs)
 *         free(clens)             # <<<<<<<<<<<<<<
 *         return A
 * 
 */
  free(__pyx_v_clens);

  /* "ctf/tensor.pyx":2088
 *         free(coffs)
 *         free(clens)
 *         return A             # <<<<<<<<<<<<<<
 * 
 *     def _write_slice(self, offsets, ends, init_A, A_offsets=None, A_ends=None, a=None, b=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_A);
  __pyx_r = ((PyObject *)__pyx_v_A);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2064
 *     put = write
 * 
 *     def _get_slice(self, offsets, ends):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ctf.tensor.tensor._get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_A);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2090
 *         return A
 * 
 *     def _write_slice(self, offsets, ends, init_A, A_offsets=None, A_ends=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_115_write_slice(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_115_write_slice = {"_write_slice", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_115_write_slice, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_115_write_slice(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_offsets = 0;
  PyObject *__pyx_v_ends = 0;
  PyObject *__pyx_v_init_A = 0;
  PyObject *__pyx_v_A_offsets = 0;
  PyObject *__pyx_v_A_ends = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_write_slice (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offsets,&__pyx_n_s_ends,&__pyx_n_s_init_A,&__pyx_n_s_A_offsets,&__pyx_n_s_A_ends,&__pyx_n_s_a,&__pyx_n_s_b,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_offsets)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ends)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_write_slice", 0, 3, 7, 1); __PYX_ERR(0, 2090, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_write_slice", 0, 3, 7, 2); __PYX_ERR(0, 2090, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_offsets);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_ends);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_write_slice") < 0)) __PYX_ERR(0, 2090, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_offsets = values[0];
    __pyx_v_ends = values[1];
    __pyx_v_init_A = values[2];
    __pyx_v_A_offsets = values[3];
    __pyx_v_A_ends = values[4];
    __pyx_v_a = values[5];
    __pyx_v_b = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_write_slice", 0, 3, 7, __pyx_nargs); __PYX_ERR(0, 2090, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._write_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_114_write_slice(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_offsets, __pyx_v_ends, __pyx_v_init_A, __pyx_v_A_offsets, __pyx_v_A_ends, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_114_write_slice(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offsets, PyObject *__pyx_v_ends, PyObject *__pyx_v_init_A, PyObject *__pyx_v_A_offsets, PyObject *__pyx_v_A_ends, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  char *__pyx_v_alpha;
  char *__pyx_v_beta;
  PyObject *__pyx_v_A = NULL;
  int __pyx_v_st;
  PyObject *__pyx_v_na = NULL;
  long __pyx_v_j;
  PyObject *__pyx_v_nb = NULL;
  int64_t *__pyx_v_caoffs;
  int64_t *__pyx_v_caends;
  int64_t *__pyx_v_coffs;
  int64_t *__pyx_v_cends;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  long __pyx_t_8;
  char __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int64_t *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_write_slice", 1);

  /* "ctf/tensor.pyx":2093
 *         cdef char * alpha
 *         cdef char * beta
 *         A = ctf.tensor_aux.astensor(init_A)             # <<<<<<<<<<<<<<
 *         st = self.itemsize
 *         if a is None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_init_A};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_A = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2094
 *         cdef char * beta
 *         A = ctf.tensor_aux.astensor(init_A)
 *         st = self.itemsize             # <<<<<<<<<<<<<<
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()
 */
  __pyx_t_4 = __pyx_v_self->itemsize;
  __pyx_v_st = __pyx_t_4;

  /* "ctf/tensor.pyx":2095
 *         A = ctf.tensor_aux.astensor(init_A)
 *         st = self.itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
  __pyx_t_5 = (__pyx_v_a == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2096
 *         st = self.itemsize
 *         if a is None:
 *             alpha = <char*>self.dt.sr.mulid()             # <<<<<<<<<<<<<<
 *         else:
 *             alpha = <char*>malloc(st)
 */
    __pyx_v_alpha = ((char *)__pyx_v_self->dt->sr->mulid());

    /* "ctf/tensor.pyx":2095
 *         A = ctf.tensor_aux.astensor(init_A)
 *         st = self.itemsize
 *         if a is None:             # <<<<<<<<<<<<<<
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ctf/tensor.pyx":2098
 *             alpha = <char*>self.dt.sr.mulid()
 *         else:
 *             alpha = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             na = np.array([a],dtype=self.dtype)
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_v_alpha = ((char *)malloc(__pyx_v_st));

    /* "ctf/tensor.pyx":2099
 *         else:
 *             alpha = <char*>malloc(st)
 *             na = np.array([a],dtype=self.dtype)             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_a);
    __Pyx_GIVEREF(__pyx_v_a);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_a)) __PYX_ERR(0, 2099, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2099, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_na = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":2100
 *             alpha = <char*>malloc(st)
 *             na = np.array([a],dtype=self.dtype)
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 */
    __pyx_t_4 = __pyx_v_st;
    __pyx_t_7 = __pyx_t_4;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "ctf/tensor.pyx":2101
 *             na = np.array([a],dtype=self.dtype)
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_na, __pyx_n_s_view); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_char(__pyx_t_1); if (unlikely((__pyx_t_9 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_alpha[__pyx_v_j]) = __pyx_t_9;
    }
  }
  __pyx_L3:;

  /* "ctf/tensor.pyx":2102
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
  __pyx_t_5 = (__pyx_v_b == Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2103
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:
 *             beta = <char*>self.dt.sr.addid()             # <<<<<<<<<<<<<<
 *         else:
 *             beta = <char*>malloc(st)
 */
    __pyx_v_beta = ((char *)__pyx_v_self->dt->sr->addid());

    /* "ctf/tensor.pyx":2102
 *             for j in range(0,st):
 *                 alpha[j] = na.view(dtype=np.int8)[j]
 *         if b is None:             # <<<<<<<<<<<<<<
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 */
    goto __pyx_L6;
  }

  /* "ctf/tensor.pyx":2105
 *             beta = <char*>self.dt.sr.addid()
 *         else:
 *             beta = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *             nb = np.array([b])
 *             for j in range(0,st):
 */
  /*else*/ {
    __pyx_v_beta = ((char *)malloc(__pyx_v_st));

    /* "ctf/tensor.pyx":2106
 *         else:
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])             # <<<<<<<<<<<<<<
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_b)) __PYX_ERR(0, 2106, __pyx_L1_error);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_v_nb = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2107
 *             beta = <char*>malloc(st)
 *             nb = np.array([b])
 *             for j in range(0,st):             # <<<<<<<<<<<<<<
 *                 beta[j] = nb.view(dtype=np.int8)[j]
 *         cdef int64_t * caoffs
 */
    __pyx_t_4 = __pyx_v_st;
    __pyx_t_7 = __pyx_t_4;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "ctf/tensor.pyx":2108
 *             nb = np.array([b])
 *             for j in range(0,st):
 *                 beta[j] = nb.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         cdef int64_t * caoffs
 *         cdef int64_t * caends
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_nb, __pyx_n_s_view); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_char(__pyx_t_6); if (unlikely((__pyx_t_9 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_beta[__pyx_v_j]) = __pyx_t_9;
    }
  }
  __pyx_L6:;

  /* "ctf/tensor.pyx":2114
 *         cdef int64_t * coffs
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             if A_offsets is None:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(np.zeros(len(self.shape), dtype=np.int32)))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ord_comp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_F};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2115
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             if A_offsets is None:             # <<<<<<<<<<<<<<
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(np.zeros(len(self.shape), dtype=np.int32)))
 *             else:
 */
    __pyx_t_5 = (__pyx_v_A_offsets == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":2116
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             if A_offsets is None:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(np.zeros(len(self.shape), dtype=np.int32)))             # <<<<<<<<<<<<<<
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(A_offsets))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v_self->shape;
      __Pyx_INCREF(__pyx_t_1);
      if (unlikely(__pyx_t_1 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 2116, __pyx_L1_error)
      }
      __pyx_t_10 = __Pyx_PyTuple_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_1);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_int32); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_13};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2116, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_caoffs = __pyx_t_14;

      /* "ctf/tensor.pyx":2115
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):
 *             if A_offsets is None:             # <<<<<<<<<<<<<<
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(np.zeros(len(self.shape), dtype=np.int32)))
 *             else:
 */
      goto __pyx_L10;
    }

    /* "ctf/tensor.pyx":2118
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(np.zeros(len(self.shape), dtype=np.int32)))
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(A_offsets))             # <<<<<<<<<<<<<<
 *             if A_ends is None:
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_v_A_offsets};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2118, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_caoffs = __pyx_t_14;
    }
    __pyx_L10:;

    /* "ctf/tensor.pyx":2119
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(A_offsets))
 *             if A_ends is None:             # <<<<<<<<<<<<<<
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             else:
 */
    __pyx_t_5 = (__pyx_v_A_ends == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":2120
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(A_offsets))
 *             if A_ends is None:
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))             # <<<<<<<<<<<<<<
 *             else:
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A_ends))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_13};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2120, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2120, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_caends = __pyx_t_14;

      /* "ctf/tensor.pyx":2119
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(A_offsets))
 *             if A_ends is None:             # <<<<<<<<<<<<<<
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             else:
 */
      goto __pyx_L11;
    }

    /* "ctf/tensor.pyx":2122
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A.shape))
 *             else:
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A_ends))             # <<<<<<<<<<<<<<
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_v_A_ends};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2122, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_caends = __pyx_t_14;
    }
    __pyx_L11:;

    /* "ctf/tensor.pyx":2123
 *             else:
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A_ends))
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))             # <<<<<<<<<<<<<<
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_v_offsets};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_coffs = __pyx_t_14;

    /* "ctf/tensor.pyx":2124
 *                 caends = int64_t_arr_py_to_c(ctf.helper._rev_array(A_ends))
 *             coffs = int64_t_arr_py_to_c(ctf.helper._rev_array(offsets))
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))             # <<<<<<<<<<<<<<
 *         else:
 *             if A_offsets is None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_helper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_rev_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_v_ends};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_cends = __pyx_t_14;

    /* "ctf/tensor.pyx":2114
 *         cdef int64_t * coffs
 *         cdef int64_t * cends
 *         if ctf.helper._ord_comp(self.order, 'F'):             # <<<<<<<<<<<<<<
 *             if A_offsets is None:
 *                 caoffs = int64_t_arr_py_to_c(ctf.helper._rev_array(np.zeros(len(self.shape), dtype=np.int32)))
 */
    goto __pyx_L9;
  }

  /* "ctf/tensor.pyx":2126
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 *         else:
 *             if A_offsets is None:             # <<<<<<<<<<<<<<
 *                 caoffs = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *             else:
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_A_offsets == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":2127
 *         else:
 *             if A_offsets is None:
 *                 caoffs = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))             # <<<<<<<<<<<<<<
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(A_offsets)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_v_self->shape;
      __Pyx_INCREF(__pyx_t_6);
      if (unlikely(__pyx_t_6 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 2127, __pyx_L1_error)
      }
      __pyx_t_10 = __Pyx_PyTuple_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_6);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_6)) __PYX_ERR(0, 2127, __pyx_L1_error);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_caoffs = __pyx_t_14;

      /* "ctf/tensor.pyx":2126
 *             cends = int64_t_arr_py_to_c(ctf.helper._rev_array(ends))
 *         else:
 *             if A_offsets is None:             # <<<<<<<<<<<<<<
 *                 caoffs = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *             else:
 */
      goto __pyx_L12;
    }

    /* "ctf/tensor.pyx":2129
 *                 caoffs = int64_t_arr_py_to_c(np.zeros(len(self.shape), dtype=np.int32))
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(A_offsets)             # <<<<<<<<<<<<<<
 *             if A_ends is None:
 *                 caends = int64_t_arr_py_to_c(A.shape)
 */
    /*else*/ {
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_A_offsets); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2129, __pyx_L1_error)
      __pyx_v_caoffs = __pyx_t_14;
    }
    __pyx_L12:;

    /* "ctf/tensor.pyx":2130
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(A_offsets)
 *             if A_ends is None:             # <<<<<<<<<<<<<<
 *                 caends = int64_t_arr_py_to_c(A.shape)
 *             else:
 */
    __pyx_t_5 = (__pyx_v_A_ends == Py_None);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":2131
 *                 caoffs = int64_t_arr_py_to_c(A_offsets)
 *             if A_ends is None:
 *                 caends = int64_t_arr_py_to_c(A.shape)             # <<<<<<<<<<<<<<
 *             else:
 *                 caends = int64_t_arr_py_to_c(A_ends)
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_caends = __pyx_t_14;

      /* "ctf/tensor.pyx":2130
 *             else:
 *                 caoffs = int64_t_arr_py_to_c(A_offsets)
 *             if A_ends is None:             # <<<<<<<<<<<<<<
 *                 caends = int64_t_arr_py_to_c(A.shape)
 *             else:
 */
      goto __pyx_L13;
    }

    /* "ctf/tensor.pyx":2133
 *                 caends = int64_t_arr_py_to_c(A.shape)
 *             else:
 *                 caends = int64_t_arr_py_to_c(A_ends)             # <<<<<<<<<<<<<<
 *             coffs = int64_t_arr_py_to_c(offsets)
 *             cends = int64_t_arr_py_to_c(ends)
 */
    /*else*/ {
      __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_A_ends); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L1_error)
      __pyx_v_caends = __pyx_t_14;
    }
    __pyx_L13:;

    /* "ctf/tensor.pyx":2134
 *             else:
 *                 caends = int64_t_arr_py_to_c(A_ends)
 *             coffs = int64_t_arr_py_to_c(offsets)             # <<<<<<<<<<<<<<
 *             cends = int64_t_arr_py_to_c(ends)
 *         #coffs = int_arr_py_to_c(offsets)
 */
    __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_offsets); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2134, __pyx_L1_error)
    __pyx_v_coffs = __pyx_t_14;

    /* "ctf/tensor.pyx":2135
 *                 caends = int64_t_arr_py_to_c(A_ends)
 *             coffs = int64_t_arr_py_to_c(offsets)
 *             cends = int64_t_arr_py_to_c(ends)             # <<<<<<<<<<<<<<
 *         #coffs = int_arr_py_to_c(offsets)
 *         #cends = int_arr_py_to_c(ends)
 */
    __pyx_t_14 = __pyx_f_3ctf_7chelper_int64_t_arr_py_to_c(__pyx_v_ends); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L1_error)
    __pyx_v_cends = __pyx_t_14;
  }
  __pyx_L9:;

  /* "ctf/tensor.pyx":2138
 *         #coffs = int_arr_py_to_c(offsets)
 *         #cends = int_arr_py_to_c(ends)
 *         self.dt.slice(coffs, cends, beta, (<tensor>A).dt, caoffs, caends, alpha)             # <<<<<<<<<<<<<<
 *         free(cends)
 *         free(coffs)
 */
  __pyx_v_self->dt->slice(__pyx_v_coffs, __pyx_v_cends, __pyx_v_beta, ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_A)->dt, __pyx_v_caoffs, __pyx_v_caends, __pyx_v_alpha);

  /* "ctf/tensor.pyx":2139
 *         #cends = int_arr_py_to_c(ends)
 *         self.dt.slice(coffs, cends, beta, (<tensor>A).dt, caoffs, caends, alpha)
 *         free(cends)             # <<<<<<<<<<<<<<
 *         free(coffs)
 *         if a is not None:
 */
  free(__pyx_v_cends);

  /* "ctf/tensor.pyx":2140
 *         self.dt.slice(coffs, cends, beta, (<tensor>A).dt, caoffs, caends, alpha)
 *         free(cends)
 *         free(coffs)             # <<<<<<<<<<<<<<
 *         if a is not None:
 *             free(alpha)
 */
  free(__pyx_v_coffs);

  /* "ctf/tensor.pyx":2141
 *         free(cends)
 *         free(coffs)
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  __pyx_t_5 = (__pyx_v_a != Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2142
 *         free(coffs)
 *         if a is not None:
 *             free(alpha)             # <<<<<<<<<<<<<<
 *         if b is not None:
 *             free(beta)
 */
    free(__pyx_v_alpha);

    /* "ctf/tensor.pyx":2141
 *         free(cends)
 *         free(coffs)
 *         if a is not None:             # <<<<<<<<<<<<<<
 *             free(alpha)
 *         if b is not None:
 */
  }

  /* "ctf/tensor.pyx":2143
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *         free(caends)
 */
  __pyx_t_5 = (__pyx_v_b != Py_None);
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2144
 *             free(alpha)
 *         if b is not None:
 *             free(beta)             # <<<<<<<<<<<<<<
 *         free(caends)
 *         free(caoffs)
 */
    free(__pyx_v_beta);

    /* "ctf/tensor.pyx":2143
 *         if a is not None:
 *             free(alpha)
 *         if b is not None:             # <<<<<<<<<<<<<<
 *             free(beta)
 *         free(caends)
 */
  }

  /* "ctf/tensor.pyx":2145
 *         if b is not None:
 *             free(beta)
 *         free(caends)             # <<<<<<<<<<<<<<
 *         free(caoffs)
 * 
 */
  free(__pyx_v_caends);

  /* "ctf/tensor.pyx":2146
 *             free(beta)
 *         free(caends)
 *         free(caoffs)             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memo):
 */
  free(__pyx_v_caoffs);

  /* "ctf/tensor.pyx":2090
 *         return A
 * 
 *     def _write_slice(self, offsets, ends, init_A, A_offsets=None, A_ends=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ctf.tensor.tensor._write_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_na);
  __Pyx_XDECREF(__pyx_v_nb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2148
 *         free(caoffs)
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *         return tensor(copy=self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_117__deepcopy__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_117__deepcopy__ = {"__deepcopy__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_117__deepcopy__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_117__deepcopy__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_memo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_memo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2148, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__deepcopy__") < 0)) __PYX_ERR(0, 2148, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_memo = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__deepcopy__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2148, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_116__deepcopy__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_memo);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_116__deepcopy__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 1);

  /* "ctf/tensor.pyx":2149
 * 
 *     def __deepcopy__(self, memo):
 *         return tensor(copy=self)             # <<<<<<<<<<<<<<
 * 
 *     # implements basic indexing and slicing as per numpy.ndarray
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 2149, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2148
 *         free(caoffs)
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *         return tensor(copy=self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2153
 *     # implements basic indexing and slicing as per numpy.ndarray
 *     # indexing can be done to different values with each process, as it produces a local scalar, but slicing must be the same globally, as it produces a global CTF ctensor
 *     def __getitem__(self, key_init):             # <<<<<<<<<<<<<<
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_119__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key_init); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_119__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key_init) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_118__getitem__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_key_init));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_118__getitem__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_key_init) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_is_everything = NULL;
  PyObject *__pyx_v_is_single_val = NULL;
  PyObject *__pyx_v_is_contig = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_corr_shape = NULL;
  PyObject *__pyx_v_one_shape = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_offs = NULL;
  PyObject *__pyx_v_ends = NULL;
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_pB = NULL;
  int __pyx_v_i;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_tsr = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_ind = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_ind = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "ctf/tensor.pyx":2154
 *     # indexing can be done to different values with each process, as it produces a local scalar, but slicing must be the same globally, as it produces a global CTF ctensor
 *     def __getitem__(self, key_init):
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)             # <<<<<<<<<<<<<<
 * 
 *         if is_single_val:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_setgetitem_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_key_init};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 7)) {
      if (size > 7) __Pyx_RaiseTooManyValuesError(7);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2154, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 6); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_9);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[7] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      for (i=0; i < 7; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2154, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[7] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
    for (index=0; index < 7; index++) {
      PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 7) < 0) __PYX_ERR(0, 2154, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2154, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_key = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_is_everything = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_is_single_val = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_is_contig = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_inds = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_corr_shape = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_one_shape = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "ctf/tensor.pyx":2156
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 * 
 *         if is_single_val:             # <<<<<<<<<<<<<<
 *             vals = self.read(np.asarray(np.mod([key],self.shape)).reshape(1,self.ndim))
 *             return vals[0]
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_is_single_val); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2156, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2157
 * 
 *         if is_single_val:
 *             vals = self.read(np.asarray(np.mod([key],self.shape)).reshape(1,self.ndim))             # <<<<<<<<<<<<<<
 *             return vals[0]
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mod); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_key)) __PYX_ERR(0, 2157, __pyx_L1_error);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_3, __pyx_v_self->shape};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_int_1, __pyx_t_7};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_v_vals = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2158
 *         if is_single_val:
 *             vals = self.read(np.asarray(np.mod([key],self.shape)).reshape(1,self.ndim))
 *             return vals[0]             # <<<<<<<<<<<<<<
 * 
 *         if is_everything:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vals, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2156
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 * 
 *         if is_single_val:             # <<<<<<<<<<<<<<
 *             vals = self.read(np.asarray(np.mod([key],self.shape)).reshape(1,self.ndim))
 *             return vals[0]
 */
  }

  /* "ctf/tensor.pyx":2160
 *             return vals[0]
 * 
 *         if is_everything:             # <<<<<<<<<<<<<<
 *             return self.reshape(corr_shape)
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_is_everything); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2160, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2161
 * 
 *         if is_everything:
 *             return self.reshape(corr_shape)             # <<<<<<<<<<<<<<
 * 
 *         if is_contig:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reshape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_corr_shape};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2160
 *             return vals[0]
 * 
 *         if is_everything:             # <<<<<<<<<<<<<<
 *             return self.reshape(corr_shape)
 * 
 */
  }

  /* "ctf/tensor.pyx":2163
 *             return self.reshape(corr_shape)
 * 
 *         if is_contig:             # <<<<<<<<<<<<<<
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_is_contig); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2163, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2164
 * 
 *         if is_contig:
 *             offs = [ind[0] for ind in inds]             # <<<<<<<<<<<<<<
 *             ends = [ind[1] for ind in inds]
 *             S = self._get_slice(offs,ends).reshape(corr_shape)
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2164, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_inds)) || PyTuple_CheckExact(__pyx_v_inds)) {
        __pyx_t_9 = __pyx_v_inds; __Pyx_INCREF(__pyx_t_9);
        __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_inds); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2164, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2164, __pyx_L10_error)
      }
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2164, __pyx_L10_error)
              #endif
              if (__pyx_t_13 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 2164, __pyx_L10_error)
            #else
            __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2164, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2164, __pyx_L10_error)
              #endif
              if (__pyx_t_13 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 2164, __pyx_L10_error)
            #else
            __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2164, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_14(__pyx_t_9);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2164, __pyx_L10_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_ind, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_8genexpr1__pyx_v_ind, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2164, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 2164, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_ind); __pyx_8genexpr1__pyx_v_ind = 0;
      goto __pyx_L14_exit_scope;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_ind); __pyx_8genexpr1__pyx_v_ind = 0;
      goto __pyx_L1_error;
      __pyx_L14_exit_scope:;
    } /* exit inner scope */
    __pyx_v_offs = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2165
 *         if is_contig:
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]             # <<<<<<<<<<<<<<
 *             S = self._get_slice(offs,ends).reshape(corr_shape)
 *             return S
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2165, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_inds)) || PyTuple_CheckExact(__pyx_v_inds)) {
        __pyx_t_9 = __pyx_v_inds; __Pyx_INCREF(__pyx_t_9);
        __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_inds); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2165, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2165, __pyx_L17_error)
      }
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2165, __pyx_L17_error)
              #endif
              if (__pyx_t_13 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 2165, __pyx_L17_error)
            #else
            __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2165, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2165, __pyx_L17_error)
              #endif
              if (__pyx_t_13 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 2165, __pyx_L17_error)
            #else
            __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2165, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_14(__pyx_t_9);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2165, __pyx_L17_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_ind, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_8genexpr2__pyx_v_ind, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2165, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 2165, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_ind); __pyx_8genexpr2__pyx_v_ind = 0;
      goto __pyx_L21_exit_scope;
      __pyx_L17_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_ind); __pyx_8genexpr2__pyx_v_ind = 0;
      goto __pyx_L1_error;
      __pyx_L21_exit_scope:;
    } /* exit inner scope */
    __pyx_v_ends = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2166
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]
 *             S = self._get_slice(offs,ends).reshape(corr_shape)             # <<<<<<<<<<<<<<
 *             return S
 *         else:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_slice); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_offs, __pyx_v_ends};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_reshape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_corr_shape};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_v_S = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2167
 *             ends = [ind[1] for ind in inds]
 *             S = self._get_slice(offs,ends).reshape(corr_shape)
 *             return S             # <<<<<<<<<<<<<<
 *         else:
 *             pB = []
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_S);
    __pyx_r = __pyx_v_S;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2163
 *             return self.reshape(corr_shape)
 * 
 *         if is_contig:             # <<<<<<<<<<<<<<
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]
 */
  }

  /* "ctf/tensor.pyx":2169
 *             return S
 *         else:
 *             pB = []             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 pB.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 */
  /*else*/ {
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_pB = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2170
 *         else:
 *             pB = []
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 pB.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(one_shape, dtype=self.dtype, order=self.order, sp=self.sp)
 */
    __pyx_t_4 = __pyx_v_self->ndim;
    __pyx_t_15 = __pyx_t_4;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_i = __pyx_t_16;

      /* "ctf/tensor.pyx":2171
 *             pB = []
 *             for i in range(self.ndim):
 *                 pB.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))             # <<<<<<<<<<<<<<
 *             tsr = tensor(one_shape, dtype=self.dtype, order=self.order, sp=self.sp)
 *             tsr.permute(self, p_B=pB)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_inds, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_inds, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_inds, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_9);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9)) __PYX_ERR(0, 2171, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_5);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5)) __PYX_ERR(0, 2171, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_7);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7)) __PYX_ERR(0, 2171, __pyx_L1_error);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2171, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_pB, __pyx_t_5); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 2171, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "ctf/tensor.pyx":2172
 *             for i in range(self.ndim):
 *                 pB.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(one_shape, dtype=self.dtype, order=self.order, sp=self.sp)             # <<<<<<<<<<<<<<
 *             tsr.permute(self, p_B=pB)
 *             return tsr.reshape(corr_shape)
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_one_shape);
    __Pyx_GIVEREF(__pyx_v_one_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_one_shape)) __PYX_ERR(0, 2172, __pyx_L1_error);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2172, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_order, __pyx_t_1) < 0) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_sp, __pyx_t_1) < 0) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_tsr = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2173
 *                 pB.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(one_shape, dtype=self.dtype, order=self.order, sp=self.sp)
 *             tsr.permute(self, p_B=pB)             # <<<<<<<<<<<<<<
 *             return tsr.reshape(corr_shape)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tsr), __pyx_n_s_permute); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 2173, __pyx_L1_error);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_p_B, __pyx_v_pB) < 0) __PYX_ERR(0, 2173, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "ctf/tensor.pyx":2174
 *             tsr = tensor(one_shape, dtype=self.dtype, order=self.order, sp=self.sp)
 *             tsr.permute(self, p_B=pB)
 *             return tsr.reshape(corr_shape)             # <<<<<<<<<<<<<<
 * 
 *     def set_zero(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tsr), __pyx_n_s_reshape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_corr_shape};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }

  /* "ctf/tensor.pyx":2153
 *     # implements basic indexing and slicing as per numpy.ndarray
 *     # indexing can be done to different values with each process, as it produces a local scalar, but slicing must be the same globally, as it produces a global CTF ctensor
 *     def __getitem__(self, key_init):             # <<<<<<<<<<<<<<
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ctf.tensor.tensor.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_is_everything);
  __Pyx_XDECREF(__pyx_v_is_single_val);
  __Pyx_XDECREF(__pyx_v_is_contig);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_corr_shape);
  __Pyx_XDECREF(__pyx_v_one_shape);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_offs);
  __Pyx_XDECREF(__pyx_v_ends);
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_pB);
  __Pyx_XDECREF((PyObject *)__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_ind);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2176
 *             return tsr.reshape(corr_shape)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         mystr = ctf.helper._get_num_str(self.ndim)
 *         self.i(mystr).scl(0.0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_121set_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_121set_zero = {"set_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_121set_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_121set_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_zero (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_zero", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_zero", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_120set_zero(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_120set_zero(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_v_mystr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_zero", 1);

  /* "ctf/tensor.pyx":2177
 * 
 *     def set_zero(self):
 *         mystr = ctf.helper._get_num_str(self.ndim)             # <<<<<<<<<<<<<<
 *         self.i(mystr).scl(0.0)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_num_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_mystr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2178
 *     def set_zero(self):
 *         mystr = ctf.helper._get_num_str(self.ndim)
 *         self.i(mystr).scl(0.0)             # <<<<<<<<<<<<<<
 * 
 *     def set_zero(self):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_mystr};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_float_0_0};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2176
 *             return tsr.reshape(corr_shape)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         mystr = ctf.helper._get_num_str(self.ndim)
 *         self.i(mystr).scl(0.0)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.set_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mystr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2180
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         set_zero()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_123set_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_122set_zero, "\n        set_zero()\n        Set all elements in a tensor to zero.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1,2,3])\n        >>> a.set_zero()\n        >>> a\n        array([0, 0, 0])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_123set_zero = {"set_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_123set_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_122set_zero};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_123set_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_zero (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_zero", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_zero", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_122set_zero(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_122set_zero(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_v_mystr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_zero", 1);

  /* "ctf/tensor.pyx":2193
 *         array([0, 0, 0])
 *         """
 *         mystr = ctf.helper._get_num_str(self.ndim)             # <<<<<<<<<<<<<<
 *         self.i(mystr).scl(0.0)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_num_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_mystr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2194
 *         """
 *         mystr = ctf.helper._get_num_str(self.ndim)
 *         self.i(mystr).scl(0.0)             # <<<<<<<<<<<<<<
 * 
 *     def set_all(self, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_mystr};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_float_0_0};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2180
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         set_zero()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.set_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mystr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2196
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_all(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_all(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_125set_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_124set_all, "\n        set_all(value)\n        Set all elements in a tensor to a value.\n\n        Parameters\n        ----------\n        value: scalar\n            Value set to a tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([1,2,3])\n        >>> a.set_all(3)\n        >>> a\n        array([3, 3, 3])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_125set_all = {"set_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_125set_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_124set_all};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_125set_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_all (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2196, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_all") < 0)) __PYX_ERR(0, 2196, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_all", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2196, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.set_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_124set_all(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_124set_all(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_val = NULL;
  char *__pyx_v_alpha;
  int __pyx_v_st;
  PyObject *__pyx_v_na = NULL;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  char __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_all", 1);

  /* "ctf/tensor.pyx":2214
 *         array([3, 3, 3])
 *         """
 *         val = np.asarray([value],dtype=self.dtype)[0]             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         st = self.itemsize
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_value)) __PYX_ERR(0, 2214, __pyx_L1_error);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2214, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_val = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2216
 *         val = np.asarray([value],dtype=self.dtype)[0]
 *         cdef char * alpha
 *         st = self.itemsize             # <<<<<<<<<<<<<<
 *         alpha = <char*>malloc(st)
 *         na = np.array([val],dtype=self.dtype)
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_st = __pyx_t_5;

  /* "ctf/tensor.pyx":2217
 *         cdef char * alpha
 *         st = self.itemsize
 *         alpha = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *         na = np.array([val],dtype=self.dtype)
 *         for j in range(0,st):
 */
  __pyx_v_alpha = ((char *)malloc(__pyx_v_st));

  /* "ctf/tensor.pyx":2218
 *         st = self.itemsize
 *         alpha = <char*>malloc(st)
 *         na = np.array([val],dtype=self.dtype)             # <<<<<<<<<<<<<<
 *         for j in range(0,st):
 *             alpha[j] = na.view(dtype=np.int8)[j]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_val);
  __Pyx_GIVEREF(__pyx_v_val);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_val)) __PYX_ERR(0, 2218, __pyx_L1_error);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2218, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_na = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":2219
 *         alpha = <char*>malloc(st)
 *         na = np.array([val],dtype=self.dtype)
 *         for j in range(0,st):             # <<<<<<<<<<<<<<
 *             alpha[j] = na.view(dtype=np.int8)[j]
 * 
 */
  __pyx_t_5 = __pyx_v_st;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_j = __pyx_t_7;

    /* "ctf/tensor.pyx":2220
 *         na = np.array([val],dtype=self.dtype)
 *         for j in range(0,st):
 *             alpha[j] = na.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 * 
 *         self.dt.set(alpha)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_na, __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_char(__pyx_t_1); if (unlikely((__pyx_t_8 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_alpha[__pyx_v_j]) = __pyx_t_8;
  }

  /* "ctf/tensor.pyx":2222
 *             alpha[j] = na.view(dtype=np.int8)[j]
 * 
 *         self.dt.set(alpha)             # <<<<<<<<<<<<<<
 *         free(alpha)
 * 
 */
  __pyx_v_self->dt->set(__pyx_v_alpha);

  /* "ctf/tensor.pyx":2223
 * 
 *         self.dt.set(alpha)
 *         free(alpha)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, key_init, value_init):
 */
  free(__pyx_v_alpha);

  /* "ctf/tensor.pyx":2196
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_all(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_all(value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.set_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_na);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2225
 *         free(alpha)
 * 
 *     def __setitem__(self, key_init, value_init):             # <<<<<<<<<<<<<<
 *         value = deepcopy(value_init)
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 */

/* Python wrapper */
static int __pyx_pw_3ctf_6tensor_6tensor_127__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key_init, PyObject *__pyx_v_value_init); /*proto*/
static int __pyx_pw_3ctf_6tensor_6tensor_127__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key_init, PyObject *__pyx_v_value_init) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_126__setitem__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_key_init), ((PyObject *)__pyx_v_value_init));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ctf_6tensor_6tensor_126__setitem__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_key_init, PyObject *__pyx_v_value_init) {
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_is_everything = NULL;
  PyObject *__pyx_v_is_single_val = NULL;
  PyObject *__pyx_v_is_contig = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_corr_shape = NULL;
  PyObject *__pyx_v_one_shape = NULL;
  PyObject *__pyx_v_tval = NULL;
  PyObject *__pyx_v_offs = NULL;
  PyObject *__pyx_v_ends = NULL;
  PyObject *__pyx_v_tsr = NULL;
  PyObject *__pyx_v_pA = NULL;
  int __pyx_v_i;
  PyObject *__pyx_8genexpr3__pyx_v_ind = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_ind = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "ctf/tensor.pyx":2226
 * 
 *     def __setitem__(self, key_init, value_init):
 *         value = deepcopy(value_init)             # <<<<<<<<<<<<<<
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 *         if is_single_val:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_value_init};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2227
 *     def __setitem__(self, key_init, value_init):
 *         value = deepcopy(value_init)
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)             # <<<<<<<<<<<<<<
 *         if is_single_val:
 *             if (ctf.world.comm().rank() == 0):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_setgetitem_helper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_key_init};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 7)) {
      if (size > 7) __Pyx_RaiseTooManyValuesError(7);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2227, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 6); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_9);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[7] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      for (i=0; i < 7; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[7] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
    for (index=0; index < 7; index++) {
      PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 7) < 0) __PYX_ERR(0, 2227, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2227, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_key = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_is_everything = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_is_single_val = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_is_contig = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_inds = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_corr_shape = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_one_shape = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "ctf/tensor.pyx":2228
 *         value = deepcopy(value_init)
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 *         if is_single_val:             # <<<<<<<<<<<<<<
 *             if (ctf.world.comm().rank() == 0):
 *                 self.write(np.mod(np.asarray([key]).reshape((1,self.ndim)),self.shape),np.asarray(value,dtype=self.dtype).reshape(1))
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_is_single_val); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2228, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2229
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 *         if is_single_val:
 *             if (ctf.world.comm().rank() == 0):             # <<<<<<<<<<<<<<
 *                 self.write(np.mod(np.asarray([key]).reshape((1,self.ndim)),self.shape),np.asarray(value,dtype=self.dtype).reshape(1))
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctf); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_world); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_comm); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_rank); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_12 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_1, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_12) {

      /* "ctf/tensor.pyx":2230
 *         if is_single_val:
 *             if (ctf.world.comm().rank() == 0):
 *                 self.write(np.mod(np.asarray([key]).reshape((1,self.ndim)),self.shape),np.asarray(value,dtype=self.dtype).reshape(1))             # <<<<<<<<<<<<<<
 *             else:
 *                 self.write([],[])
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_mod); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_key)) __PYX_ERR(0, 2230, __pyx_L1_error);
      __pyx_t_10 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_3};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ndim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1)) __PYX_ERR(0, 2230, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_5);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5)) __PYX_ERR(0, 2230, __pyx_L1_error);
      __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_7, __pyx_v_self->shape};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_value)) __PYX_ERR(0, 2230, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2230, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_int_1};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_9, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":2229
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 *         if is_single_val:
 *             if (ctf.world.comm().rank() == 0):             # <<<<<<<<<<<<<<
 *                 self.write(np.mod(np.asarray([key]).reshape((1,self.ndim)),self.shape),np.asarray(value,dtype=self.dtype).reshape(1))
 *             else:
 */
      goto __pyx_L6;
    }

    /* "ctf/tensor.pyx":2232
 *                 self.write(np.mod(np.asarray([key]).reshape((1,self.ndim)),self.shape),np.asarray(value,dtype=self.dtype).reshape(1))
 *             else:
 *                 self.write([],[])             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(value, (int, float, complex, np.number)):
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_6, __pyx_t_9};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "ctf/tensor.pyx":2233
 *             else:
 *                 self.write([],[])
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(value, (int, float, complex, np.number)):
 *             tval = np.asarray([value],dtype=self.dtype)[0]
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2228
 *         value = deepcopy(value_init)
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 *         if is_single_val:             # <<<<<<<<<<<<<<
 *             if (ctf.world.comm().rank() == 0):
 *                 self.write(np.mod(np.asarray([key]).reshape((1,self.ndim)),self.shape),np.asarray(value,dtype=self.dtype).reshape(1))
 */
  }

  /* "ctf/tensor.pyx":2234
 *                 self.write([],[])
 *             return
 *         if isinstance(value, (int, float, complex, np.number)):             # <<<<<<<<<<<<<<
 *             tval = np.asarray([value],dtype=self.dtype)[0]
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_number); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_13 = PyInt_Check(__pyx_v_value); 
  if (!__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_13 = PyFloat_Check(__pyx_v_value); 
  if (!__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_13 = PyComplex_Check(__pyx_v_value); 
  if (!__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_13 = PyObject_IsInstance(__pyx_v_value, __pyx_t_8); 
  __pyx_t_12 = __pyx_t_13;
  __pyx_L8_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2235
 *             return
 *         if isinstance(value, (int, float, complex, np.number)):
 *             tval = np.asarray([value],dtype=self.dtype)[0]             # <<<<<<<<<<<<<<
 *         else:
 *             tval = ctf.tensor_aux.astensor(value,dtype=self.dtype)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_value)) __PYX_ERR(0, 2235, __pyx_L1_error);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8)) __PYX_ERR(0, 2235, __pyx_L1_error);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2235, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_tval = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "ctf/tensor.pyx":2234
 *                 self.write([],[])
 *             return
 *         if isinstance(value, (int, float, complex, np.number)):             # <<<<<<<<<<<<<<
 *             tval = np.asarray([value],dtype=self.dtype)[0]
 *         else:
 */
    goto __pyx_L7;
  }

  /* "ctf/tensor.pyx":2237
 *             tval = np.asarray([value],dtype=self.dtype)[0]
 *         else:
 *             tval = ctf.tensor_aux.astensor(value,dtype=self.dtype)             # <<<<<<<<<<<<<<
 *         if is_everything:
 *             #check that value is same everywhere, or this makes no sense
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctf); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astensor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_value)) __PYX_ERR(0, 2237, __pyx_L1_error);
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2237, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_tval = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L7:;

  /* "ctf/tensor.pyx":2238
 *         else:
 *             tval = ctf.tensor_aux.astensor(value,dtype=self.dtype)
 *         if is_everything:             # <<<<<<<<<<<<<<
 *             #check that value is same everywhere, or this makes no sense
 *             if isinstance(tval,tensor):
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_is_everything); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2238, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2240
 *         if is_everything:
 *             #check that value is same everywhere, or this makes no sense
 *             if isinstance(tval,tensor):             # <<<<<<<<<<<<<<
 *                 self.set_zero()
 *                 self += value
 */
    __pyx_t_12 = __Pyx_TypeCheck(__pyx_v_tval, __pyx_ptype_3ctf_6tensor_tensor); 
    if (__pyx_t_12) {

      /* "ctf/tensor.pyx":2241
 *             #check that value is same everywhere, or this makes no sense
 *             if isinstance(tval,tensor):
 *                 self.set_zero()             # <<<<<<<<<<<<<<
 *                 self += value
 *             else:
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_zero); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":2242
 *             if isinstance(tval,tensor):
 *                 self.set_zero()
 *                 self += value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.set_all(value)
 */
      __pyx_t_1 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_self), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3ctf_6tensor_tensor))))) __PYX_ERR(0, 2242, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_self, ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "ctf/tensor.pyx":2240
 *         if is_everything:
 *             #check that value is same everywhere, or this makes no sense
 *             if isinstance(tval,tensor):             # <<<<<<<<<<<<<<
 *                 self.set_zero()
 *                 self += value
 */
      goto __pyx_L13;
    }

    /* "ctf/tensor.pyx":2244
 *                 self += value
 *             else:
 *                 self.set_all(value)             # <<<<<<<<<<<<<<
 *         elif is_contig:
 *             offs = [ind[0] for ind in inds]
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_all); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_value};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L13:;

    /* "ctf/tensor.pyx":2238
 *         else:
 *             tval = ctf.tensor_aux.astensor(value,dtype=self.dtype)
 *         if is_everything:             # <<<<<<<<<<<<<<
 *             #check that value is same everywhere, or this makes no sense
 *             if isinstance(tval,tensor):
 */
    goto __pyx_L12;
  }

  /* "ctf/tensor.pyx":2245
 *             else:
 *                 self.set_all(value)
 *         elif is_contig:             # <<<<<<<<<<<<<<
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_is_contig); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2245, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "ctf/tensor.pyx":2246
 *                 self.set_all(value)
 *         elif is_contig:
 *             offs = [ind[0] for ind in inds]             # <<<<<<<<<<<<<<
 *             ends = [ind[1] for ind in inds]
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2246, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_inds)) || PyTuple_CheckExact(__pyx_v_inds)) {
        __pyx_t_9 = __pyx_v_inds; __Pyx_INCREF(__pyx_t_9);
        __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_inds); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2246, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2246, __pyx_L16_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2246, __pyx_L16_error)
              #endif
              if (__pyx_t_14 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 2246, __pyx_L16_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2246, __pyx_L16_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2246, __pyx_L16_error)
              #endif
              if (__pyx_t_14 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 2246, __pyx_L16_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2246, __pyx_L16_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_15(__pyx_t_9);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2246, __pyx_L16_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_ind, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_8genexpr3__pyx_v_ind, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2246, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 2246, __pyx_L16_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_ind); __pyx_8genexpr3__pyx_v_ind = 0;
      goto __pyx_L20_exit_scope;
      __pyx_L16_error:;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_ind); __pyx_8genexpr3__pyx_v_ind = 0;
      goto __pyx_L1_error;
      __pyx_L20_exit_scope:;
    } /* exit inner scope */
    __pyx_v_offs = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2247
 *         elif is_contig:
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]             # <<<<<<<<<<<<<<
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2247, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_inds)) || PyTuple_CheckExact(__pyx_v_inds)) {
        __pyx_t_9 = __pyx_v_inds; __Pyx_INCREF(__pyx_t_9);
        __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_inds); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2247, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2247, __pyx_L23_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2247, __pyx_L23_error)
              #endif
              if (__pyx_t_14 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 2247, __pyx_L23_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2247, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_9);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2247, __pyx_L23_error)
              #endif
              if (__pyx_t_14 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 2247, __pyx_L23_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2247, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_15(__pyx_t_9);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2247, __pyx_L23_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_ind, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_8genexpr4__pyx_v_ind, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2247, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 2247, __pyx_L23_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_ind); __pyx_8genexpr4__pyx_v_ind = 0;
      goto __pyx_L27_exit_scope;
      __pyx_L23_error:;
      __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_ind); __pyx_8genexpr4__pyx_v_ind = 0;
      goto __pyx_L1_error;
      __pyx_L27_exit_scope:;
    } /* exit inner scope */
    __pyx_v_ends = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2248
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)             # <<<<<<<<<<<<<<
 *             if isinstance(tval,tensor):
 *                 tsr += tval
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_corr_shape);
    __Pyx_GIVEREF(__pyx_v_corr_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_corr_shape)) __PYX_ERR(0, 2248, __pyx_L1_error);
    __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2248, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_order, __pyx_t_6) < 0) __PYX_ERR(0, 2248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_tsr = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":2249
 *             ends = [ind[1] for ind in inds]
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):             # <<<<<<<<<<<<<<
 *                 tsr += tval
 *             else:
 */
    __pyx_t_12 = __Pyx_TypeCheck(__pyx_v_tval, __pyx_ptype_3ctf_6tensor_tensor); 
    if (__pyx_t_12) {

      /* "ctf/tensor.pyx":2250
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):
 *                 tsr += tval             # <<<<<<<<<<<<<<
 *             else:
 *                 tsr.set_all(value)
 */
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_tsr, __pyx_v_tval); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_tsr, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ctf/tensor.pyx":2249
 *             ends = [ind[1] for ind in inds]
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):             # <<<<<<<<<<<<<<
 *                 tsr += tval
 *             else:
 */
      goto __pyx_L28;
    }

    /* "ctf/tensor.pyx":2252
 *                 tsr += tval
 *             else:
 *                 tsr.set_all(value)             # <<<<<<<<<<<<<<
 *             self._write_slice(offs,ends,tsr.reshape(one_shape))
 *         else:
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_set_all); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_value};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L28:;

    /* "ctf/tensor.pyx":2253
 *             else:
 *                 tsr.set_all(value)
 *             self._write_slice(offs,ends,tsr.reshape(one_shape))             # <<<<<<<<<<<<<<
 *         else:
 *             pA = []
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write_slice); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_reshape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_one_shape};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_8, __pyx_v_offs, __pyx_v_ends, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":2245
 *             else:
 *                 self.set_all(value)
 *         elif is_contig:             # <<<<<<<<<<<<<<
 *             offs = [ind[0] for ind in inds]
 *             ends = [ind[1] for ind in inds]
 */
    goto __pyx_L12;
  }

  /* "ctf/tensor.pyx":2255
 *             self._write_slice(offs,ends,tsr.reshape(one_shape))
 *         else:
 *             pA = []             # <<<<<<<<<<<<<<
 *             for i in range(self.ndim):
 *                 pA.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 */
  /*else*/ {
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_pA = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":2256
 *         else:
 *             pA = []
 *             for i in range(self.ndim):             # <<<<<<<<<<<<<<
 *                 pA.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 */
    __pyx_t_4 = __pyx_v_self->ndim;
    __pyx_t_16 = __pyx_t_4;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_i = __pyx_t_17;

      /* "ctf/tensor.pyx":2257
 *             pA = []
 *             for i in range(self.ndim):
 *                 pA.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))             # <<<<<<<<<<<<<<
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_arange); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_inds, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_inds, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_inds, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1)) __PYX_ERR(0, 2257, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_8);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_8)) __PYX_ERR(0, 2257, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error);
      __pyx_t_1 = 0;
      __pyx_t_8 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2257, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_pA, __pyx_t_8); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 2257, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }

    /* "ctf/tensor.pyx":2258
 *             for i in range(self.ndim):
 *                 pA.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)             # <<<<<<<<<<<<<<
 *             if isinstance(tval,tensor):
 *                 tsr += tval
 */
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_corr_shape);
    __Pyx_GIVEREF(__pyx_v_corr_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_corr_shape)) __PYX_ERR(0, 2258, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2258, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_t_6) < 0) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_tsr = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "ctf/tensor.pyx":2259
 *                 pA.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):             # <<<<<<<<<<<<<<
 *                 tsr += tval
 *             else:
 */
    __pyx_t_12 = __Pyx_TypeCheck(__pyx_v_tval, __pyx_ptype_3ctf_6tensor_tensor); 
    if (__pyx_t_12) {

      /* "ctf/tensor.pyx":2260
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):
 *                 tsr += tval             # <<<<<<<<<<<<<<
 *             else:
 *                 tsr.set_all(value)
 */
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_tsr, __pyx_v_tval); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_tsr, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ctf/tensor.pyx":2259
 *                 pA.append(np.arange(inds[i][0],inds[i][1],inds[i][2],dtype=int))
 *             tsr = tensor(corr_shape, dtype=self.dtype, order=self.order)
 *             if isinstance(tval,tensor):             # <<<<<<<<<<<<<<
 *                 tsr += tval
 *             else:
 */
      goto __pyx_L31;
    }

    /* "ctf/tensor.pyx":2262
 *                 tsr += tval
 *             else:
 *                 tsr.set_all(value)             # <<<<<<<<<<<<<<
 *             self.permute(tsr.reshape(one_shape), pA)
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_set_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_value};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L31:;

    /* "ctf/tensor.pyx":2263
 *             else:
 *                 tsr.set_all(value)
 *             self.permute(tsr.reshape(one_shape), pA)             # <<<<<<<<<<<<<<
 * 
 *     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_permute); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_tsr, __pyx_n_s_reshape); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_one_shape};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_t_9 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_8, __pyx_v_pA};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L12:;

  /* "ctf/tensor.pyx":2225
 *         free(alpha)
 * 
 *     def __setitem__(self, key_init, value_init):             # <<<<<<<<<<<<<<
 *         value = deepcopy(value_init)
 *         [key, is_everything, is_single_val, is_contig, inds, corr_shape, one_shape] = ctf.tensor_aux._setgetitem_helper(self, key_init)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ctf.tensor.tensor.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_is_everything);
  __Pyx_XDECREF(__pyx_v_is_single_val);
  __Pyx_XDECREF(__pyx_v_is_contig);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_corr_shape);
  __Pyx_XDECREF(__pyx_v_one_shape);
  __Pyx_XDECREF(__pyx_v_tval);
  __Pyx_XDECREF(__pyx_v_offs);
  __Pyx_XDECREF(__pyx_v_ends);
  __Pyx_XDECREF(__pyx_v_tsr);
  __Pyx_XDECREF(__pyx_v_pA);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_ind);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_ind);
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2265
 *             self.permute(tsr.reshape(one_shape), pA)
 * 
 *     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_129trace(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_128trace, "\n        trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)\n        Return the sum over the diagonal of input tensor.\n\n        Parameters\n        ----------\n        offset: int, optional\n            Default is 0 which indicates the main diagonal.\n\n        axis1: int, optional\n            Default is 0 which indicates the first axis of 2-D tensor where diagonal is taken.\n\n        axis2: int, optional\n            Default is 1 which indicates the second axis of 2-D tensor where diagonal is taken.\n\n        dtype: data-type, optional\n            Numpy data-type, currently not supported in CTF Python trace().\n\n        out: tensor\n            Currently not supported in CTF Python trace().\n\n        Returns\n        -------\n        output: tensor or scalar\n            Sum along diagonal of input tensor.\n\n        See Also\n        --------\n        ctf: trace()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.trace()\n        15\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_129trace = {"trace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_129trace, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_128trace};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_129trace(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_offset = 0;
  PyObject *__pyx_v_axis1 = 0;
  PyObject *__pyx_v_axis2 = 0;
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_v_out = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trace (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offset,&__pyx_n_s_axis1,&__pyx_n_s_axis2,&__pyx_n_s_dtype,&__pyx_n_s_out,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_1));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_offset);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis1);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis2);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_out);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2265, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "trace") < 0)) __PYX_ERR(0, 2265, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_offset = values[0];
    __pyx_v_axis1 = values[1];
    __pyx_v_axis2 = values[2];
    __pyx_v_dtype = values[3];
    __pyx_v_out = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trace", 0, 0, 5, __pyx_nargs); __PYX_ERR(0, 2265, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.trace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_128trace(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_offset, __pyx_v_axis1, __pyx_v_axis2, __pyx_v_dtype, __pyx_v_out);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_128trace(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_axis1, PyObject *__pyx_v_axis2, PyObject *__pyx_v_dtype, PyObject *__pyx_v_out) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace", 1);

  /* "ctf/tensor.pyx":2303
 *         15
 *         """
 *         return ctf.tensor_aux.trace(self, offset, axis1, axis2, dtype, out)             # <<<<<<<<<<<<<<
 * 
 *     def diagonal(self, offset=0, axis1=0, axis2=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_trace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[7] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_offset, __pyx_v_axis1, __pyx_v_axis2, __pyx_v_dtype, __pyx_v_out};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 6+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2265
 *             self.permute(tsr.reshape(one_shape), pA)
 * 
 *     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.trace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2305
 *         return ctf.tensor_aux.trace(self, offset, axis1, axis2, dtype, out)
 * 
 *     def diagonal(self, offset=0, axis1=0, axis2=1):             # <<<<<<<<<<<<<<
 *         """
 *         diagonal(offset=0, axis1=0, axis2=1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_131diagonal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_130diagonal, "\n        diagonal(offset=0, axis1=0, axis2=1)\n        Return the diagonal of the tensor if it is 2D. If the tensor is a higher order square tensor (same shape for every dimension), return diagonal of tensor determined by axis1=0, axis2=1.\n\n        Parameters\n        ----------\n        offset: int, optional\n            Default is 0 which indicates the main diagonal.\n\n        axis1: int, optional\n            Default is 0 which indicates the first axis of 2-D tensor where diagonal is taken.\n\n        axis2: int, optional\n            Default is 1 which indicates the second axis of 2-D tensor where diagonal is taken.\n\n        Returns\n        -------\n        output: tensor\n            Diagonal of input tensor.\n\n        Notes\n        -----\n        `tensor_aux.diagonal` only supports diagonal of square tensor with order more than 2.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.diagonal()\n        array([1, 5, 9])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_131diagonal = {"diagonal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_131diagonal, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_130diagonal};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_131diagonal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_offset = 0;
  PyObject *__pyx_v_axis1 = 0;
  PyObject *__pyx_v_axis2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("diagonal (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offset,&__pyx_n_s_axis1,&__pyx_n_s_axis2,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_offset);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2305, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis1);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2305, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis2);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2305, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "diagonal") < 0)) __PYX_ERR(0, 2305, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_offset = values[0];
    __pyx_v_axis1 = values[1];
    __pyx_v_axis2 = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("diagonal", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 2305, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.diagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_130diagonal(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_offset, __pyx_v_axis1, __pyx_v_axis2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_130diagonal(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_axis1, PyObject *__pyx_v_axis2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("diagonal", 1);

  /* "ctf/tensor.pyx":2337
 *         array([1, 5, 9])
 *         """
 *         return ctf.tensor_aux.diagonal(self,offset,axis1,axis2)             # <<<<<<<<<<<<<<
 * 
 *     def sum(self, axis = None, dtype = None, out = None, keepdims = None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_diagonal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_offset, __pyx_v_axis1, __pyx_v_axis2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2305
 *         return ctf.tensor_aux.trace(self, offset, axis1, axis2, dtype, out)
 * 
 *     def diagonal(self, offset=0, axis1=0, axis2=1):             # <<<<<<<<<<<<<<
 *         """
 *         diagonal(offset=0, axis1=0, axis2=1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.diagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2339
 *         return ctf.tensor_aux.diagonal(self,offset,axis1,axis2)
 * 
 *     def sum(self, axis = None, dtype = None, out = None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         sum(axis = None, dtype = None, out = None, keepdims = None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_133sum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_132sum, "\n        sum(axis = None, dtype = None, out = None, keepdims = None)\n        Sum of elements in tensor or along specified axis.\n\n        Parameters\n        ----------\n        axis: None, int or tuple of ints\n            Axis or axes where the sum of elements is performed.\n\n        dtype: data-type, optional\n            Data-type for the output tensor.\n\n        out: tensor, optional\n            Alternative output tensor.\n\n        keepdims: None, bool, optional\n            If set to true, axes summed over will remain size one.\n\n        Returns\n        -------\n        output: tensor_like\n            Output tensor.\n\n        See Also\n        --------\n        numpy: numpy.sum()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.int64)\n        >>> a.sum()\n        12\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_133sum = {"sum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_133sum, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_132sum};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_133sum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_v_out = 0;
  PyObject *__pyx_v_keepdims = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_dtype,&__pyx_n_s_out,&__pyx_n_s_keepdims,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_out);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_keepdims);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2339, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sum") < 0)) __PYX_ERR(0, 2339, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
    __pyx_v_dtype = values[1];
    __pyx_v_out = values[2];
    __pyx_v_keepdims = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sum", 0, 0, 4, __pyx_nargs); __PYX_ERR(0, 2339, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_132sum(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_axis, __pyx_v_dtype, __pyx_v_out, __pyx_v_keepdims);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_132sum(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_dtype, PyObject *__pyx_v_out, PyObject *__pyx_v_keepdims) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 1);

  /* "ctf/tensor.pyx":2374
 *         12
 *         """
 *         return ctf.tensor_aux.sum(self, axis, dtype, out, keepdims)             # <<<<<<<<<<<<<<
 * 
 *     def norm1(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_axis, __pyx_v_dtype, __pyx_v_out, __pyx_v_keepdims};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2339
 *         return ctf.tensor_aux.diagonal(self,offset,axis1,axis2)
 * 
 *     def sum(self, axis = None, dtype = None, out = None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         sum(axis = None, dtype = None, out = None, keepdims = None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2376
 *         return ctf.tensor_aux.sum(self, axis, dtype, out, keepdims)
 * 
 *     def norm1(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm1()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_135norm1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_134norm1, "\n        norm1()\n        1-norm of the tensor.\n\n        Returns\n        -------\n        output: scalar\n            1-norm of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a.norm1()\n        12.0\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_135norm1 = {"norm1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_135norm1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_134norm1};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_135norm1(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("norm1", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "norm1", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_134norm1(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_134norm1(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm1", 1);

  /* "ctf/tensor.pyx":2393
 *         12.0
 *         """
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             return (<Tensor[double]*>self.dt).norm1()
 *         #if self.dtype == np.complex128:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "ctf/tensor.pyx":2394
 *         """
 *         if self.dtype == np.float64:
 *             return (<Tensor[double]*>self.dt).norm1()             # <<<<<<<<<<<<<<
 *         #if self.dtype == np.complex128:
 *         #    return (<Tensor[double complex]*>self.dt).norm1()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(((CTF::Tensor<double>  *)__pyx_v_self->dt)->norm1()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2393
 *         12.0
 *         """
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             return (<Tensor[double]*>self.dt).norm1()
 *         #if self.dtype == np.complex128:
 */
  }

  /* "ctf/tensor.pyx":2398
 *         #    return (<Tensor[double complex]*>self.dt).norm1()
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')             # <<<<<<<<<<<<<<
 * 
 *     def norm2(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2398, __pyx_L1_error)
  }

  /* "ctf/tensor.pyx":2376
 *         return ctf.tensor_aux.sum(self, axis, dtype, out, keepdims)
 * 
 *     def norm1(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm1()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor.norm1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2400
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm2(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm2()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_137norm2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_136norm2, "\n        norm2()\n        2-norm of the tensor.\n\n        Returns\n        -------\n        output: scalar np.float64\n            2-norm of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a.norm2()\n        3.4641016151377544\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_137norm2 = {"norm2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_137norm2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_136norm2};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_137norm2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("norm2", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "norm2", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_136norm2(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_136norm2(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm2", 1);

  /* "ctf/tensor.pyx":2417
 *         3.4641016151377544
 *         """
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[double]*>self.dt).norm2())
 *         elif self.dtype == np.float32:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2418
 *         """
 *         if self.dtype == np.float64:
 *             return np.float64((<Tensor[double]*>self.dt).norm2())             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.float32:
 *             return np.float64((<Tensor[float]*>self.dt).norm2())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(((CTF::Tensor<double>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2418, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2417
 *         3.4641016151377544
 *         """
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[double]*>self.dt).norm2())
 *         elif self.dtype == np.float32:
 */
  }

  /* "ctf/tensor.pyx":2419
 *         if self.dtype == np.float64:
 *             return np.float64((<Tensor[double]*>self.dt).norm2())
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[float]*>self.dt).norm2())
 *         elif self.dtype == np.int64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2420
 *             return np.float64((<Tensor[double]*>self.dt).norm2())
 *         elif self.dtype == np.float32:
 *             return np.float64((<Tensor[float]*>self.dt).norm2())             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int64:
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(((CTF::Tensor<float>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2419
 *         if self.dtype == np.float64:
 *             return np.float64((<Tensor[double]*>self.dt).norm2())
 *         elif self.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[float]*>self.dt).norm2())
 *         elif self.dtype == np.int64:
 */
  }

  /* "ctf/tensor.pyx":2421
 *         elif self.dtype == np.float32:
 *             return np.float64((<Tensor[float]*>self.dt).norm2())
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())
 *         elif self.dtype == np.int32:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2422
 *             return np.float64((<Tensor[float]*>self.dt).norm2())
 *         elif self.dtype == np.int64:
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int32:
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(((CTF::Tensor<int64_t>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2421
 *         elif self.dtype == np.float32:
 *             return np.float64((<Tensor[float]*>self.dt).norm2())
 *         elif self.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())
 *         elif self.dtype == np.int32:
 */
  }

  /* "ctf/tensor.pyx":2423
 *         elif self.dtype == np.int64:
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())
 *         elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())
 *         elif self.dtype == np.int16:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2424
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())
 *         elif self.dtype == np.int32:
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int16:
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(((CTF::Tensor<int32_t>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2423
 *         elif self.dtype == np.int64:
 *             return np.float64((<Tensor[int64_t]*>self.dt).norm2())
 *         elif self.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())
 *         elif self.dtype == np.int16:
 */
  }

  /* "ctf/tensor.pyx":2425
 *         elif self.dtype == np.int32:
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())
 *         elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())
 *         elif self.dtype == np.int8:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2426
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())
 *         elif self.dtype == np.int16:
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.int8:
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(((CTF::Tensor<int16_t>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2425
 *         elif self.dtype == np.int32:
 *             return np.float64((<Tensor[int32_t]*>self.dt).norm2())
 *         elif self.dtype == np.int16:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())
 *         elif self.dtype == np.int8:
 */
  }

  /* "ctf/tensor.pyx":2427
 *         elif self.dtype == np.int16:
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())
 *         elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())
 *         elif self.dtype == np.complex64:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2428
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())
 *         elif self.dtype == np.int8:
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.complex64:
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(((CTF::Tensor<int8_t>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2427
 *         elif self.dtype == np.int16:
 *             return np.float64((<Tensor[int16_t]*>self.dt).norm2())
 *         elif self.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())
 *         elif self.dtype == np.complex64:
 */
  }

  /* "ctf/tensor.pyx":2429
 *         elif self.dtype == np.int8:
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())
 *         elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))
 *         elif self.dtype == np.complex128:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2430
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())
 *         elif self.dtype == np.complex64:
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))             # <<<<<<<<<<<<<<
 *         elif self.dtype == np.complex128:
 *             return np.float64(np.abs(np.complex128((<Tensor[complex128_t]*>self.dt).norm2())))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_abs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_complex64); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(((CTF::Tensor<__pyx_t_float_complex>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_t_9 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2429
 *         elif self.dtype == np.int8:
 *             return np.float64((<Tensor[int8_t]*>self.dt).norm2())
 *         elif self.dtype == np.complex64:             # <<<<<<<<<<<<<<
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))
 *         elif self.dtype == np.complex128:
 */
  }

  /* "ctf/tensor.pyx":2431
 *         elif self.dtype == np.complex64:
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))
 *         elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *             return np.float64(np.abs(np.complex128((<Tensor[complex128_t]*>self.dt).norm2())))
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_complex128); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "ctf/tensor.pyx":2432
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))
 *         elif self.dtype == np.complex128:
 *             return np.float64(np.abs(np.complex128((<Tensor[complex128_t]*>self.dt).norm2())))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_abs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_complex128); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(((CTF::Tensor<__pyx_t_double_complex>  *)__pyx_v_self->dt)->norm2()); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_9};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2431
 *         elif self.dtype == np.complex64:
 *             return np.float64(np.abs(np.complex64((<Tensor[complex64_t]*>self.dt).norm2())))
 *         elif self.dtype == np.complex128:             # <<<<<<<<<<<<<<
 *             return np.float64(np.abs(np.complex128((<Tensor[complex128_t]*>self.dt).norm2())))
 *         else:
 */
  }

  /* "ctf/tensor.pyx":2434
 *             return np.float64(np.abs(np.complex128((<Tensor[complex128_t]*>self.dt).norm2())))
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')             # <<<<<<<<<<<<<<
 * 
 *     def norm_infty(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2434, __pyx_L1_error)
  }

  /* "ctf/tensor.pyx":2400
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm2(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm2()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ctf.tensor.tensor.norm2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2436
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm_infty(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm_infty()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_139norm_infty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_138norm_infty, "\n        norm_infty()\n        Infinity norm of the tensor.\n\n        Returns\n        -------\n        output: scalar\n            Infinity norm of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a.norm_infty()\n        1.0\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_139norm_infty = {"norm_infty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_139norm_infty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_138norm_infty};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_139norm_infty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm_infty (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("norm_infty", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "norm_infty", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_138norm_infty(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_138norm_infty(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm_infty", 1);

  /* "ctf/tensor.pyx":2453
 *         1.0
 *         """
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             return (<Tensor[double]*>self.dt).norm_infty()
 * #        elif self.dtype == np.complex128:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->dtype), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "ctf/tensor.pyx":2454
 *         """
 *         if self.dtype == np.float64:
 *             return (<Tensor[double]*>self.dt).norm_infty()             # <<<<<<<<<<<<<<
 * #        elif self.dtype == np.complex128:
 * #            return (<Tensor[double complex]*>self.dt).norm_infty()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(((CTF::Tensor<double>  *)__pyx_v_self->dt)->norm_infty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2453
 *         1.0
 *         """
 *         if self.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             return (<Tensor[double]*>self.dt).norm_infty()
 * #        elif self.dtype == np.complex128:
 */
  }

  /* "ctf/tensor.pyx":2458
 * #            return (<Tensor[double complex]*>self.dt).norm_infty()
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')             # <<<<<<<<<<<<<<
 * 
 *     def sparsify(self, threshold, take_abs=True):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2458, __pyx_L1_error)
  }

  /* "ctf/tensor.pyx":2436
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm_infty(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm_infty()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ctf.tensor.tensor.norm_infty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2460
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def sparsify(self, threshold, take_abs=True):             # <<<<<<<<<<<<<<
 *         """
 *         sparsify()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_141sparsify(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_140sparsify, "\n        sparsify()\n        Make tensor sparse and remove all values with value or absolute value if take_abs=True below threshold.\n\n        Returns\n        -------\n        output: tensor\n            Sparsified version of the tensor\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_141sparsify = {"sparsify", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_141sparsify, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_140sparsify};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_141sparsify(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_take_abs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sparsify (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_threshold,&__pyx_n_s_take_abs,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_threshold)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2460, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_take_abs);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2460, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sparsify") < 0)) __PYX_ERR(0, 2460, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_threshold = values[0];
    __pyx_v_take_abs = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sparsify", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 2460, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.sparsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_140sparsify(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_threshold, __pyx_v_take_abs);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_140sparsify(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_threshold, PyObject *__pyx_v_take_abs) {
  char *__pyx_v_thresh;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_v_na = NULL;
  PyObject *__pyx_v_j = NULL;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_A = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  char __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sparsify", 1);

  /* "ctf/tensor.pyx":2471
 *         """
 *         cdef char * thresh
 *         st = np.ndarray([],dtype=self.dtype).itemsize             # <<<<<<<<<<<<<<
 *         thresh = <char*>malloc(st)
 *         na = np.array([threshold])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2471, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_st = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2472
 *         cdef char * thresh
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         thresh = <char*>malloc(st)             # <<<<<<<<<<<<<<
 *         na = np.array([threshold])
 *         for j in range(0,st):
 */
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_st); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2472, __pyx_L1_error)
  __pyx_v_thresh = ((char *)malloc(__pyx_t_5));

  /* "ctf/tensor.pyx":2473
 *         st = np.ndarray([],dtype=self.dtype).itemsize
 *         thresh = <char*>malloc(st)
 *         na = np.array([threshold])             # <<<<<<<<<<<<<<
 *         for j in range(0,st):
 *             thresh[j] = na.view(dtype=np.int8)[j]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_threshold)) __PYX_ERR(0, 2473, __pyx_L1_error);
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_na = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2474
 *         thresh = <char*>malloc(st)
 *         na = np.array([threshold])
 *         for j in range(0,st):             # <<<<<<<<<<<<<<
 *             thresh[j] = na.view(dtype=np.int8)[j]
 *         A = tensor(copy=self,sp=True)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_0)) __PYX_ERR(0, 2474, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_st);
  __Pyx_GIVEREF(__pyx_v_st);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_st)) __PYX_ERR(0, 2474, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2474, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2474, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 2474, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2474, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 2474, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2474, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ctf/tensor.pyx":2475
 *         na = np.array([threshold])
 *         for j in range(0,st):
 *             thresh[j] = na.view(dtype=np.int8)[j]             # <<<<<<<<<<<<<<
 *         A = tensor(copy=self,sp=True)
 *         A.dt.sparsify(thresh, take_abs)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_na, __pyx_n_s_view); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_char(__pyx_t_4); if (unlikely((__pyx_t_10 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2475, __pyx_L1_error)
    (__pyx_v_thresh[__pyx_t_11]) = __pyx_t_10;

    /* "ctf/tensor.pyx":2474
 *         thresh = <char*>malloc(st)
 *         na = np.array([threshold])
 *         for j in range(0,st):             # <<<<<<<<<<<<<<
 *             thresh[j] = na.view(dtype=np.int8)[j]
 *         A = tensor(copy=self,sp=True)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2476
 *         for j in range(0,st):
 *             thresh[j] = na.view(dtype=np.int8)[j]
 *         A = tensor(copy=self,sp=True)             # <<<<<<<<<<<<<<
 *         A.dt.sparsify(thresh, take_abs)
 *         free(thresh)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_copy, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 2476, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sp, Py_True) < 0) __PYX_ERR(0, 2476, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_A = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":2477
 *             thresh[j] = na.view(dtype=np.int8)[j]
 *         A = tensor(copy=self,sp=True)
 *         A.dt.sparsify(thresh, take_abs)             # <<<<<<<<<<<<<<
 *         free(thresh)
 *         return A
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_take_abs); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2477, __pyx_L1_error)
  (void)(__pyx_v_A->dt->sparsify(__pyx_v_thresh, __pyx_t_6));

  /* "ctf/tensor.pyx":2478
 *         A = tensor(copy=self,sp=True)
 *         A.dt.sparsify(thresh, take_abs)
 *         free(thresh)             # <<<<<<<<<<<<<<
 *         return A
 * 
 */
  free(__pyx_v_thresh);

  /* "ctf/tensor.pyx":2479
 *         A.dt.sparsify(thresh, take_abs)
 *         free(thresh)
 *         return A             # <<<<<<<<<<<<<<
 * 
 *     def to_nparray(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_A);
  __pyx_r = ((PyObject *)__pyx_v_A);
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2460
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def sparsify(self, threshold, take_abs=True):             # <<<<<<<<<<<<<<
 *         """
 *         sparsify()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ctf.tensor.tensor.sparsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_v_na);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF((PyObject *)__pyx_v_A);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2481
 *         return A
 * 
 *     def to_nparray(self):             # <<<<<<<<<<<<<<
 *         """
 *         to_nparray()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_143to_nparray(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_142to_nparray, "\n        to_nparray()\n        Convert tensor to numpy ndarray.\n\n        Returns\n        -------\n        output: ndarray\n            Numpy ndarray of the tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = ctf.ones([3,4], dtype=np.float64)\n        >>> a = ctf.ones([3,4])\n        >>> a.to_nparray()\n        array([[1., 1., 1., 1.],\n               [1., 1., 1., 1.],\n               [1., 1., 1., 1.]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_143to_nparray = {"to_nparray", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_143to_nparray, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_142to_nparray};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_143to_nparray(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_nparray (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("to_nparray", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "to_nparray", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_142to_nparray(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_142to_nparray(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_nparray", 1);

  /* "ctf/tensor.pyx":2501
 *                [1., 1., 1., 1.]])
 *         """
 *         vals = np.zeros(self.tot_size(), dtype=self.dtype)             # <<<<<<<<<<<<<<
 *         self.read_all(vals)
 *         #return np.asarray(np.ascontiguousarray(np.reshape(vals, self.shape, order='F')),order='C')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tot_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 2501, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2501, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_vals = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":2502
 *         """
 *         vals = np.zeros(self.tot_size(), dtype=self.dtype)
 *         self.read_all(vals)             # <<<<<<<<<<<<<<
 *         #return np.asarray(np.ascontiguousarray(np.reshape(vals, self.shape, order='F')),order='C')
 *         #return np.reshape(vals, ctf.helper._rev_array(self.shape)).transpose()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_all); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_vals};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":2505
 *         #return np.asarray(np.ascontiguousarray(np.reshape(vals, self.shape, order='F')),order='C')
 *         #return np.reshape(vals, ctf.helper._rev_array(self.shape)).transpose()
 *         return np.reshape(vals, self.shape)             # <<<<<<<<<<<<<<
 *         #return np.reshape(vals, self.shape, order='C')
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_vals, __pyx_v_self->shape};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2481
 *         return A
 * 
 *     def to_nparray(self):             # <<<<<<<<<<<<<<
 *         """
 *         to_nparray()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ctf.tensor.tensor.to_nparray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2508
 *         #return np.reshape(vals, self.shape, order='C')
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.to_nparray())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_145__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_145__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_144__repr__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_144__repr__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "ctf/tensor.pyx":2509
 * 
 *     def __repr__(self):
 *         return repr(self.to_nparray())             # <<<<<<<<<<<<<<
 * 
 *     def from_nparray(self, arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_nparray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2508
 *         #return np.reshape(vals, self.shape, order='C')
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.to_nparray())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2511
 *         return repr(self.to_nparray())
 * 
 *     def from_nparray(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         from_nparray(arr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_147from_nparray(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_146from_nparray, "\n        from_nparray(arr)\n        Convert numpy ndarray to CTF tensor.\n\n        Returns\n        -------\n        output: tensor\n            CTF tensor of the numpy ndarray.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> import numpy as np\n        >>> a = np.asarray([1.,2.,3.])\n        >>> b = zeros([3, ])\n        >>> b.from_nparray(a)\n        >>> b\n        array([1., 2., 3.])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_147from_nparray = {"from_nparray", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_147from_nparray, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_146from_nparray};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_147from_nparray(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_arr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_nparray (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2511, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_nparray") < 0)) __PYX_ERR(0, 2511, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_arr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_nparray", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2511, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.from_nparray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_146from_nparray(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_arr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_146from_nparray(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_nparray", 1);

  /* "ctf/tensor.pyx":2531
 *         array([1., 2., 3.])
 *         """
 *         if arr.dtype != self.dtype:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_v_self->dtype), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "ctf/tensor.pyx":2532
 *         """
 *         if arr.dtype != self.dtype:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             self.__write_all(arr)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2532, __pyx_L1_error)

    /* "ctf/tensor.pyx":2531
 *         array([1., 2., 3.])
 *         """
 *         if arr.dtype != self.dtype:             # <<<<<<<<<<<<<<
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 */
  }

  /* "ctf/tensor.pyx":2533
 *         if arr.dtype != self.dtype:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             self.__write_all(arr)
 *         elif self.dt.wrld.rank == 0:
 */
  __pyx_t_4 = (__pyx_v_self->dt->wrld->np == 1);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_self->sp == 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SYM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_NS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->sym), __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2534
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             self.__write_all(arr)             # <<<<<<<<<<<<<<
 *         elif self.dt.wrld.rank == 0:
 *             self.write(np.arange(0,self.tot_size(),dtype=np.int64),arr.ravel())
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tensor__write_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_arr};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":2533
 *         if arr.dtype != self.dtype:
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):             # <<<<<<<<<<<<<<
 *             self.__write_all(arr)
 *         elif self.dt.wrld.rank == 0:
 */
    goto __pyx_L4;
  }

  /* "ctf/tensor.pyx":2535
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             self.__write_all(arr)
 *         elif self.dt.wrld.rank == 0:             # <<<<<<<<<<<<<<
 *             self.write(np.arange(0,self.tot_size(),dtype=np.int64),arr.ravel())
 *         else:
 */
  __pyx_t_3 = (__pyx_v_self->dt->wrld->rank == 0);
  if (__pyx_t_3) {

    /* "ctf/tensor.pyx":2536
 *             self.__write_all(arr)
 *         elif self.dt.wrld.rank == 0:
 *             self.write(np.arange(0,self.tot_size(),dtype=np.int64),arr.ravel())             # <<<<<<<<<<<<<<
 *         else:
 *             self.write([], [])
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tot_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_int_0)) __PYX_ERR(0, 2536, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1)) __PYX_ERR(0, 2536, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_ravel); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_10, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ctf/tensor.pyx":2535
 *         if self.dt.wrld.np == 1 and self.sp == 0 and np.all(self.sym == SYM.NS):
 *             self.__write_all(arr)
 *         elif self.dt.wrld.rank == 0:             # <<<<<<<<<<<<<<
 *             self.write(np.arange(0,self.tot_size(),dtype=np.int64),arr.ravel())
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ctf/tensor.pyx":2538
 *             self.write(np.arange(0,self.tot_size(),dtype=np.int64),arr.ravel())
 *         else:
 *             self.write([], [])             # <<<<<<<<<<<<<<
 * 
 *     def take(self, indices, axis=None, out=None, mode='raise'):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_1, __pyx_t_10};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "ctf/tensor.pyx":2511
 *         return repr(self.to_nparray())
 * 
 *     def from_nparray(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         from_nparray(arr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ctf.tensor.tensor.from_nparray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2540
 *             self.write([], [])
 * 
 *     def take(self, indices, axis=None, out=None, mode='raise'):             # <<<<<<<<<<<<<<
 *         """
 *         take(indices, axis=None, out=None, mode='raise')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_149take(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_148take, "\n        take(indices, axis=None, out=None, mode='raise')\n        Take elements from a tensor along axis.\n\n        Parameters\n        ----------\n        indices: tensor_like\n            Indices of the values wnat to be extracted.\n\n        axis: int, optional\n            Select values from which axis, default None.\n\n        out: tensor\n            Currently not supported in CTF Python take().\n\n        mode: {\342\200\230raise\342\200\231, \342\200\230wrap\342\200\231, \342\200\230clip\342\200\231}, optional\n            Currently not supported in CTF Python take().\n\n        Returns\n        -------\n        output: tensor or scalar\n            Elements extracted from the input tensor.\n\n        See Also\n        --------\n        numpy: numpy.take()\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.take([0, 1, 2])\n        array([1, 2, 3])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_149take = {"take", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_149take, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_148take};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_149take(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_indices = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_out = 0;
  PyObject *__pyx_v_mode = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("take (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indices,&__pyx_n_s_axis,&__pyx_n_s_out,&__pyx_n_s_mode,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_raise));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_indices)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2540, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_axis);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2540, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_out);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2540, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2540, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "take") < 0)) __PYX_ERR(0, 2540, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_indices = values[0];
    __pyx_v_axis = values[1];
    __pyx_v_out = values[2];
    __pyx_v_mode = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("take", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 2540, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.take", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_148take(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_indices, __pyx_v_axis, __pyx_v_out, __pyx_v_mode);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_148take(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_indices, PyObject *__pyx_v_axis, PyObject *__pyx_v_out, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("take", 1);

  /* "ctf/tensor.pyx":2575
 *         array([1, 2, 3])
 *         """
 *         return ctf.tensor_aux.take(self,indices,axis,out,mode)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, b, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_take); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_indices, __pyx_v_axis, __pyx_v_out, __pyx_v_mode};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ctf/tensor.pyx":2540
 *             self.write([], [])
 * 
 *     def take(self, indices, axis=None, out=None, mode='raise'):             # <<<<<<<<<<<<<<
 *         """
 *         take(indices, axis=None, out=None, mode='raise')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ctf.tensor.tensor.take", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2577
 *         return ctf.tensor_aux.take(self,indices,axis,out,mode)
 * 
 *     def __richcmp__(self, b, op):             # <<<<<<<<<<<<<<
 *         if isinstance(b,tensor):
 *             if b.dtype == self.dtype:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_151__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_b, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_151__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_b, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 2577, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ctf.tensor.tensor.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_150__richcmp__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), ((PyObject *)__pyx_v_b), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_DECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_150__richcmp__(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_b, PyObject *__pyx_v_op) {
  PyObject *__pyx_v_typ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 1);

  /* "ctf/tensor.pyx":2578
 * 
 *     def __richcmp__(self, b, op):
 *         if isinstance(b,tensor):             # <<<<<<<<<<<<<<
 *             if b.dtype == self.dtype:
 *                 return self._compare_tensors(b,op)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_b, __pyx_ptype_3ctf_6tensor_tensor); 
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":2579
 *     def __richcmp__(self, b, op):
 *         if isinstance(b,tensor):
 *             if b.dtype == self.dtype:             # <<<<<<<<<<<<<<
 *                 return self._compare_tensors(b,op)
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)__pyx_v_self->dtype), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "ctf/tensor.pyx":2580
 *         if isinstance(b,tensor):
 *             if b.dtype == self.dtype:
 *                 return self._compare_tensors(b,op)             # <<<<<<<<<<<<<<
 *             else:
 *                 typ = ctf.helper._get_np_dtype([b.dtype,self.dtype])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compare_tensors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_b, __pyx_v_op};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "ctf/tensor.pyx":2579
 *     def __richcmp__(self, b, op):
 *         if isinstance(b,tensor):
 *             if b.dtype == self.dtype:             # <<<<<<<<<<<<<<
 *                 return self._compare_tensors(b,op)
 *             else:
 */
    }

    /* "ctf/tensor.pyx":2582
 *                 return self._compare_tensors(b,op)
 *             else:
 *                 typ = ctf.helper._get_np_dtype([b.dtype,self.dtype])             # <<<<<<<<<<<<<<
 *                 if b.dtype != typ:
 *                     return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=typ),op)
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_helper); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_np_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_4)) __PYX_ERR(0, 2582, __pyx_L1_error);
      __Pyx_INCREF((PyObject *)__pyx_v_self->dtype);
      __Pyx_GIVEREF((PyObject *)__pyx_v_self->dtype);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_v_self->dtype))) __PYX_ERR(0, 2582, __pyx_L1_error);
      __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_v_typ = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "ctf/tensor.pyx":2583
 *             else:
 *                 typ = ctf.helper._get_np_dtype([b.dtype,self.dtype])
 *                 if b.dtype != typ:             # <<<<<<<<<<<<<<
 *                     return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=typ),op)
 *                 else:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_typ, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2583, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2583, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "ctf/tensor.pyx":2584
 *                 typ = ctf.helper._get_np_dtype([b.dtype,self.dtype])
 *                 if b.dtype != typ:
 *                     return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=typ),op)             # <<<<<<<<<<<<<<
 *                 else:
 *                     return ctf.tensor_aux.astensor(self,dtype=typ)._compare_tensors(b,op)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compare_tensors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ctf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_astensor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_b)) __PYX_ERR(0, 2584, __pyx_L1_error);
        __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_v_typ) < 0) __PYX_ERR(0, 2584, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_8, __pyx_v_op};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2584, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "ctf/tensor.pyx":2583
 *             else:
 *                 typ = ctf.helper._get_np_dtype([b.dtype,self.dtype])
 *                 if b.dtype != typ:             # <<<<<<<<<<<<<<
 *                     return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=typ),op)
 *                 else:
 */
      }

      /* "ctf/tensor.pyx":2586
 *                     return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=typ),op)
 *                 else:
 *                     return ctf.tensor_aux.astensor(self,dtype=typ)._compare_tensors(b,op)             # <<<<<<<<<<<<<<
 *         elif isinstance(b,np.ndarray):
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b),op)
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_astensor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF((PyObject *)__pyx_v_self);
        __Pyx_GIVEREF((PyObject *)__pyx_v_self);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 2586, __pyx_L1_error);
        __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_v_typ) < 0) __PYX_ERR(0, 2586, __pyx_L1_error)
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_compare_tensors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_b, __pyx_v_op};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2586, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;
      }
    }

    /* "ctf/tensor.pyx":2578
 * 
 *     def __richcmp__(self, b, op):
 *         if isinstance(b,tensor):             # <<<<<<<<<<<<<<
 *             if b.dtype == self.dtype:
 *                 return self._compare_tensors(b,op)
 */
  }

  /* "ctf/tensor.pyx":2587
 *                 else:
 *                     return ctf.tensor_aux.astensor(self,dtype=typ)._compare_tensors(b,op)
 *         elif isinstance(b,np.ndarray):             # <<<<<<<<<<<<<<
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b),op)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_b, __pyx_t_7); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_1) {

    /* "ctf/tensor.pyx":2588
 *                     return ctf.tensor_aux.astensor(self,dtype=typ)._compare_tensors(b,op)
 *         elif isinstance(b,np.ndarray):
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b),op)             # <<<<<<<<<<<<<<
 *         else:
 *             #A = tensor(self.shape,dtype=self.dtype)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compare_tensors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctf); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astensor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_b};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_4, __pyx_v_op};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2587
 *                 else:
 *                     return ctf.tensor_aux.astensor(self,dtype=typ)._compare_tensors(b,op)
 *         elif isinstance(b,np.ndarray):             # <<<<<<<<<<<<<<
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b),op)
 *         else:
 */
  }

  /* "ctf/tensor.pyx":2593
 *             #A.set_all(b)
 *             #return self._compare_tensors(A,op)
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=self.dtype),op)             # <<<<<<<<<<<<<<
 * 
 *     def sample(tensor self, p):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compare_tensors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_astensor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_b)) __PYX_ERR(0, 2593, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)__pyx_v_self->dtype)) < 0) __PYX_ERR(0, 2593, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_6, __pyx_v_op};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "ctf/tensor.pyx":2577
 *         return ctf.tensor_aux.take(self,indices,axis,out,mode)
 * 
 *     def __richcmp__(self, b, op):             # <<<<<<<<<<<<<<
 *         if isinstance(b,tensor):
 *             if b.dtype == self.dtype:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ctf.tensor.tensor.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_typ);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2595
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=self.dtype),op)
 * 
 *     def sample(tensor self, p):             # <<<<<<<<<<<<<<
 *         """
 *         sample(p)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_153sample(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_3ctf_6tensor_6tensor_152sample, "\n        sample(p)\n        Extract a sample of the entries (if sparse of the current nonzeros) by keeping each entry with probability p. Also transforms tensor into sparse format if not already.\n\n        Parameters\n        ----------\n        p: float\n            Probability that keep each entry.\n\n        Returns\n        -------\n        output: tensor or scalar\n            Elements extracted from the input tensor.\n\n        Examples\n        --------\n        >>> import ctf\n        >>> a = astensor([[1,2,3], [4,5,6], [7,8,9]])\n        >>> a.sample(0.1)\n        >>> a\n        array([[0, 0, 3],\n               [0, 0, 6],\n               [0, 0, 0]])\n        ");
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_153sample = {"sample", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_153sample, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_152sample};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_153sample(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_p = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2595, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sample") < 0)) __PYX_ERR(0, 2595, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2595, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_152sample(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_p);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_152sample(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sample", 1);

  /* "ctf/tensor.pyx":2620
 *                [0, 0, 0]])
 *         """
 *         subsample(self.dt, p)             # <<<<<<<<<<<<<<
 * 
 *     # change the operators "<","<=","==","!=",">",">=" when applied to tensors
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_p); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2620, __pyx_L1_error)
  CTF_int::subsample(__pyx_v_self->dt, __pyx_t_1);

  /* "ctf/tensor.pyx":2595
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=self.dtype),op)
 * 
 *     def sample(tensor self, p):             # <<<<<<<<<<<<<<
 *         """
 *         sample(p)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ctf.tensor.tensor.sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ctf/tensor.pyx":2624
 *     # change the operators "<","<=","==","!=",">",">=" when applied to tensors
 *     # also for each operator we need to add the template.
 *     def _compare_tensors(tensor self, tensor b, op):             # <<<<<<<<<<<<<<
 *         new_shape = []
 *         for i in range(min(self.ndim,b.ndim)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_155_compare_tensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_155_compare_tensors = {"_compare_tensors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_155_compare_tensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_155_compare_tensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_b = 0;
  PyObject *__pyx_v_op = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compare_tensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_b,&__pyx_n_s_op,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2624, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_op)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2624, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_compare_tensors", 1, 2, 2, 1); __PYX_ERR(0, 2624, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_compare_tensors") < 0)) __PYX_ERR(0, 2624, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_b = ((struct __pyx_obj_3ctf_6tensor_tensor *)values[0]);
    __pyx_v_op = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compare_tensors", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2624, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor._compare_tensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_3ctf_6tensor_tensor, 1, "b", 0))) __PYX_ERR(0, 2624, __pyx_L1_error)
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_154_compare_tensors(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v_b, __pyx_v_op);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_154_compare_tensors(struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_b, PyObject *__pyx_v_op) {
  PyObject *__pyx_v_new_shape = NULL;
  int __pyx_v_i;
  struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compare_tensors", 1);

  /* "ctf/tensor.pyx":2625
 *     # also for each operator we need to add the template.
 *     def _compare_tensors(tensor self, tensor b, op):
 *         new_shape = []             # <<<<<<<<<<<<<<
 *         for i in range(min(self.ndim,b.ndim)):
 *             new_shape.append(self.shape[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_shape = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ctf/tensor.pyx":2626
 *     def _compare_tensors(tensor self, tensor b, op):
 *         new_shape = []
 *         for i in range(min(self.ndim,b.ndim)):             # <<<<<<<<<<<<<<
 *             new_shape.append(self.shape[i])
 *             if b.shape[i] != new_shape[i]:
 */
  __pyx_t_2 = __pyx_v_b->ndim;
  __pyx_t_3 = __pyx_v_self->ndim;
  __pyx_t_5 = (__pyx_t_2 < __pyx_t_3);
  if (__pyx_t_5) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_t_2 = __pyx_t_4;
  __pyx_t_4 = __pyx_t_2;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_4; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ctf/tensor.pyx":2627
 *         new_shape = []
 *         for i in range(min(self.ndim,b.ndim)):
 *             new_shape.append(self.shape[i])             # <<<<<<<<<<<<<<
 *             if b.shape[i] != new_shape[i]:
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')
 */
    if (unlikely(__pyx_v_self->shape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2627, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_self->shape, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_shape, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ctf/tensor.pyx":2628
 *         for i in range(min(self.ndim,b.ndim)):
 *             new_shape.append(self.shape[i])
 *             if b.shape[i] != new_shape[i]:             # <<<<<<<<<<<<<<
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 */
    if (unlikely(__pyx_v_b->shape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2628, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_b->shape, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_new_shape, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_t_5)) {

      /* "ctf/tensor.pyx":2629
 *             new_shape.append(self.shape[i])
 *             if b.shape[i] != new_shape[i]:
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')             # <<<<<<<<<<<<<<
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 *             if self.ndim > b.ndim:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 2629, __pyx_L1_error)

      /* "ctf/tensor.pyx":2628
 *         for i in range(min(self.ndim,b.ndim)):
 *             new_shape.append(self.shape[i])
 *             if b.shape[i] != new_shape[i]:             # <<<<<<<<<<<<<<
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 */
    }
  }

  /* "ctf/tensor.pyx":2630
 *             if b.shape[i] != new_shape[i]:
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):             # <<<<<<<<<<<<<<
 *             if self.ndim > b.ndim:
 *                 new_shape.append(self.shape[i])
 */
  __pyx_t_2 = __pyx_v_b->ndim;
  __pyx_t_4 = __pyx_v_self->ndim;
  __pyx_t_5 = (__pyx_t_2 > __pyx_t_4);
  if (__pyx_t_5) {
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_4;
  }
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = __pyx_v_b->ndim;
  __pyx_t_4 = __pyx_v_self->ndim;
  __pyx_t_5 = (__pyx_t_3 < __pyx_t_4);
  if (__pyx_t_5) {
    __pyx_t_9 = __pyx_t_3;
  } else {
    __pyx_t_9 = __pyx_t_4;
  }
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = __pyx_t_9; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ctf/tensor.pyx":2631
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 *             if self.ndim > b.ndim:             # <<<<<<<<<<<<<<
 *                 new_shape.append(self.shape[i])
 *             else:
 */
    __pyx_t_5 = (__pyx_v_self->ndim > __pyx_v_b->ndim);
    if (__pyx_t_5) {

      /* "ctf/tensor.pyx":2632
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 *             if self.ndim > b.ndim:
 *                 new_shape.append(self.shape[i])             # <<<<<<<<<<<<<<
 *             else:
 *                 new_shape.append(b.shape[i])
 */
      if (unlikely(__pyx_v_self->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2632, __pyx_L1_error)
      }
      __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_self->shape, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_shape, __pyx_t_8); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2632, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "ctf/tensor.pyx":2631
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 *             if self.ndim > b.ndim:             # <<<<<<<<<<<<<<
 *                 new_shape.append(self.shape[i])
 *             else:
 */
      goto __pyx_L8;
    }

    /* "ctf/tensor.pyx":2634
 *                 new_shape.append(self.shape[i])
 *             else:
 *                 new_shape.append(b.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         c = tensor(new_shape, dtype=np.bool_, sp=self.sp)
 */
    /*else*/ {
      if (unlikely(__pyx_v_b->shape == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2634, __pyx_L1_error)
      }
      __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_b->shape, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_shape, __pyx_t_8); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2634, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L8:;
  }

  /* "ctf/tensor.pyx":2636
 *                 new_shape.append(b.shape[i])
 * 
 *         c = tensor(new_shape, dtype=np.bool_, sp=self.sp)             # <<<<<<<<<<<<<<
 *         # <
 *         if op == 0:
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_new_shape);
  __Pyx_GIVEREF(__pyx_v_new_shape);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_new_shape)) __PYX_ERR(0, 2636, __pyx_L1_error);
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_bool); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->sp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_sp, __pyx_t_10) < 0) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ctf_6tensor_tensor), __pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_c = ((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "ctf/tensor.pyx":2638
 *         c = tensor(new_shape, dtype=np.bool_, sp=self.sp)
 *         # <
 *         if op == 0:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_op, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2638, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2639
 *         # <
 *         if op == 0:
 *             c.dt.elementwise_smaller(<ctensor*>self.dt,<ctensor*>b.dt)             # <<<<<<<<<<<<<<
 *             return c
 *         # <=
 */
    __pyx_v_c->dt->elementwise_smaller(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_b->dt));

    /* "ctf/tensor.pyx":2640
 *         if op == 0:
 *             c.dt.elementwise_smaller(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c             # <<<<<<<<<<<<<<
 *         # <=
 *         if op == 1:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2638
 *         c = tensor(new_shape, dtype=np.bool_, sp=self.sp)
 *         # <
 *         if op == 0:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  }

  /* "ctf/tensor.pyx":2642
 *             return c
 *         # <=
 *         if op == 1:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_op, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2642, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2643
 *         # <=
 *         if op == 1:
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>self.dt,<ctensor*>b.dt)             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
    __pyx_v_c->dt->elementwise_smaller_or_equal(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_b->dt));

    /* "ctf/tensor.pyx":2644
 *         if op == 1:
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c             # <<<<<<<<<<<<<<
 * 
 *         # ==
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2642
 *             return c
 *         # <=
 *         if op == 1:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  }

  /* "ctf/tensor.pyx":2647
 * 
 *         # ==
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_is_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_op, __pyx_int_2, 2, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2647, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2648
 *         # ==
 *         if op == 2:
 *             c.dt.elementwise_is_equal(<ctensor*>self.dt,<ctensor*>b.dt)             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
    __pyx_v_c->dt->elementwise_is_equal(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_b->dt));

    /* "ctf/tensor.pyx":2649
 *         if op == 2:
 *             c.dt.elementwise_is_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c             # <<<<<<<<<<<<<<
 * 
 *         # !=
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2647
 * 
 *         # ==
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_is_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  }

  /* "ctf/tensor.pyx":2652
 * 
 *         # !=
 *         if op == 3:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_is_not_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_op, __pyx_int_3, 3, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2652, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2653
 *         # !=
 *         if op == 3:
 *             c.dt.elementwise_is_not_equal(<ctensor*>self.dt,<ctensor*>b.dt)             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
    __pyx_v_c->dt->elementwise_is_not_equal(((CTF_int::tensor *)__pyx_v_self->dt), ((CTF_int::tensor *)__pyx_v_b->dt));

    /* "ctf/tensor.pyx":2654
 *         if op == 3:
 *             c.dt.elementwise_is_not_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c             # <<<<<<<<<<<<<<
 * 
 *         # >
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2652
 * 
 *         # !=
 *         if op == 3:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_is_not_equal(<ctensor*>self.dt,<ctensor*>b.dt)
 *             return c
 */
  }

  /* "ctf/tensor.pyx":2657
 * 
 *         # >
 *         if op == 4:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller(<ctensor*>b.dt,<ctensor*>self.dt)
 *             return c
 */
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_op, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2657, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2658
 *         # >
 *         if op == 4:
 *             c.dt.elementwise_smaller(<ctensor*>b.dt,<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
    __pyx_v_c->dt->elementwise_smaller(((CTF_int::tensor *)__pyx_v_b->dt), ((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":2659
 *         if op == 4:
 *             c.dt.elementwise_smaller(<ctensor*>b.dt,<ctensor*>self.dt)
 *             return c             # <<<<<<<<<<<<<<
 * 
 *         # >=
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2657
 * 
 *         # >
 *         if op == 4:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller(<ctensor*>b.dt,<ctensor*>self.dt)
 *             return c
 */
  }

  /* "ctf/tensor.pyx":2662
 * 
 *         # >=
 *         if op == 5:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>b.dt,<ctensor*>self.dt)
 *             return c
 */
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_op, __pyx_int_5, 5, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2662, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ctf/tensor.pyx":2663
 *         # >=
 *         if op == 5:
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>b.dt,<ctensor*>self.dt)             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
    __pyx_v_c->dt->elementwise_smaller_or_equal(((CTF_int::tensor *)__pyx_v_b->dt), ((CTF_int::tensor *)__pyx_v_self->dt));

    /* "ctf/tensor.pyx":2664
 *         if op == 5:
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>b.dt,<ctensor*>self.dt)
 *             return c             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_c);
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "ctf/tensor.pyx":2662
 * 
 *         # >=
 *         if op == 5:             # <<<<<<<<<<<<<<
 *             c.dt.elementwise_smaller_or_equal(<ctensor*>b.dt,<ctensor*>self.dt)
 *             return c
 */
  }

  /* "ctf/tensor.pyx":2624
 *     # change the operators "<","<=","==","!=",">",">=" when applied to tensors
 *     # also for each operator we need to add the template.
 *     def _compare_tensors(tensor self, tensor b, op):             # <<<<<<<<<<<<<<
 *         new_shape = []
 *         for i in range(min(self.ndim,b.ndim)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ctf.tensor.tensor._compare_tensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_shape);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_157__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_157__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_157__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_157__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_156__reduce_cython__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_156__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ctf.tensor.tensor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_159__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_3ctf_6tensor_6tensor_159__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_159__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3ctf_6tensor_6tensor_159__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("ctf.tensor.tensor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ctf_6tensor_6tensor_158__setstate_cython__(((struct __pyx_obj_3ctf_6tensor_tensor *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ctf_6tensor_6tensor_158__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3ctf_6tensor_tensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ctf.tensor.tensor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_3ctf_6tensor_tensor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3ctf_6tensor_tensor *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_3ctf_6tensor_tensor *)o);
  p->sym = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->strides = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->dtype = ((PyArray_Descr *)Py_None); Py_INCREF(Py_None);
  p->shape = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_3ctf_6tensor_6tensor_11__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ctf_6tensor_tensor(PyObject *o) {
  struct __pyx_obj_3ctf_6tensor_tensor *p = (struct __pyx_obj_3ctf_6tensor_tensor *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_3ctf_6tensor_tensor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3ctf_6tensor_6tensor_13__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->sym);
  Py_CLEAR(p->strides);
  Py_CLEAR(p->dtype);
  Py_CLEAR(p->shape);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_3ctf_6tensor_tensor(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3ctf_6tensor_tensor *p = (struct __pyx_obj_3ctf_6tensor_tensor *)o;
  if (p->sym) {
    e = (*v)(((PyObject *)p->sym), a); if (e) return e;
  }
  if (p->strides) {
    e = (*v)(p->strides, a); if (e) return e;
  }
  if (p->dtype) {
    e = (*v)(((PyObject *)p->dtype), a); if (e) return e;
  }
  if (p->shape) {
    e = (*v)(p->shape, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3ctf_6tensor_tensor(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3ctf_6tensor_tensor *p = (struct __pyx_obj_3ctf_6tensor_tensor *)o;
  tmp = ((PyObject*)p->sym);
  p->sym = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->strides);
  p->strides = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dtype);
  p->dtype = ((PyArray_Descr *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->shape);
  p->shape = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_3ctf_6tensor_tensor(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_3ctf_6tensor_tensor(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_3ctf_6tensor_6tensor_127__setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_add_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_3ctf_6tensor_tensor(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_31__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_add_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_3ctf_6tensor_tensor(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_39__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_subtract_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_3ctf_6tensor_tensor(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_35__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_multiply_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static CYTHON_INLINE PyObject *__pyx_nb_divide_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_divide_3ctf_6tensor_tensor(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_divide == &__pyx_nb_divide_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_47__div__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_divide == &__pyx_nb_divide_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_divide_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}


#endif

static CYTHON_INLINE PyObject *__pyx_nb_power_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right , PyObject* extra_arg) {
    ternaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_power : NULL;
#else
    slot = (ternaryfunc) PyType_GetSlot(type, Py_nb_power);
#endif
    return slot ? slot(left, right , extra_arg) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_power_3ctf_6tensor_tensor(PyObject *left, PyObject *right , PyObject* extra_arg) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_power == &__pyx_nb_power_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_51__pow__(left, right, extra_arg);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_power == &__pyx_nb_power_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_power_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right , extra_arg);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_true_divide_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_true_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_true_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_true_divide_3ctf_6tensor_tensor(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_43__truediv__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_true_divide_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



#if PY_VERSION_HEX >= 0x03050000
static CYTHON_INLINE PyObject *__pyx_nb_matrix_multiply_3ctf_6tensor_tensor_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_matrix_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_matrix_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_matrix_multiply_3ctf_6tensor_tensor(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_matrix_multiply == &__pyx_nb_matrix_multiply_3ctf_6tensor_tensor)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_3ctf_6tensor_6tensor_55__matmul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_matrix_multiply == &__pyx_nb_matrix_multiply_3ctf_6tensor_tensor)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_3ctf_6tensor_tensor);
    if (maybe_self_is_right) {
        return __pyx_nb_matrix_multiply_3ctf_6tensor_tensor_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_3ctf_6tensor_tensor, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}


#endif

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_7strides_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_4size_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_5shape_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_order(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_5order_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_sp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_2sp_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_sym(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_3sym_1__get__(o);
}

static PyObject *__pyx_getprop_3ctf_6tensor_6tensor_nnz_tot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3ctf_6tensor_6tensor_7nnz_tot_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_3ctf_6tensor_6tensor_145__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_3ctf_6tensor_6tensor_145__repr__(self);
}

static PyMethodDef __pyx_methods_3ctf_6tensor_tensor[] = {
  {"_bool_sum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_1_bool_sum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_convert_type", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_3_convert_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_dims", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_5get_dims, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_4get_dims},
  {"get_type", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_7get_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_6get_type},
  {"get_distribution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_9get_distribution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_8get_distribution},
  {"T", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_15T, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_14T},
  {"transpose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_17transpose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_16transpose},
  {"_ufunc_interpret", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_19_ufunc_interpret, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_invert_elements", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_53_invert_elements, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"fill_random", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_57fill_random, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_56fill_random},
  {"fill_sp_random", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_59fill_sp_random, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_58fill_sp_random},
  {"read_from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_61read_from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"write_to_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_63write_to_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_exp_python", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_65_exp_python, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_67all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_66all},
  {"i", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_69i, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_68i},
  {"prnt", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_71prnt, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_70prnt},
  {"real", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_73real, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_72real},
  {"imag", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_75imag, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_74imag},
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_77copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_76copy},
  {"reshape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_79reshape, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_78reshape},
  {"ravel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_81ravel, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_80ravel},
  {"read", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_83read, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_82read},
  {"item", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_85item, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_84item},
  {"astype", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_87astype, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_86astype},
  {"read_local", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_89read_local, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_88read_local},
  {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_91dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_90dot},
  {"tensordot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_93tensordot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_92tensordot},
  {"read_local_nnz", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_95read_local_nnz, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_94read_local_nnz},
  {"tot_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_97tot_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"read_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_99read_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_98read_all},
  {"read_all_nnz", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_101read_all_nnz, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_100read_all_nnz},
  {"_tensor__read_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_103_tensor__read_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_102__read_all},
  {"_tensor__write_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_105_tensor__write_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_104__write_all},
  {"conj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_107conj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_106conj},
  {"permute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_109permute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_108permute},
  {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_111write, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_110write},
  {"_get_slice", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_113_get_slice, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_write_slice", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_115_write_slice, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__deepcopy__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_117__deepcopy__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"set_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_121set_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"set_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_123set_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_122set_zero},
  {"set_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_125set_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_124set_all},
  {"trace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_129trace, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_128trace},
  {"diagonal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_131diagonal, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_130diagonal},
  {"sum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_133sum, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_132sum},
  {"norm1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_135norm1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_134norm1},
  {"norm2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_137norm2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_136norm2},
  {"norm_infty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_139norm_infty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_138norm_infty},
  {"sparsify", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_141sparsify, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_140sparsify},
  {"to_nparray", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_143to_nparray, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_142to_nparray},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_3ctf_6tensor_6tensor_145__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"from_nparray", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_147from_nparray, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_146from_nparray},
  {"take", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_149take, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_148take},
  {"sample", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_153sample, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_3ctf_6tensor_6tensor_152sample},
  {"_compare_tensors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_155_compare_tensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_157__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_3ctf_6tensor_6tensor_159__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3ctf_6tensor_tensor[] = {
  {(char *)"strides", __pyx_getprop_3ctf_6tensor_6tensor_strides, 0, (char *)PyDoc_STR("\n        Attribute strides. Tuple of bytes for each dimension to traverse the tensor.\n        "), 0},
  {(char *)"nbytes", __pyx_getprop_3ctf_6tensor_6tensor_nbytes, 0, (char *)PyDoc_STR("\n        Attribute nbytes. The number of bytes for the tensor.\n        "), 0},
  {(char *)"itemsize", __pyx_getprop_3ctf_6tensor_6tensor_itemsize, 0, (char *)PyDoc_STR("\n        Attribute itemsize. One element in bytes.\n        "), 0},
  {(char *)"size", __pyx_getprop_3ctf_6tensor_6tensor_size, 0, (char *)PyDoc_STR("\n        Attribute size. Total number of elements in the tensor.\n        "), 0},
  {(char *)"ndim", __pyx_getprop_3ctf_6tensor_6tensor_ndim, 0, (char *)PyDoc_STR("\n        Attribute ndim. Number of dimensions.\n        "), 0},
  {(char *)"shape", __pyx_getprop_3ctf_6tensor_6tensor_shape, 0, (char *)PyDoc_STR("\n        Attribute shape. Tuple of each dimension.\n        "), 0},
  {(char *)"dtype", __pyx_getprop_3ctf_6tensor_6tensor_dtype, 0, (char *)PyDoc_STR("\n        Attribute dtype. Numpy data-type, indicating the type of tensor.\n        "), 0},
  {(char *)"order", __pyx_getprop_3ctf_6tensor_6tensor_order, 0, (char *)PyDoc_STR("\n        Attribute order. Bytes memory order for the tensor.\n        "), 0},
  {(char *)"sp", __pyx_getprop_3ctf_6tensor_6tensor_sp, 0, (char *)PyDoc_STR("\n        Attribute sp. 0 indicates the tensor is not sparse tensor, 1 means the tensor is CTF sparse tensor.\n        "), 0},
  {(char *)"sym", __pyx_getprop_3ctf_6tensor_6tensor_sym, 0, (char *)PyDoc_STR("\n        Attribute sym. Specifies symmetry for use for symmetric storage (and causing symmetrization of accumulation expressions to this tensor), sym should be of size order, with each element NS/SY/AS/SH denoting symmetry relationship with the next mode (see also C++ docs and tensor constructor)\n        "), 0},
  {(char *)"nnz_tot", __pyx_getprop_3ctf_6tensor_6tensor_nnz_tot, 0, (char *)PyDoc_STR("\n        Total number of nonzeros in tensor\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_3ctf_6tensor_tensor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_3ctf_6tensor_tensor},
  {Py_tp_repr, (void *)__pyx_pw_3ctf_6tensor_6tensor_145__repr__},
  {Py_nb_add, (void *)__pyx_nb_add_3ctf_6tensor_tensor},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_3ctf_6tensor_tensor},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_3ctf_6tensor_tensor},
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  {Py_nb_divide, (void *)__pyx_nb_divide_3ctf_6tensor_tensor},
  #endif
  {Py_nb_power, (void *)__pyx_nb_power_3ctf_6tensor_tensor},
  {Py_nb_negative, (void *)__pyx_pw_3ctf_6tensor_6tensor_29__neg__},
  {Py_nb_absolute, (void *)__pyx_pw_3ctf_6tensor_6tensor_21__abs__},
  {Py_nb_bool, (void *)__pyx_pw_3ctf_6tensor_6tensor_23__nonzero__},
  {Py_nb_int, (void *)__pyx_pw_3ctf_6tensor_6tensor_25__int__},
  #if PY_MAJOR_VERSION < 3
  {Py_nb_long, (void *)__pyx_pw_3ctf_6tensor_6tensor_25__int__},
  #endif
  {Py_nb_float, (void *)__pyx_pw_3ctf_6tensor_6tensor_27__float__},
  {Py_nb_inplace_add, (void *)__pyx_pw_3ctf_6tensor_6tensor_33__iadd__},
  {Py_nb_inplace_subtract, (void *)__pyx_pw_3ctf_6tensor_6tensor_41__isub__},
  {Py_nb_inplace_multiply, (void *)__pyx_pw_3ctf_6tensor_6tensor_37__imul__},
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  {Py_nb_inplace_divide, (void *)__pyx_pw_3ctf_6tensor_6tensor_49__idiv__},
  #endif
  {Py_nb_true_divide, (void *)__pyx_nb_true_divide_3ctf_6tensor_tensor},
  {Py_nb_inplace_true_divide, (void *)__pyx_pw_3ctf_6tensor_6tensor_45__itruediv__},
  #if PY_VERSION_HEX >= 0x03050000
  {Py_nb_matrix_multiply, (void *)__pyx_nb_matrix_multiply_3ctf_6tensor_tensor},
  #endif
  {Py_sq_item, (void *)__pyx_sq_item_3ctf_6tensor_tensor},
  {Py_mp_subscript, (void *)__pyx_pw_3ctf_6tensor_6tensor_119__getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_3ctf_6tensor_tensor},
  {Py_tp_doc, (void *)PyDoc_STR("\n    The class for CTF Python tensor.\n\n    Attributes\n    ----------\n    nbytes: int\n        The number of bytes for the tensor.\n\n    size: int\n        Total number of elements in the tensor.\n\n    ndim: int\n        Number of dimensions.\n\n    sp: int\n        0 indicates the tensor is not sparse tensor, 1 means the tensor is CTF sparse tensor.\n\n    strides: tuple\n        Tuple of bytes for each dimension to traverse the tensor.\n\n    shape: tuple\n        Tuple of each dimension.\n\n    dtype: data-type\n        Numpy data-type, indicating the type of tensor.\n\n    itemsize: int\n        One element in bytes.\n\n    order: {'F','C'}\n        Bytes memory order for the tensor.\n\n    sym: ndarray\n        Symmetry description of the tensor,\n        sym[i] describes symmetry relation SY/AS/SH of mode i to mode i+1\n        NS (0) is nonsymmetric, SY (1) is symmetric, AS (2) is antisymmetric,\n        SH (3) is symmetric with zero diagonal\n        \n\n    Methods\n    -------\n\n    T:\n        Transpose of tensor.\n\n    all:\n        Whether all elements give an axis for a tensor is true.\n\n    astype:\n        Copy the tensor to specified type.\n\n    conj:\n        Return the self ctf.tensor_aux.conjugate tensor element-wisely.\n\n    copy:\n        Copy the tensor to a new tensor.\n\n    diagonal:\n        Return the diagonal of the tensor if it is 2D. If the tensor is a higher order square tensor (same shape for every dimension), return diagonal of tensor determined by axis1=0, axis2=1.\n\n    dot:\n        Return the dot product with tensor other.\n\n    fill_random:\n        Fill random elements to the tensor.\n\n    fill_sp_random:\n        Fill random elements to a sparse tensor.\n\n    from_nparray:\n        Convert numpy ndarray to CTF tensor.\n\n    get_dims:\n        Return the dims/shape of tensor.\n\n    get_type:\n        Return the dtype of tensor.\n\n    i:\n        Core function on summing the ctensor.\n\n    imag:\n        Retu""rn imaginary part of a tensor or set its imaginary part to new value.\n\n    norm1:\n        1-norm of the tensor.\n\n    norm2:\n        2-norm of the tensor.\n\n    norm_infty:\n        Infinity-norm of the tensor.\n\n    permute:\n        Permute the tensor.\n\n    prnt:\n        Function to print the non-zero elements and their indices of a tensor.\n\n    ravel:\n        Return the flattened tensor.\n\n    read:\n        Helper function on reading a tensor.\n\n    read_all:\n        Helper function on reading a tensor.\n\n    read_local:\n        Helper function on reading a tensor.\n\n    read_local_nnz:\n        Helper function on reading a tensor.\n\n    real:\n        Return real part of a tensor or set its real part to new value.\n\n    reshape:\n        Return a new tensor with reshaped shape.\n\n    sample:\n        Extract a sample of the entries (if sparse of the current nonzeros) by keeping each entry with probability p. Also transforms tensor into sparse format if not already.\n\n    set_all:\n        Set all elements in a tensor to a value.\n\n    set_zero:\n        Set all elements in a tensor to 0.\n\n    sum:\n        Sum of elements in tensor or along specified axis.\n\n    take:\n        Take elements from a tensor along axis.\n\n    tensordot:\n        Return the tensor dot product of two tensors along axes.\n\n    to_nparray:\n        Convert the tensor to numpy array.\n\n    trace:\n        Return the sum over the diagonal of the tensor.\n\n    transpose:\n        Return the transposed tensor with specified order of axes.\n\n    write:\n        Helper function for writing data to tensor.\n\n    __write_all:\n        Function for writing all tensor data when using one processor.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_3ctf_6tensor_tensor},
  {Py_tp_clear, (void *)__pyx_tp_clear_3ctf_6tensor_tensor},
  {Py_tp_richcompare, (void *)__pyx_pw_3ctf_6tensor_6tensor_151__richcmp__},
  {Py_tp_methods, (void *)__pyx_methods_3ctf_6tensor_tensor},
  {Py_tp_getset, (void *)__pyx_getsets_3ctf_6tensor_tensor},
  {Py_tp_new, (void *)__pyx_tp_new_3ctf_6tensor_tensor},
  {0, 0},
};
static PyType_Spec __pyx_type_3ctf_6tensor_tensor_spec = {
  "ctf.tensor.tensor",
  sizeof(struct __pyx_obj_3ctf_6tensor_tensor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_3ctf_6tensor_tensor_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_tensor = {
  __pyx_nb_add_3ctf_6tensor_tensor, /*nb_add*/
  __pyx_nb_subtract_3ctf_6tensor_tensor, /*nb_subtract*/
  __pyx_nb_multiply_3ctf_6tensor_tensor, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  __pyx_nb_divide_3ctf_6tensor_tensor, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_nb_power_3ctf_6tensor_tensor, /*nb_power*/
  __pyx_pw_3ctf_6tensor_6tensor_29__neg__, /*nb_negative*/
  0, /*nb_positive*/
  __pyx_pw_3ctf_6tensor_6tensor_21__abs__, /*nb_absolute*/
  __pyx_pw_3ctf_6tensor_6tensor_23__nonzero__, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  __pyx_pw_3ctf_6tensor_6tensor_25__int__, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_3ctf_6tensor_6tensor_25__int__, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_3ctf_6tensor_6tensor_27__float__, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  __pyx_pw_3ctf_6tensor_6tensor_33__iadd__, /*nb_inplace_add*/
  __pyx_pw_3ctf_6tensor_6tensor_41__isub__, /*nb_inplace_subtract*/
  __pyx_pw_3ctf_6tensor_6tensor_37__imul__, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  __pyx_pw_3ctf_6tensor_6tensor_49__idiv__, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_nb_true_divide_3ctf_6tensor_tensor, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  __pyx_pw_3ctf_6tensor_6tensor_45__itruediv__, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_nb_matrix_multiply_3ctf_6tensor_tensor, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_tensor = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_3ctf_6tensor_tensor, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_tensor = {
  0, /*mp_length*/
  __pyx_pw_3ctf_6tensor_6tensor_119__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_3ctf_6tensor_tensor, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_3ctf_6tensor_tensor = {
  PyVarObject_HEAD_INIT(0, 0)
  "ctf.tensor.""tensor", /*tp_name*/
  sizeof(struct __pyx_obj_3ctf_6tensor_tensor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ctf_6tensor_tensor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_3ctf_6tensor_6tensor_145__repr__, /*tp_repr*/
  &__pyx_tp_as_number_tensor, /*tp_as_number*/
  &__pyx_tp_as_sequence_tensor, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_tensor, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    The class for CTF Python tensor.\n\n    Attributes\n    ----------\n    nbytes: int\n        The number of bytes for the tensor.\n\n    size: int\n        Total number of elements in the tensor.\n\n    ndim: int\n        Number of dimensions.\n\n    sp: int\n        0 indicates the tensor is not sparse tensor, 1 means the tensor is CTF sparse tensor.\n\n    strides: tuple\n        Tuple of bytes for each dimension to traverse the tensor.\n\n    shape: tuple\n        Tuple of each dimension.\n\n    dtype: data-type\n        Numpy data-type, indicating the type of tensor.\n\n    itemsize: int\n        One element in bytes.\n\n    order: {'F','C'}\n        Bytes memory order for the tensor.\n\n    sym: ndarray\n        Symmetry description of the tensor,\n        sym[i] describes symmetry relation SY/AS/SH of mode i to mode i+1\n        NS (0) is nonsymmetric, SY (1) is symmetric, AS (2) is antisymmetric,\n        SH (3) is symmetric with zero diagonal\n        \n\n    Methods\n    -------\n\n    T:\n        Transpose of tensor.\n\n    all:\n        Whether all elements give an axis for a tensor is true.\n\n    astype:\n        Copy the tensor to specified type.\n\n    conj:\n        Return the self ctf.tensor_aux.conjugate tensor element-wisely.\n\n    copy:\n        Copy the tensor to a new tensor.\n\n    diagonal:\n        Return the diagonal of the tensor if it is 2D. If the tensor is a higher order square tensor (same shape for every dimension), return diagonal of tensor determined by axis1=0, axis2=1.\n\n    dot:\n        Return the dot product with tensor other.\n\n    fill_random:\n        Fill random elements to the tensor.\n\n    fill_sp_random:\n        Fill random elements to a sparse tensor.\n\n    from_nparray:\n        Convert numpy ndarray to CTF tensor.\n\n    get_dims:\n        Return the dims/shape of tensor.\n\n    get_type:\n        Return the dtype of tensor.\n\n    i:\n        Core function on summing the ctensor.\n\n    imag:\n        Retu""rn imaginary part of a tensor or set its imaginary part to new value.\n\n    norm1:\n        1-norm of the tensor.\n\n    norm2:\n        2-norm of the tensor.\n\n    norm_infty:\n        Infinity-norm of the tensor.\n\n    permute:\n        Permute the tensor.\n\n    prnt:\n        Function to print the non-zero elements and their indices of a tensor.\n\n    ravel:\n        Return the flattened tensor.\n\n    read:\n        Helper function on reading a tensor.\n\n    read_all:\n        Helper function on reading a tensor.\n\n    read_local:\n        Helper function on reading a tensor.\n\n    read_local_nnz:\n        Helper function on reading a tensor.\n\n    real:\n        Return real part of a tensor or set its real part to new value.\n\n    reshape:\n        Return a new tensor with reshaped shape.\n\n    sample:\n        Extract a sample of the entries (if sparse of the current nonzeros) by keeping each entry with probability p. Also transforms tensor into sparse format if not already.\n\n    set_all:\n        Set all elements in a tensor to a value.\n\n    set_zero:\n        Set all elements in a tensor to 0.\n\n    sum:\n        Sum of elements in tensor or along specified axis.\n\n    take:\n        Take elements from a tensor along axis.\n\n    tensordot:\n        Return the tensor dot product of two tensors along axes.\n\n    to_nparray:\n        Convert the tensor to numpy array.\n\n    trace:\n        Return the sum over the diagonal of the tensor.\n\n    transpose:\n        Return the transposed tensor with specified order of axes.\n\n    write:\n        Helper function for writing data to tensor.\n\n    __write_all:\n        Function for writing all tensor data when using one processor.\n    "), /*tp_doc*/
  __pyx_tp_traverse_3ctf_6tensor_tensor, /*tp_traverse*/
  __pyx_tp_clear_3ctf_6tensor_tensor, /*tp_clear*/
  __pyx_pw_3ctf_6tensor_6tensor_151__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ctf_6tensor_tensor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3ctf_6tensor_tensor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ctf_6tensor_tensor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
    {&__pyx_n_s_AS, __pyx_k_AS, sizeof(__pyx_k_AS), 0, 0, 1, 1},
    {&__pyx_n_s_A_ends, __pyx_k_A_ends, sizeof(__pyx_k_A_ends), 0, 0, 1, 1},
    {&__pyx_n_s_A_offsets, __pyx_k_A_offsets, sizeof(__pyx_k_A_offsets), 0, 0, 1, 1},
    {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
    {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
    {&__pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no, __pyx_k_CTF_ERROR_cannot_call_imag_on_no, sizeof(__pyx_k_CTF_ERROR_cannot_call_imag_on_no), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_ERROR_cannot_call_imag_with, __pyx_k_CTF_ERROR_cannot_call_imag_with, sizeof(__pyx_k_CTF_ERROR_cannot_call_imag_with), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value, __pyx_k_CTF_PYTHON_ERROR_The_truth_value, sizeof(__pyx_k_CTF_PYTHON_ERROR_The_truth_value), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype, __pyx_k_CTF_PYTHON_ERROR_bad_dtype, sizeof(__pyx_k_CTF_PYTHON_ERROR_bad_dtype), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va, __pyx_k_CTF_PYTHON_ERROR_bad_dtype_of_va, sizeof(__pyx_k_CTF_PYTHON_ERROR_bad_dtype_of_va), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif, __pyx_k_CTF_PYTHON_ERROR_can_only_specif, sizeof(__pyx_k_CTF_PYTHON_ERROR_can_only_specif), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a, __pyx_k_CTF_PYTHON_ERROR_cannot___read_a, sizeof(__pyx_k_CTF_PYTHON_ERROR_cannot___read_a), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_cannot___write, __pyx_k_CTF_PYTHON_ERROR_cannot___write, sizeof(__pyx_k_CTF_PYTHON_ERROR_cannot___write), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt, __pyx_k_CTF_PYTHON_ERROR_current_CTF_Pyt, sizeof(__pyx_k_CTF_PYTHON_ERROR_current_CTF_Pyt), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2, __pyx_k_CTF_PYTHON_ERROR_current_CTF_Pyt_2, sizeof(__pyx_k_CTF_PYTHON_ERROR_current_CTF_Pyt_2), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to, __pyx_k_CTF_PYTHON_ERROR_invalid_call_to, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_call_to), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2, __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_2, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_call_to_2), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3, __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_3, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_call_to_3), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4, __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_4, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_call_to_4), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5, __pyx_k_CTF_PYTHON_ERROR_invalid_call_to_5, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_call_to_5), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_output, __pyx_k_CTF_PYTHON_ERROR_invalid_output, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_output), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a, __pyx_k_CTF_PYTHON_ERROR_invalid_shape_a, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_shape_a), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i, __pyx_k_CTF_PYTHON_ERROR_invalid_shape_i, sizeof(__pyx_k_CTF_PYTHON_ERROR_invalid_shape_i), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen, __pyx_k_CTF_PYTHON_ERROR_norm_not_presen, sizeof(__pyx_k_CTF_PYTHON_ERROR_norm_not_presen), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t, __pyx_k_CTF_PYTHON_ERROR_only_length_1_t, sizeof(__pyx_k_CTF_PYTHON_ERROR_only_length_1_t), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_output_must_be, __pyx_k_CTF_PYTHON_ERROR_output_must_be, sizeof(__pyx_k_CTF_PYTHON_ERROR_output_must_be), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat, __pyx_k_CTF_PYTHON_ERROR_output_must_mat, sizeof(__pyx_k_CTF_PYTHON_ERROR_output_must_mat), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete, __pyx_k_CTF_PYTHON_ERROR_output_paramete, sizeof(__pyx_k_CTF_PYTHON_ERROR_output_paramete), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2, __pyx_k_CTF_PYTHON_ERROR_output_paramete_2, sizeof(__pyx_k_CTF_PYTHON_ERROR_output_paramete_2), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot, __pyx_k_CTF_PYTHON_ERROR_permute_cannot, sizeof(__pyx_k_CTF_PYTHON_ERROR_permute_cannot), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be, __pyx_k_CTF_PYTHON_ERROR_permute_must_be, sizeof(__pyx_k_CTF_PYTHON_ERROR_permute_must_be), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_powering_functi, __pyx_k_CTF_PYTHON_ERROR_powering_functi, sizeof(__pyx_k_CTF_PYTHON_ERROR_powering_functi), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow, __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow, sizeof(__pyx_k_CTF_PYTHON_ERROR_refusing_to_dow), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2, __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_2, sizeof(__pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_2), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3, __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_3, sizeof(__pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_3), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4, __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_4, sizeof(__pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_4), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5, __pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_5, sizeof(__pyx_k_CTF_PYTHON_ERROR_refusing_to_dow_5), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n, __pyx_k_CTF_PYTHON_ERROR_total_size_of_n, sizeof(__pyx_k_CTF_PYTHON_ERROR_total_size_of_n), 0, 0, 1, 0},
    {&__pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo, __pyx_k_CTF_PYTHON_ERROR_unable_to_perfo, sizeof(__pyx_k_CTF_PYTHON_ERROR_unable_to_perfo), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_cast_array_from_dtype_0_t, __pyx_k_Cannot_cast_array_from_dtype_0_t, sizeof(__pyx_k_Cannot_cast_array_from_dtype_0_t), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_2, __pyx_k_Cannot_cast_array_from_dtype_0_t_2, sizeof(__pyx_k_Cannot_cast_array_from_dtype_0_t_2), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_cast_array_from_dtype_0_t_3, __pyx_k_Cannot_cast_array_from_dtype_0_t_3, sizeof(__pyx_k_Cannot_cast_array_from_dtype_0_t_3), 0, 0, 1, 0},
    {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
    {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
    {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_s_Invalid_use_of_universal_functio, __pyx_k_Invalid_use_of_universal_functio, sizeof(__pyx_k_Invalid_use_of_universal_functio), 0, 0, 1, 0},
    {&__pyx_n_s_NS, __pyx_k_NS, sizeof(__pyx_k_NS), 0, 0, 1, 1},
    {&__pyx_n_s_SH, __pyx_k_SH, sizeof(__pyx_k_SH), 0, 0, 1, 1},
    {&__pyx_n_s_SY, __pyx_k_SY, sizeof(__pyx_k_SY), 0, 0, 1, 1},
    {&__pyx_n_s_SYM, __pyx_k_SYM, sizeof(__pyx_k_SYM), 0, 0, 1, 1},
    {&__pyx_kp_s_Specify_mesh_processor_toplogy_w, __pyx_k_Specify_mesh_processor_toplogy_w, sizeof(__pyx_k_Specify_mesh_processor_toplogy_w), 0, 0, 1, 0},
    {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_s_Universal_functions_among_tensor, __pyx_k_Universal_functions_among_tensor, sizeof(__pyx_k_Universal_functions_among_tensor), 0, 0, 1, 0},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s__173, __pyx_k__173, sizeof(__pyx_k__173), 0, 0, 1, 1},
    {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
    {&__pyx_n_s__55, __pyx_k__55, sizeof(__pyx_k__55), 0, 0, 1, 1},
    {&__pyx_kp_u__56, __pyx_k__56, sizeof(__pyx_k__56), 0, 1, 0, 0},
    {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
    {&__pyx_n_s_align, __pyx_k_align, sizeof(__pyx_k_align), 0, 0, 1, 1},
    {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
    {&__pyx_kp_u_all_axis_None_out_None_keepdims, __pyx_k_all_axis_None_out_None_keepdims, sizeof(__pyx_k_all_axis_None_out_None_keepdims), 0, 1, 0, 0},
    {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
    {&__pyx_kp_s_an_integer_is_required, __pyx_k_an_integer_is_required, sizeof(__pyx_k_an_integer_is_required), 0, 0, 1, 0},
    {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
    {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
    {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
    {&__pyx_n_s_arr_in, __pyx_k_arr_in, sizeof(__pyx_k_arr_in), 0, 0, 1, 1},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
    {&__pyx_n_s_astensor, __pyx_k_astensor, sizeof(__pyx_k_astensor), 0, 0, 1, 1},
    {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
    {&__pyx_kp_u_astype_dtype_order_F_casting_un, __pyx_k_astype_dtype_order_F_casting_un, sizeof(__pyx_k_astype_dtype_order_F_casting_un), 0, 1, 0, 0},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_axes, __pyx_k_axes, sizeof(__pyx_k_axes), 0, 0, 1, 1},
    {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
    {&__pyx_n_s_axis1, __pyx_k_axis1, sizeof(__pyx_k_axis1), 0, 0, 1, 1},
    {&__pyx_n_s_axis2, __pyx_k_axis2, sizeof(__pyx_k_axis2), 0, 0, 1, 1},
    {&__pyx_kp_s_axis_entry_is_out_of_bounds, __pyx_k_axis_entry_is_out_of_bounds, sizeof(__pyx_k_axis_entry_is_out_of_bounds), 0, 0, 1, 0},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
    {&__pyx_n_s_blk, __pyx_k_blk, sizeof(__pyx_k_blk), 0, 0, 1, 1},
    {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
    {&__pyx_n_s_bool_sum, __pyx_k_bool_sum, sizeof(__pyx_k_bool_sum), 0, 0, 1, 1},
    {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_s_ca, __pyx_k_ca, sizeof(__pyx_k_ca), 0, 0, 1, 1},
    {&__pyx_n_s_caends, __pyx_k_caends, sizeof(__pyx_k_caends), 0, 0, 1, 1},
    {&__pyx_kp_s_can_not_reshape_into_this_size, __pyx_k_can_not_reshape_into_this_size, sizeof(__pyx_k_can_not_reshape_into_this_size), 0, 0, 1, 0},
    {&__pyx_n_s_caoffs, __pyx_k_caoffs, sizeof(__pyx_k_caoffs), 0, 0, 1, 1},
    {&__pyx_n_s_cast, __pyx_k_cast, sizeof(__pyx_k_cast), 0, 0, 1, 1},
    {&__pyx_n_s_casting, __pyx_k_casting, sizeof(__pyx_k_casting), 0, 0, 1, 1},
    {&__pyx_kp_s_casting_must_be_one_of_no_equiv, __pyx_k_casting_must_be_one_of_no_equiv, sizeof(__pyx_k_casting_must_be_one_of_no_equiv), 0, 0, 1, 0},
    {&__pyx_n_s_cdata, __pyx_k_cdata, sizeof(__pyx_k_cdata), 0, 0, 1, 1},
    {&__pyx_n_s_cends, __pyx_k_cends, sizeof(__pyx_k_cends), 0, 0, 1, 1},
    {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
    {&__pyx_n_s_cinds, __pyx_k_cinds, sizeof(__pyx_k_cinds), 0, 0, 1, 1},
    {&__pyx_n_s_cinit, __pyx_k_cinit, sizeof(__pyx_k_cinit), 0, 0, 1, 1},
    {&__pyx_kp_s_class_bool, __pyx_k_class_bool, sizeof(__pyx_k_class_bool), 0, 0, 1, 0},
    {&__pyx_kp_s_class_complex, __pyx_k_class_complex, sizeof(__pyx_k_class_complex), 0, 0, 1, 0},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_clens, __pyx_k_clens, sizeof(__pyx_k_clens), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_coffs, __pyx_k_coffs, sizeof(__pyx_k_coffs), 0, 0, 1, 1},
    {&__pyx_n_s_comm, __pyx_k_comm, sizeof(__pyx_k_comm), 0, 0, 1, 1},
    {&__pyx_n_s_compare_tensors, __pyx_k_compare_tensors, sizeof(__pyx_k_compare_tensors), 0, 0, 1, 1},
    {&__pyx_n_s_complex, __pyx_k_complex, sizeof(__pyx_k_complex), 0, 0, 1, 1},
    {&__pyx_n_s_complex128, __pyx_k_complex128, sizeof(__pyx_k_complex128), 0, 0, 1, 1},
    {&__pyx_n_s_complex64, __pyx_k_complex64, sizeof(__pyx_k_complex64), 0, 0, 1, 1},
    {&__pyx_n_s_conj, __pyx_k_conj, sizeof(__pyx_k_conj), 0, 0, 1, 1},
    {&__pyx_kp_u_conj_Return_the_self_conjugate, __pyx_k_conj_Return_the_self_conjugate, sizeof(__pyx_k_conj_Return_the_self_conjugate), 0, 1, 0, 0},
    {&__pyx_n_s_convert_type, __pyx_k_convert_type, sizeof(__pyx_k_convert_type), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_kp_u_copy_Copy_the_tensor_to_a_new_t, __pyx_k_copy_Copy_the_tensor_to_a_new_t, sizeof(__pyx_k_copy_Copy_the_tensor_to_a_new_t), 0, 1, 0, 0},
    {&__pyx_n_s_count_nonzero, __pyx_k_count_nonzero, sizeof(__pyx_k_count_nonzero), 0, 0, 1, 1},
    {&__pyx_n_s_ctf, __pyx_k_ctf, sizeof(__pyx_k_ctf), 0, 0, 1, 1},
    {&__pyx_n_s_ctf_helper, __pyx_k_ctf_helper, sizeof(__pyx_k_ctf_helper), 0, 0, 1, 1},
    {&__pyx_n_s_ctf_partition, __pyx_k_ctf_partition, sizeof(__pyx_k_ctf_partition), 0, 0, 1, 1},
    {&__pyx_n_s_ctf_profile, __pyx_k_ctf_profile, sizeof(__pyx_k_ctf_profile), 0, 0, 1, 1},
    {&__pyx_n_s_ctf_tensor, __pyx_k_ctf_tensor, sizeof(__pyx_k_ctf_tensor), 0, 0, 1, 1},
    {&__pyx_n_s_ctf_tensor_aux, __pyx_k_ctf_tensor_aux, sizeof(__pyx_k_ctf_tensor_aux), 0, 0, 1, 1},
    {&__pyx_kp_s_ctf_tensor_pyx, __pyx_k_ctf_tensor_pyx, sizeof(__pyx_k_ctf_tensor_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_ctf_world, __pyx_k_ctf_world, sizeof(__pyx_k_ctf_world), 0, 0, 1, 1},
    {&__pyx_n_s_cvals, __pyx_k_cvals, sizeof(__pyx_k_cvals), 0, 0, 1, 1},
    {&__pyx_n_s_czeros, __pyx_k_czeros, sizeof(__pyx_k_czeros), 0, 0, 1, 1},
    {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
    {&__pyx_n_s_deepcopy, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
    {&__pyx_n_s_deepcopy_2, __pyx_k_deepcopy_2, sizeof(__pyx_k_deepcopy_2), 0, 0, 1, 1},
    {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
    {&__pyx_n_s_diagonal, __pyx_k_diagonal, sizeof(__pyx_k_diagonal), 0, 0, 1, 1},
    {&__pyx_kp_u_diagonal_offset_0_axis1_0_axis2, __pyx_k_diagonal_offset_0_axis1_0_axis2, sizeof(__pyx_k_diagonal_offset_0_axis1_0_axis2), 0, 1, 0, 0},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
    {&__pyx_n_s_dim_keep, __pyx_k_dim_keep, sizeof(__pyx_k_dim_keep), 0, 0, 1, 1},
    {&__pyx_n_s_dim_ret, __pyx_k_dim_ret, sizeof(__pyx_k_dim_ret), 0, 0, 1, 1},
    {&__pyx_n_s_dims_keep, __pyx_k_dims_keep, sizeof(__pyx_k_dims_keep), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_div, __pyx_k_div, sizeof(__pyx_k_div), 0, 0, 1, 1},
    {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
    {&__pyx_kp_u_dot_other_out_None_Return_the_d, __pyx_k_dot_other_out_None_Return_the_d, sizeof(__pyx_k_dot_other_out_None_Return_the_d), 0, 1, 0, 0},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_kp_s_duplicate_value_in_axis, __pyx_k_duplicate_value_in_axis, sizeof(__pyx_k_duplicate_value_in_axis), 0, 0, 1, 0},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_ends, __pyx_k_ends, sizeof(__pyx_k_ends), 0, 0, 1, 1},
    {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
    {&__pyx_n_s_enums, __pyx_k_enums, sizeof(__pyx_k_enums), 0, 0, 1, 1},
    {&__pyx_n_s_equiv, __pyx_k_equiv, sizeof(__pyx_k_equiv), 0, 0, 1, 1},
    {&__pyx_n_s_exp_python, __pyx_k_exp_python, sizeof(__pyx_k_exp_python), 0, 0, 1, 1},
    {&__pyx_kp_s_exponentiation_not_supported_for, __pyx_k_exponentiation_not_supported_for, sizeof(__pyx_k_exponentiation_not_supported_for), 0, 0, 1, 0},
    {&__pyx_n_s_fill_random, __pyx_k_fill_random, sizeof(__pyx_k_fill_random), 0, 0, 1, 1},
    {&__pyx_n_s_fill_sp_random, __pyx_k_fill_sp_random, sizeof(__pyx_k_fill_sp_random), 0, 0, 1, 1},
    {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
    {&__pyx_n_s_float128, __pyx_k_float128, sizeof(__pyx_k_float128), 0, 0, 1, 1},
    {&__pyx_n_s_float16, __pyx_k_float16, sizeof(__pyx_k_float16), 0, 0, 1, 1},
    {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
    {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_frac_sp, __pyx_k_frac_sp, sizeof(__pyx_k_frac_sp), 0, 0, 1, 1},
    {&__pyx_n_s_from_nparray, __pyx_k_from_nparray, sizeof(__pyx_k_from_nparray), 0, 0, 1, 1},
    {&__pyx_kp_u_from_nparray_arr_Convert_numpy, __pyx_k_from_nparray_arr_Convert_numpy, sizeof(__pyx_k_from_nparray_arr_Convert_numpy), 0, 1, 0, 0},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_gen_tsr, __pyx_k_gen_tsr, sizeof(__pyx_k_gen_tsr), 0, 0, 1, 1},
    {&__pyx_n_s_get_dims, __pyx_k_get_dims, sizeof(__pyx_k_get_dims), 0, 0, 1, 1},
    {&__pyx_n_s_get_distribution, __pyx_k_get_distribution, sizeof(__pyx_k_get_distribution), 0, 0, 1, 1},
    {&__pyx_n_s_get_np_dtype, __pyx_k_get_np_dtype, sizeof(__pyx_k_get_np_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_get_num_str, __pyx_k_get_num_str, sizeof(__pyx_k_get_num_str), 0, 0, 1, 1},
    {&__pyx_n_s_get_slice, __pyx_k_get_slice, sizeof(__pyx_k_get_slice), 0, 0, 1, 1},
    {&__pyx_n_s_get_type, __pyx_k_get_type, sizeof(__pyx_k_get_type), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_gvals, __pyx_k_gvals, sizeof(__pyx_k_gvals), 0, 0, 1, 1},
    {&__pyx_n_s_helper, __pyx_k_helper, sizeof(__pyx_k_helper), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_i8, __pyx_k_i8, sizeof(__pyx_k_i8), 0, 0, 1, 1},
    {&__pyx_kp_u_i_string_Core_function_on_summi, __pyx_k_i_string_Core_function_on_summi, sizeof(__pyx_k_i_string_Core_function_on_summi), 0, 1, 0, 0},
    {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
    {&__pyx_n_s_idx_2, __pyx_k_idx_2, sizeof(__pyx_k_idx_2), 0, 0, 1, 1},
    {&__pyx_n_s_idx_A, __pyx_k_idx_A, sizeof(__pyx_k_idx_A), 0, 0, 1, 1},
    {&__pyx_n_s_idx_B, __pyx_k_idx_B, sizeof(__pyx_k_idx_B), 0, 0, 1, 1},
    {&__pyx_n_s_idx_C, __pyx_k_idx_C, sizeof(__pyx_k_idx_C), 0, 0, 1, 1},
    {&__pyx_n_s_iinds, __pyx_k_iinds, sizeof(__pyx_k_iinds), 0, 0, 1, 1},
    {&__pyx_n_s_imag, __pyx_k_imag, sizeof(__pyx_k_imag), 0, 0, 1, 1},
    {&__pyx_kp_u_imag_value_None_Return_imaginar, __pyx_k_imag_value_None_Return_imaginar, sizeof(__pyx_k_imag_value_None_Return_imaginar), 0, 1, 0, 0},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_ind_coll, __pyx_k_ind_coll, sizeof(__pyx_k_ind_coll), 0, 0, 1, 1},
    {&__pyx_n_s_index_A, __pyx_k_index_A, sizeof(__pyx_k_index_A), 0, 0, 1, 1},
    {&__pyx_n_s_index_B, __pyx_k_index_B, sizeof(__pyx_k_index_B), 0, 0, 1, 1},
    {&__pyx_n_s_index_temp, __pyx_k_index_temp, sizeof(__pyx_k_index_temp), 0, 0, 1, 1},
    {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
    {&__pyx_n_s_inds, __pyx_k_inds, sizeof(__pyx_k_inds), 0, 0, 1, 1},
    {&__pyx_n_s_init_A, __pyx_k_init_A, sizeof(__pyx_k_init_A), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_kp_s_input_should_be_tensors, __pyx_k_input_should_be_tensors, sizeof(__pyx_k_input_should_be_tensors), 0, 0, 1, 0},
    {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
    {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
    {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
    {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
    {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
    {&__pyx_n_s_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 0, 0, 1, 1},
    {&__pyx_n_s_invert_elements, __pyx_k_invert_elements, sizeof(__pyx_k_invert_elements), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
    {&__pyx_kp_s_item_must_be_called_on_array_of, __pyx_k_item_must_be_called_on_array_of, sizeof(__pyx_k_item_must_be_called_on_array_of), 0, 0, 1, 0},
    {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
    {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
    {&__pyx_n_s_keepdims, __pyx_k_keepdims, sizeof(__pyx_k_keepdims), 0, 0, 1, 1},
    {&__pyx_n_s_lens, __pyx_k_lens, sizeof(__pyx_k_lens), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_match_tensor_types, __pyx_k_match_tensor_types, sizeof(__pyx_k_match_tensor_types), 0, 0, 1, 1},
    {&__pyx_n_s_maximum, __pyx_k_maximum, sizeof(__pyx_k_maximum), 0, 0, 1, 1},
    {&__pyx_n_s_memo, __pyx_k_memo, sizeof(__pyx_k_memo), 0, 0, 1, 1},
    {&__pyx_n_s_mn, __pyx_k_mn, sizeof(__pyx_k_mn), 0, 0, 1, 1},
    {&__pyx_n_s_mod, __pyx_k_mod, sizeof(__pyx_k_mod), 0, 0, 1, 1},
    {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
    {&__pyx_n_s_mx, __pyx_k_mx, sizeof(__pyx_k_mx), 0, 0, 1, 1},
    {&__pyx_n_s_mystr, __pyx_k_mystr, sizeof(__pyx_k_mystr), 0, 0, 1, 1},
    {&__pyx_n_s_mystrides, __pyx_k_mystrides, sizeof(__pyx_k_mystrides), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_na, __pyx_k_na, sizeof(__pyx_k_na), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_nb, __pyx_k_nb, sizeof(__pyx_k_nb), 0, 0, 1, 1},
    {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
    {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
    {&__pyx_n_s_nega, __pyx_k_nega, sizeof(__pyx_k_nega), 0, 0, 1, 1},
    {&__pyx_n_s_nega_size, __pyx_k_nega_size, sizeof(__pyx_k_nega_size), 0, 0, 1, 1},
    {&__pyx_n_s_new_shape, __pyx_k_new_shape, sizeof(__pyx_k_new_shape), 0, 0, 1, 1},
    {&__pyx_n_s_new_size, __pyx_k_new_size, sizeof(__pyx_k_new_size), 0, 0, 1, 1},
    {&__pyx_n_s_newshape, __pyx_k_newshape, sizeof(__pyx_k_newshape), 0, 0, 1, 1},
    {&__pyx_n_s_no, __pyx_k_no, sizeof(__pyx_k_no), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_norm1, __pyx_k_norm1, sizeof(__pyx_k_norm1), 0, 0, 1, 1},
    {&__pyx_kp_u_norm1_1_norm_of_the_tensor_Retu, __pyx_k_norm1_1_norm_of_the_tensor_Retu, sizeof(__pyx_k_norm1_1_norm_of_the_tensor_Retu), 0, 1, 0, 0},
    {&__pyx_n_s_norm2, __pyx_k_norm2, sizeof(__pyx_k_norm2), 0, 0, 1, 1},
    {&__pyx_kp_u_norm2_2_norm_of_the_tensor_Retu, __pyx_k_norm2_2_norm_of_the_tensor_Retu, sizeof(__pyx_k_norm2_2_norm_of_the_tensor_Retu), 0, 1, 0, 0},
    {&__pyx_n_s_norm_infty, __pyx_k_norm_infty, sizeof(__pyx_k_norm_infty), 0, 0, 1, 1},
    {&__pyx_kp_u_norm_infty_Infinity_norm_of_the, __pyx_k_norm_infty_Infinity_norm_of_the, sizeof(__pyx_k_norm_infty_Infinity_norm_of_the), 0, 1, 0, 0},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
    {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
    {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
    {&__pyx_n_s_offsets, __pyx_k_offsets, sizeof(__pyx_k_offsets), 0, 0, 1, 1},
    {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
    {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
    {&__pyx_n_s_ord_comp, __pyx_k_ord_comp, sizeof(__pyx_k_ord_comp), 0, 0, 1, 1},
    {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
    {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
    {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
    {&__pyx_n_s_out_dims, __pyx_k_out_dims, sizeof(__pyx_k_out_dims), 0, 0, 1, 1},
    {&__pyx_n_s_out_dtype, __pyx_k_out_dtype, sizeof(__pyx_k_out_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_out_order, __pyx_k_out_order, sizeof(__pyx_k_out_order), 0, 0, 1, 1},
    {&__pyx_n_s_out_sp, __pyx_k_out_sp, sizeof(__pyx_k_out_sp), 0, 0, 1, 1},
    {&__pyx_n_s_out_sym, __pyx_k_out_sym, sizeof(__pyx_k_out_sym), 0, 0, 1, 1},
    {&__pyx_n_s_out_tsr, __pyx_k_out_tsr, sizeof(__pyx_k_out_tsr), 0, 0, 1, 1},
    {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
    {&__pyx_n_s_p_A, __pyx_k_p_A, sizeof(__pyx_k_p_A), 0, 0, 1, 1},
    {&__pyx_n_s_p_B, __pyx_k_p_B, sizeof(__pyx_k_p_B), 0, 0, 1, 1},
    {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
    {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_n_s_permutation_A, __pyx_k_permutation_A, sizeof(__pyx_k_permutation_A), 0, 0, 1, 1},
    {&__pyx_n_s_permutation_B, __pyx_k_permutation_B, sizeof(__pyx_k_permutation_B), 0, 0, 1, 1},
    {&__pyx_n_s_permute, __pyx_k_permute, sizeof(__pyx_k_permute), 0, 0, 1, 1},
    {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
    {&__pyx_n_s_power, __pyx_k_power, sizeof(__pyx_k_power), 0, 0, 1, 1},
    {&__pyx_n_s_prl, __pyx_k_prl, sizeof(__pyx_k_prl), 0, 0, 1, 1},
    {&__pyx_n_s_prnt, __pyx_k_prnt, sizeof(__pyx_k_prnt), 0, 0, 1, 1},
    {&__pyx_kp_u_prnt_Function_to_print_the_non, __pyx_k_prnt_Function_to_print_the_non, sizeof(__pyx_k_prnt_Function_to_print_the_non), 0, 1, 0, 0},
    {&__pyx_n_s_profile, __pyx_k_profile, sizeof(__pyx_k_profile), 0, 0, 1, 1},
    {&__pyx_n_s_put, __pyx_k_put, sizeof(__pyx_k_put), 0, 0, 1, 1},
    {&__pyx_n_s_pyreshape, __pyx_k_pyreshape, sizeof(__pyx_k_pyreshape), 0, 0, 1, 1},
    {&__pyx_n_s_pytensor_init, __pyx_k_pytensor_init, sizeof(__pyx_k_pytensor_init), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_raise, __pyx_k_raise, sizeof(__pyx_k_raise), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_rank, __pyx_k_rank, sizeof(__pyx_k_rank), 0, 0, 1, 1},
    {&__pyx_n_s_rarr, __pyx_k_rarr, sizeof(__pyx_k_rarr), 0, 0, 1, 1},
    {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
    {&__pyx_kp_u_ravel_order_F_Return_the_flatte, __pyx_k_ravel_order_F_Return_the_flatte, sizeof(__pyx_k_ravel_order_F_Return_the_flatte), 0, 1, 0, 0},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_read_all, __pyx_k_read_all, sizeof(__pyx_k_read_all), 0, 0, 1, 1},
    {&__pyx_n_s_read_all_2, __pyx_k_read_all_2, sizeof(__pyx_k_read_all_2), 0, 0, 1, 1},
    {&__pyx_n_s_read_all_nnz, __pyx_k_read_all_nnz, sizeof(__pyx_k_read_all_nnz), 0, 0, 1, 1},
    {&__pyx_n_s_read_from_file, __pyx_k_read_from_file, sizeof(__pyx_k_read_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_read_local, __pyx_k_read_local, sizeof(__pyx_k_read_local), 0, 0, 1, 1},
    {&__pyx_n_s_read_local_nnz, __pyx_k_read_local_nnz, sizeof(__pyx_k_read_local_nnz), 0, 0, 1, 1},
    {&__pyx_n_s_real, __pyx_k_real, sizeof(__pyx_k_real), 0, 0, 1, 1},
    {&__pyx_kp_u_real_value_None_Return_real_par, __pyx_k_real_value_None_Return_real_par, sizeof(__pyx_k_real_value_None_Return_real_par), 0, 1, 0, 0},
    {&__pyx_n_s_red_idx_num, __pyx_k_red_idx_num, sizeof(__pyx_k_red_idx_num), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
    {&__pyx_kp_u_reshape_integer_Return_a_new_te, __pyx_k_reshape_integer_Return_a_new_te, sizeof(__pyx_k_reshape_integer_Return_a_new_te), 0, 1, 0, 0},
    {&__pyx_n_s_result_type, __pyx_k_result_type, sizeof(__pyx_k_result_type), 0, 0, 1, 1},
    {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
    {&__pyx_n_s_rev_array, __pyx_k_rev_array, sizeof(__pyx_k_rev_array), 0, 0, 1, 1},
    {&__pyx_n_s_safe, __pyx_k_safe, sizeof(__pyx_k_safe), 0, 0, 1, 1},
    {&__pyx_n_s_same_kind, __pyx_k_same_kind, sizeof(__pyx_k_same_kind), 0, 0, 1, 1},
    {&__pyx_n_s_sample, __pyx_k_sample, sizeof(__pyx_k_sample), 0, 0, 1, 1},
    {&__pyx_kp_u_sample_p_Extract_a_sample_of_th, __pyx_k_sample_p_Extract_a_sample_of_th, sizeof(__pyx_k_sample_p_Extract_a_sample_of_th), 0, 1, 0, 0},
    {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
    {&__pyx_n_s_scl, __pyx_k_scl, sizeof(__pyx_k_scl), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_set_all, __pyx_k_set_all, sizeof(__pyx_k_set_all), 0, 0, 1, 1},
    {&__pyx_kp_u_set_all_value_Set_all_elements, __pyx_k_set_all_value_Set_all_elements, sizeof(__pyx_k_set_all_value_Set_all_elements), 0, 1, 0, 0},
    {&__pyx_n_s_set_zero, __pyx_k_set_zero, sizeof(__pyx_k_set_zero), 0, 0, 1, 1},
    {&__pyx_kp_u_set_zero_Set_all_elements_in_a, __pyx_k_set_zero_Set_all_elements_in_a, sizeof(__pyx_k_set_zero_Set_all_elements_in_a), 0, 1, 0, 0},
    {&__pyx_n_s_setgetitem_helper, __pyx_k_setgetitem_helper, sizeof(__pyx_k_setgetitem_helper), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_sp, __pyx_k_sp, sizeof(__pyx_k_sp), 0, 0, 1, 1},
    {&__pyx_n_s_sparsify, __pyx_k_sparsify, sizeof(__pyx_k_sparsify), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_n_s_str_dtype, __pyx_k_str_dtype, sizeof(__pyx_k_str_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_str_self, __pyx_k_str_self, sizeof(__pyx_k_str_self), 0, 0, 1, 1},
    {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
    {&__pyx_kp_u_sum_axis_None_dtype_None_out_No, __pyx_k_sum_axis_None_dtype_None_out_No, sizeof(__pyx_k_sum_axis_None_dtype_None_out_No), 0, 1, 0, 0},
    {&__pyx_n_s_sym, __pyx_k_sym, sizeof(__pyx_k_sym), 0, 0, 1, 1},
    {&__pyx_n_s_sz, __pyx_k_sz, sizeof(__pyx_k_sz), 0, 0, 1, 1},
    {&__pyx_n_s_tB, __pyx_k_tB, sizeof(__pyx_k_tB), 0, 0, 1, 1},
    {&__pyx_n_s_t_reshape, __pyx_k_t_reshape, sizeof(__pyx_k_t_reshape), 0, 0, 1, 1},
    {&__pyx_n_s_take, __pyx_k_take, sizeof(__pyx_k_take), 0, 0, 1, 1},
    {&__pyx_n_s_take_abs, __pyx_k_take_abs, sizeof(__pyx_k_take_abs), 0, 0, 1, 1},
    {&__pyx_kp_u_take_indices_axis_None_out_None, __pyx_k_take_indices_axis_None_out_None, sizeof(__pyx_k_take_indices_axis_None_out_None), 0, 1, 0, 0},
    {&__pyx_n_s_tensor, __pyx_k_tensor, sizeof(__pyx_k_tensor), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_T, __pyx_k_tensor_T, sizeof(__pyx_k_tensor_T), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_T_axes_None_Permute_the, __pyx_k_tensor_T_axes_None_Permute_the, sizeof(__pyx_k_tensor_T_axes_None_Permute_the), 0, 1, 0, 0},
    {&__pyx_kp_u_tensor_T_line_544, __pyx_k_tensor_T_line_544, sizeof(__pyx_k_tensor_T_line_544), 0, 1, 0, 0},
    {&__pyx_n_s_tensor___deepcopy, __pyx_k_tensor___deepcopy, sizeof(__pyx_k_tensor___deepcopy), 0, 0, 1, 1},
    {&__pyx_n_s_tensor___read_all, __pyx_k_tensor___read_all, sizeof(__pyx_k_tensor___read_all), 0, 0, 1, 1},
    {&__pyx_n_s_tensor___reduce_cython, __pyx_k_tensor___reduce_cython, sizeof(__pyx_k_tensor___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_tensor___setstate_cython, __pyx_k_tensor___setstate_cython, sizeof(__pyx_k_tensor___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_tensor___write_all, __pyx_k_tensor___write_all, sizeof(__pyx_k_tensor___write_all), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__bool_sum, __pyx_k_tensor__bool_sum, sizeof(__pyx_k_tensor__bool_sum), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__compare_tensors, __pyx_k_tensor__compare_tensors, sizeof(__pyx_k_tensor__compare_tensors), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__convert_type, __pyx_k_tensor__convert_type, sizeof(__pyx_k_tensor__convert_type), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__exp_python, __pyx_k_tensor__exp_python, sizeof(__pyx_k_tensor__exp_python), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__get_slice, __pyx_k_tensor__get_slice, sizeof(__pyx_k_tensor__get_slice), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__invert_elements, __pyx_k_tensor__invert_elements, sizeof(__pyx_k_tensor__invert_elements), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__read_all, __pyx_k_tensor__read_all, sizeof(__pyx_k_tensor__read_all), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__ufunc_interpret, __pyx_k_tensor__ufunc_interpret, sizeof(__pyx_k_tensor__ufunc_interpret), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__write_all, __pyx_k_tensor__write_all, sizeof(__pyx_k_tensor__write_all), 0, 0, 1, 1},
    {&__pyx_n_s_tensor__write_slice, __pyx_k_tensor__write_slice, sizeof(__pyx_k_tensor__write_slice), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_all, __pyx_k_tensor_all, sizeof(__pyx_k_tensor_all), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_all_line_1027, __pyx_k_tensor_all_line_1027, sizeof(__pyx_k_tensor_all_line_1027), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_astype, __pyx_k_tensor_astype, sizeof(__pyx_k_tensor_astype), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_astype_line_1580, __pyx_k_tensor_astype_line_1580, sizeof(__pyx_k_tensor_astype_line_1580), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_aux, __pyx_k_tensor_aux, sizeof(__pyx_k_tensor_aux), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_conj, __pyx_k_tensor_conj, sizeof(__pyx_k_tensor_conj), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_conj_line_1894, __pyx_k_tensor_conj_line_1894, sizeof(__pyx_k_tensor_conj_line_1894), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_copy, __pyx_k_tensor_copy, sizeof(__pyx_k_tensor_copy), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_copy_line_1367, __pyx_k_tensor_copy_line_1367, sizeof(__pyx_k_tensor_copy_line_1367), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_diagonal, __pyx_k_tensor_diagonal, sizeof(__pyx_k_tensor_diagonal), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_diagonal_line_2305, __pyx_k_tensor_diagonal_line_2305, sizeof(__pyx_k_tensor_diagonal_line_2305), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_dot, __pyx_k_tensor_dot, sizeof(__pyx_k_tensor_dot), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_dot_line_1706, __pyx_k_tensor_dot_line_1706, sizeof(__pyx_k_tensor_dot_line_1706), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_fill_random, __pyx_k_tensor_fill_random, sizeof(__pyx_k_tensor_fill_random), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_fill_random_line_851, __pyx_k_tensor_fill_random_line_851, sizeof(__pyx_k_tensor_fill_random_line_851), 0, 1, 0, 0},
    {&__pyx_kp_u_tensor_fill_random_mn_None_mx_N, __pyx_k_tensor_fill_random_mn_None_mx_N, sizeof(__pyx_k_tensor_fill_random_mn_None_mx_N), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_fill_sp_random, __pyx_k_tensor_fill_sp_random, sizeof(__pyx_k_tensor_fill_sp_random), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_fill_sp_random_line_899, __pyx_k_tensor_fill_sp_random_line_899, sizeof(__pyx_k_tensor_fill_sp_random_line_899), 0, 1, 0, 0},
    {&__pyx_kp_u_tensor_fill_sp_random_mn_None_m, __pyx_k_tensor_fill_sp_random_mn_None_m, sizeof(__pyx_k_tensor_fill_sp_random_mn_None_m), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_from_nparray, __pyx_k_tensor_from_nparray, sizeof(__pyx_k_tensor_from_nparray), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_from_nparray_line_2511, __pyx_k_tensor_from_nparray_line_2511, sizeof(__pyx_k_tensor_from_nparray_line_2511), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_get_dims, __pyx_k_tensor_get_dims, sizeof(__pyx_k_tensor_get_dims), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_get_distribution, __pyx_k_tensor_get_distribution, sizeof(__pyx_k_tensor_get_distribution), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_get_type, __pyx_k_tensor_get_type, sizeof(__pyx_k_tensor_get_type), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_i, __pyx_k_tensor_i, sizeof(__pyx_k_tensor_i), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_i_line_1228, __pyx_k_tensor_i_line_1228, sizeof(__pyx_k_tensor_i_line_1228), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_imag, __pyx_k_tensor_imag, sizeof(__pyx_k_tensor_imag), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_imag_line_1319, __pyx_k_tensor_imag_line_1319, sizeof(__pyx_k_tensor_imag_line_1319), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_item, __pyx_k_tensor_item, sizeof(__pyx_k_tensor_item), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_norm1, __pyx_k_tensor_norm1, sizeof(__pyx_k_tensor_norm1), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_norm1_line_2376, __pyx_k_tensor_norm1_line_2376, sizeof(__pyx_k_tensor_norm1_line_2376), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_norm2, __pyx_k_tensor_norm2, sizeof(__pyx_k_tensor_norm2), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_norm2_line_2400, __pyx_k_tensor_norm2_line_2400, sizeof(__pyx_k_tensor_norm2_line_2400), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_norm_infty, __pyx_k_tensor_norm_infty, sizeof(__pyx_k_tensor_norm_infty), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_norm_infty_line_2436, __pyx_k_tensor_norm_infty_line_2436, sizeof(__pyx_k_tensor_norm_infty_line_2436), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_permute, __pyx_k_tensor_permute, sizeof(__pyx_k_tensor_permute), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_prnt, __pyx_k_tensor_prnt, sizeof(__pyx_k_tensor_prnt), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_prnt_line_1257, __pyx_k_tensor_prnt_line_1257, sizeof(__pyx_k_tensor_prnt_line_1257), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_ravel, __pyx_k_tensor_ravel, sizeof(__pyx_k_tensor_ravel), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_ravel_line_1482, __pyx_k_tensor_ravel_line_1482, sizeof(__pyx_k_tensor_ravel_line_1482), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_read, __pyx_k_tensor_read, sizeof(__pyx_k_tensor_read), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_read_all, __pyx_k_tensor_read_all, sizeof(__pyx_k_tensor_read_all), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_read_all_nnz, __pyx_k_tensor_read_all_nnz, sizeof(__pyx_k_tensor_read_all_nnz), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_read_from_file, __pyx_k_tensor_read_from_file, sizeof(__pyx_k_tensor_read_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_read_local, __pyx_k_tensor_read_local, sizeof(__pyx_k_tensor_read_local), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_read_local_nnz, __pyx_k_tensor_read_local_nnz, sizeof(__pyx_k_tensor_read_local_nnz), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_real, __pyx_k_tensor_real, sizeof(__pyx_k_tensor_real), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_real_line_1274, __pyx_k_tensor_real_line_1274, sizeof(__pyx_k_tensor_real_line_1274), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_reshape, __pyx_k_tensor_reshape, sizeof(__pyx_k_tensor_reshape), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_reshape_line_1391, __pyx_k_tensor_reshape_line_1391, sizeof(__pyx_k_tensor_reshape_line_1391), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_sample, __pyx_k_tensor_sample, sizeof(__pyx_k_tensor_sample), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_sample_line_2595, __pyx_k_tensor_sample_line_2595, sizeof(__pyx_k_tensor_sample_line_2595), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_set_all, __pyx_k_tensor_set_all, sizeof(__pyx_k_tensor_set_all), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_set_all_line_2196, __pyx_k_tensor_set_all_line_2196, sizeof(__pyx_k_tensor_set_all_line_2196), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_set_zero, __pyx_k_tensor_set_zero, sizeof(__pyx_k_tensor_set_zero), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_set_zero_line_2180, __pyx_k_tensor_set_zero_line_2180, sizeof(__pyx_k_tensor_set_zero_line_2180), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_sparsify, __pyx_k_tensor_sparsify, sizeof(__pyx_k_tensor_sparsify), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_sum, __pyx_k_tensor_sum, sizeof(__pyx_k_tensor_sum), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_sum_line_2339, __pyx_k_tensor_sum_line_2339, sizeof(__pyx_k_tensor_sum_line_2339), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_take, __pyx_k_tensor_take, sizeof(__pyx_k_tensor_take), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_take_line_2540, __pyx_k_tensor_take_line_2540, sizeof(__pyx_k_tensor_take_line_2540), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_tensordot, __pyx_k_tensor_tensordot, sizeof(__pyx_k_tensor_tensordot), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_tensordot_line_1739, __pyx_k_tensor_tensordot_line_1739, sizeof(__pyx_k_tensor_tensordot_line_1739), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_to_nparray, __pyx_k_tensor_to_nparray, sizeof(__pyx_k_tensor_to_nparray), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_to_nparray_line_2481, __pyx_k_tensor_to_nparray_line_2481, sizeof(__pyx_k_tensor_to_nparray_line_2481), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_tot_size, __pyx_k_tensor_tot_size, sizeof(__pyx_k_tensor_tot_size), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_trace, __pyx_k_tensor_trace, sizeof(__pyx_k_tensor_trace), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_trace_line_2265, __pyx_k_tensor_trace_line_2265, sizeof(__pyx_k_tensor_trace_line_2265), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_transpose, __pyx_k_tensor_transpose, sizeof(__pyx_k_tensor_transpose), 0, 0, 1, 1},
    {&__pyx_kp_u_tensor_transpose_axes_Return_th, __pyx_k_tensor_transpose_axes_Return_th, sizeof(__pyx_k_tensor_transpose_axes_Return_th), 0, 1, 0, 0},
    {&__pyx_kp_u_tensor_transpose_line_569, __pyx_k_tensor_transpose_line_569, sizeof(__pyx_k_tensor_transpose_line_569), 0, 1, 0, 0},
    {&__pyx_n_s_tensor_write, __pyx_k_tensor_write, sizeof(__pyx_k_tensor_write), 0, 0, 1, 1},
    {&__pyx_n_s_tensor_write_to_file, __pyx_k_tensor_write_to_file, sizeof(__pyx_k_tensor_write_to_file), 0, 0, 1, 1},
    {&__pyx_n_s_tensordot, __pyx_k_tensordot, sizeof(__pyx_k_tensordot), 0, 0, 1, 1},
    {&__pyx_kp_u_tensordot_other_axes_2_Return_t, __pyx_k_tensordot_other_axes_2_Return_t, sizeof(__pyx_k_tensordot_other_axes_2_Return_t), 0, 1, 0, 0},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_thresh, __pyx_k_thresh, sizeof(__pyx_k_thresh), 0, 0, 1, 1},
    {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
    {&__pyx_n_s_timer, __pyx_k_timer, sizeof(__pyx_k_timer), 0, 0, 1, 1},
    {&__pyx_n_s_to_nparray, __pyx_k_to_nparray, sizeof(__pyx_k_to_nparray), 0, 0, 1, 1},
    {&__pyx_kp_u_to_nparray_Convert_tensor_to_nu, __pyx_k_to_nparray_Convert_tensor_to_nu, sizeof(__pyx_k_to_nparray_Convert_tensor_to_nu), 0, 1, 0, 0},
    {&__pyx_n_s_tot_size, __pyx_k_tot_size, sizeof(__pyx_k_tot_size), 0, 0, 1, 1},
    {&__pyx_n_s_total_size, __pyx_k_total_size, sizeof(__pyx_k_total_size), 0, 0, 1, 1},
    {&__pyx_n_s_trace, __pyx_k_trace, sizeof(__pyx_k_trace), 0, 0, 1, 1},
    {&__pyx_kp_u_trace_offset_0_axis1_0_axis2_1, __pyx_k_trace_offset_0_axis1_0_axis2_1, sizeof(__pyx_k_trace_offset_0_axis1_0_axis2_1), 0, 1, 0, 0},
    {&__pyx_n_s_transpose, __pyx_k_transpose, sizeof(__pyx_k_transpose), 0, 0, 1, 1},
    {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
    {&__pyx_n_s_type_index, __pyx_k_type_index, sizeof(__pyx_k_type_index), 0, 0, 1, 1},
    {&__pyx_n_s_ufunc_interpret, __pyx_k_ufunc_interpret, sizeof(__pyx_k_ufunc_interpret), 0, 0, 1, 1},
    {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
    {&__pyx_n_s_unpack_sym, __pyx_k_unpack_sym, sizeof(__pyx_k_unpack_sym), 0, 0, 1, 1},
    {&__pyx_n_s_unsafe, __pyx_k_unsafe, sizeof(__pyx_k_unsafe), 0, 0, 1, 1},
    {&__pyx_n_s_use_align_for_pair, __pyx_k_use_align_for_pair, sizeof(__pyx_k_use_align_for_pair), 0, 0, 1, 1},
    {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
    {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
    {&__pyx_n_s_vvals, __pyx_k_vvals, sizeof(__pyx_k_vvals), 0, 0, 1, 1},
    {&__pyx_n_s_with_vals, __pyx_k_with_vals, sizeof(__pyx_k_with_vals), 0, 0, 1, 1},
    {&__pyx_n_s_world, __pyx_k_world, sizeof(__pyx_k_world), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_write_all, __pyx_k_write_all, sizeof(__pyx_k_write_all), 0, 0, 1, 1},
    {&__pyx_n_s_write_slice, __pyx_k_write_slice, sizeof(__pyx_k_write_slice), 0, 0, 1, 1},
    {&__pyx_n_s_write_to_file, __pyx_k_write_to_file, sizeof(__pyx_k_write_to_file), 0, 0, 1, 1},
    {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 356, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 664, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 984, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":984
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../myenv/lib/python3.11/site-packages/numpy/__init__.cython-30.pxd":990
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "ctf/tensor.pyx":466
 *                 strides[i] = self.shape[i+1] * strides[i+1]
 *         self.strides = tuple(strides)
 *         rlens = lens[:]             # <<<<<<<<<<<<<<
 *         rsym = self.sym.copy()
 *         if ctf.helper._ord_comp(self.order, 'F'):
 */
  __pyx_slice__4 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);

  /* "ctf/tensor.pyx":472
 *             if self.ndim > 1:
 *                 rsym = ctf.helper._rev_array(rsym)
 *                 rsym[0:-1] = rsym[1:]             # <<<<<<<<<<<<<<
 *                 rsym[-1] = SYM.NS
 *         cdef int64_t * clens
 */
  __pyx_slice__5 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);
  __pyx_slice__6 = PySlice_New(__pyx_int_0, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);

  /* "ctf/tensor.pyx":482
 *             idx = ctf.helper._rev_array(idx)
 *             if prl is None:
 *                 raise ValueError("Specify mesh processor toplogy with character labels")             # <<<<<<<<<<<<<<
 *             if blk is None:
 *                 blk=idx_partition()
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Specify_mesh_processor_toplogy_w); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "ctf/tensor.pyx":524
 *                 self.dt = new Tensor[float](self.ndim, sp, clens, csym)
 *             else:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype')             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(copy, tensor):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "ctf/tensor.pyx":602
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")             # <<<<<<<<<<<<<<
 *         out_order = self.order
 *         out_dtype = ctf.helper._get_np_dtype([self.dtype, other.dtype])
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Universal_functions_among_tensor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "ctf/tensor.pyx":636
 *                             out_sym[-i-2] = self.sym[-i-2]
 *                 else:
 *                     raise ValueError("Invalid use of universal function broadcasting, tensor dimensions are both non-unit and don't match")             # <<<<<<<<<<<<<<
 *                 out_dims[-i-1] = np.maximum(self.shape[-i-1], other.shape[-i-1])
 *             elif i<self.ndim:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Invalid_use_of_universal_functio); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "ctf/tensor.pyx":664
 *     def __nonzero__(self):
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: The truth value of a tensor with more than one element is ambiguous. Use ctf.any() or ctf.all()")             # <<<<<<<<<<<<<<
 *         if int(self.to_nparray() == 0) == 1:
 *             return False
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_The_truth_value); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "ctf/tensor.pyx":672
 *     def __int__(self):
 *         if self.size != 1 and self.shape != ():
 *             raise TypeError("CTF PYTHON ERROR: only length-1 tensors can be converted to Python scalars")             # <<<<<<<<<<<<<<
 *         return int(self.to_nparray())
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_only_length_1_t); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "ctf/tensor.pyx":703
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __iadd__ (+=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "ctf/tensor.pyx":706
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __iadd__ (+=)')             # <<<<<<<<<<<<<<
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 += np.int64
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "ctf/tensor.pyx":725
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __imul__ (*=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_2); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "ctf/tensor.pyx":728
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __imul__ (*=)')             # <<<<<<<<<<<<<<
 *         self_copy = tensor(copy=self)
 *         self.set_zero()
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_2); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "ctf/tensor.pyx":747
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __isub__ (-=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_3); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "ctf/tensor.pyx":750
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __isub__ (-=)')             # <<<<<<<<<<<<<<
 *         if self.dtype != other.dtype:
 *             [tsr, otsr] = ctf.tensor_aux._match_tensor_types(self,other) # solve the bug when np.float64 -= np.int64
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_3); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "ctf/tensor.pyx":768
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __itruediv__ (/=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_4); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "ctf/tensor.pyx":771
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __itruediv__ (/=)')             # <<<<<<<<<<<<<<
 *         if isinstance(other_in, tensor):
 *             otsr = tensor(copy=other)
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_4); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "ctf/tensor.pyx":789
 *         other = ctf.tensor_aux.astensor(other_in)
 *         if np.result_type(self.dtype, other.dtype) != self.dtype:
 *             raise TypeError('CTF PYTHON ERROR: refusing to downgrade type within __idiv__ (/=), as done by numpy')             # <<<<<<<<<<<<<<
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_refusing_to_dow_5); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "ctf/tensor.pyx":792
 *         [idx_A, idx_B, idx_C, out_tsr] = self._ufunc_interpret(other, False)
 *         if len(idx_C) != self.ndim or idx_C != idx_A:
 *             raise ValueError('CTF PYTHON ERROR: invalid call to __idiv__ (/=)')             # <<<<<<<<<<<<<<
 *         if isinstance(other_in, tensor):
 *             otsr = tensor(copy=other)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_call_to_5); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "ctf/tensor.pyx":814
 *     def __pow__(self, other, modulus):
 *         if modulus is not None:
 *             raise ValueError('CTF PYTHON ERROR: powering function does not accept third parameter (modulus)')             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux.power(self,other)
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_powering_functi); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "ctf/tensor.pyx":848
 *     def __matmul__(self, other):
 *         if not isinstance(other, tensor):
 *             raise ValueError("input should be tensors")             # <<<<<<<<<<<<<<
 *         return ctf.tensor_aux.dot(self, other)
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_input_should_be_tensors); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "ctf/tensor.pyx":1007
 *                 self.dt.exp_helper[double, double](<ctensor*>A.dt)
 *             else:
 *                 raise ValueError("exponentiation not supported for these types")             # <<<<<<<<<<<<<<
 * #            elif A.dtype == np.complex64:
 * #                self.dt.exp_helper[complex64_t, complex64_t](<ctensor*>A.dt)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_exponentiation_not_supported_for); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "ctf/tensor.pyx":1064
 *             if out is not None:
 *                 if type(out) != np.ndarray:
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')             # <<<<<<<<<<<<<<
 *                 if out.shape != () and keepdims == False:
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_output_must_be); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "ctf/tensor.pyx":1066
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if out.shape != () and keepdims == False:
 *                     raise ValueError('CTF PYTHON ERROR: output parameter has too many dimensions')             # <<<<<<<<<<<<<<
 *                 if keepdims == True:
 *                     dims_keep = []
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_output_paramete); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "ctf/tensor.pyx":1073
 *                     dims_keep = tuple(dims_keep)
 *                     if out.shape != dims_keep:
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')             # <<<<<<<<<<<<<<
 *             B = tensor((1,), dtype=np.bool_)
 *             index_A = ctf.helper._get_num_str(self.ndim)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_output_must_mat); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "ctf/tensor.pyx":1074
 *                     if out.shape != dims_keep:
 *                         raise ValueError('CTF PYTHON ERROR: output must match when keepdims = True')
 *             B = tensor((1,), dtype=np.bool_)             # <<<<<<<<<<<<<<
 *             index_A = ctf.helper._get_num_str(self.ndim)
 *             if self.dtype == np.float64:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_tuple__29); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "ctf/tensor.pyx":1098
 *                     return vals.reshape(out.shape)
 *                 else:
 *                     raise ValueError("CTF PYTHON ERROR: invalid output dtype")             # <<<<<<<<<<<<<<
 *                     #if keepdims == True:
 *                     #    dim_keep = np.ones(len(self.shape),dtype=np.int64)
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_output); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "ctf/tensor.pyx":1118
 *                 axis += len(dim)
 *             if axis >= len(dim) or axis < 0:
 *                 raise ValueError("'axis' entry is out of bounds")             # <<<<<<<<<<<<<<
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_axis_entry_is_out_of_bounds); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "ctf/tensor.pyx":1124
 *                     raise ValueError('CTF PYTHON ERROR: output must be an array')
 *                 if len(dim_ret) != len(out.shape):
 *                     raise ValueError('CTF PYTHON ERROR: output parameter dimensions mismatch')             # <<<<<<<<<<<<<<
 *                 for i in range(len(dim_ret)):
 *                     if dim_ret[i] != out.shape[i]:
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_output_paramete_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "ctf/tensor.pyx":1182
 *             for i in range(len(axis.shape)):
 *                 if np.count_nonzero(axis==axis[i]) > 1:
 *                     raise ValueError("duplicate value in 'axis'")             # <<<<<<<<<<<<<<
 *             dim_ret = np.delete(dim, axis)
 *             if out is not None:
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_duplicate_value_in_axis); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "ctf/tensor.pyx":1226
 *             return B
 *         else:
 *             raise ValueError("an integer is required")             # <<<<<<<<<<<<<<
 * 
 *     def i(self, string):
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_an_integer_is_required); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "ctf/tensor.pyx":1310
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in real function has the dtype np.float64 or np.complex128")             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 set_real[float](<ctensor*>value.dt, <ctensor*>self.dt)
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "ctf/tensor.pyx":1356
 *                 return ctf.tensor_aux.zeros(self.shape, dtype=np.float64)
 *             else:
 *                 raise ValueError("CTF ERROR: cannot call imag on non-complex/real single/double precision tensor")             # <<<<<<<<<<<<<<
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_CTF_ERROR_cannot_call_imag_on_no); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "ctf/tensor.pyx":1359
 *         else:
 *             if value.dtype != np.float32 and value.dtype != np.float64:
 *                 raise ValueError("CTF PYTHON ERROR: current CTF Python only support value in imaginary function has the dtype np.float64 or np.complex128")             # <<<<<<<<<<<<<<
 *             if self.dtype == np.complex64:
 *                 set_imag[float](<ctensor*>value.dt, <ctensor*>self.dt)
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_current_CTF_Pyt_2); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "ctf/tensor.pyx":1365
 *                 set_imag[double](<ctensor*>value.dt, <ctensor*>self.dt)
 *             else:
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_CTF_ERROR_cannot_call_imag_with); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "ctf/tensor.pyx":1426
 *         if not isinstance(integer[0], (int, np.integer)):
 *             if len(integer)!=1:
 *                 raise ValueError("CTF PYTHON ERROR: invalid shape argument to reshape")             # <<<<<<<<<<<<<<
 *             else:
 *                 integer = integer[0]
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_a); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "ctf/tensor.pyx":1436
 *                 newshape.append(integer[i])
 *         else:
 *             raise ValueError("CTF PYTHON ERROR: invalid shape input to reshape")             # <<<<<<<<<<<<<<
 *         for i in range(len(dim)):
 *             total_size *= dim[i]
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_invalid_shape_i); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "ctf/tensor.pyx":1449
 *                 new_size *= newshape[i]
 *             if new_size != total_size:
 *                 raise ValueError("CTF PYTHON ERROR: total size of new array must be unchanged")             # <<<<<<<<<<<<<<
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 *             alpha = <char*>self.dt.sr.mulid()
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_total_size_of_n); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "ctf/tensor.pyx":1467
 *             nega_size = total_size / new_size
 *             if nega_size < 1:
 *                 raise ValueError("can not reshape into this size")             # <<<<<<<<<<<<<<
 *             newshape[pos] = nega_size
 *             B = tensor(newshape,sp=self.sp,dtype=self.dtype)
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_can_not_reshape_into_this_size); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "ctf/tensor.pyx":1478
 *             return B
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: can only specify one unknown dimension')             # <<<<<<<<<<<<<<
 *             t_reshape.stop()
 *             return None
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_can_only_specif); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "ctf/tensor.pyx":1531
 *         if vals is not None:
 *             if vals.dtype != self.dtype:
 *                 raise ValueError('CTF PYTHON ERROR: bad dtype of vals parameter to read')             # <<<<<<<<<<<<<<
 *         gvals = vals
 *         if vals is None:
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_bad_dtype_of_va); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "ctf/tensor.pyx":1535
 *         if vals is None:
 *             gvals = np.zeros(len(iinds),dtype=self.dtype)
 *         cdef cnp.ndarray buf = np.empty(len(iinds), dtype=np.dtype([('a','i8'),('b',self.dtype)],align=ctf.helper._use_align_for_pair(self.dtype)))             # <<<<<<<<<<<<<<
 *         buf['a'][:] = iinds[:]
 *         buf['b'][:] = gvals[:]
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_i8); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "ctf/tensor.pyx":1575
 *         """
 *         if self.dt.get_tot_size(False) != 1:
 *             raise ValueError("item() must be called on array of size 0")             # <<<<<<<<<<<<<<
 * 
 *         arr = self.read_all()
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_item_must_be_called_on_array_of); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "ctf/tensor.pyx":1683
 *                 raise ValueError("Cannot cast array from dtype({0}) to dtype({1}) according to the rule 'same_kind'".format(self.dtype,dtype))
 *         else:
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")             # <<<<<<<<<<<<<<
 * 
 *     def read_local(self, unpack_sym=True):
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_casting_must_be_one_of_no_equiv); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "ctf/tensor.pyx":1869
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):
 *             raise ValueError("CTF PYTHON ERROR: cannot __read_all for this type of tensor")             # <<<<<<<<<<<<<<
 *         cdef char * cvals
 *         cdef int64_t sz
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_cannot___read_a); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "ctf/tensor.pyx":1884
 *         """
 *         if self.dt.wrld.np != 1 or self.sp != 0 or not np.all(self.sym == SYM.NS):
 *             raise ValueError("CTF PYTHON ERROR: cannot __write_all for this type of tensor")             # <<<<<<<<<<<<<<
 *         cdef char * cvals
 *         cdef int64_t sz
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_cannot___write); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "ctf/tensor.pyx":1941
 *         """
 *         if p_A is None and p_B is None:
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")             # <<<<<<<<<<<<<<
 *         if p_A is not None and p_B is not None:
 *             raise ValueError("CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined")
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_permute_must_be); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "ctf/tensor.pyx":1943
 *             raise ValueError("CTF PYTHON ERROR: permute must be called with either p_A or p_B defined")
 *         if p_A is not None and p_B is not None:
 *             raise ValueError("CTF PYTHON ERROR: permute cannot be called with both p_A and p_B defined")             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_permute_cannot); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "ctf/tensor.pyx":2398
 *         #    return (<Tensor[double complex]*>self.dt).norm1()
 *         else:
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')             # <<<<<<<<<<<<<<
 * 
 *     def norm2(self):
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_norm_not_presen); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 2398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "ctf/tensor.pyx":2629
 *             new_shape.append(self.shape[i])
 *             if b.shape[i] != new_shape[i]:
 *                 raise ValueError('CTF PYTHON ERROR: unable to perform comparison between tensors of different shape')             # <<<<<<<<<<<<<<
 *         for i in range(min(self.ndim,b.ndim),max(self.ndim,b.ndim)):
 *             if self.ndim > b.ndim:
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_CTF_PYTHON_ERROR_unable_to_perfo); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "ctf/tensor.pyx":13
 * ctypedef double complex complex128_t
 * ctypedef float complex complex64_t
 * import ctf.partition             # <<<<<<<<<<<<<<
 * import ctf.helper
 * import ctf.profile
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_ctf, __pyx_n_s_partition); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "ctf/tensor.pyx":14
 * ctypedef float complex complex64_t
 * import ctf.partition
 * import ctf.helper             # <<<<<<<<<<<<<<
 * import ctf.profile
 * import ctf.tensor_aux
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_s_ctf, __pyx_n_s_helper); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "ctf/tensor.pyx":15
 * import ctf.partition
 * import ctf.helper
 * import ctf.profile             # <<<<<<<<<<<<<<
 * import ctf.tensor_aux
 * #import ctf.term
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_ctf, __pyx_n_s_profile); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "ctf/tensor.pyx":16
 * import ctf.helper
 * import ctf.profile
 * import ctf.tensor_aux             # <<<<<<<<<<<<<<
 * #import ctf.term
 * from ctf.term cimport itensor
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_s_ctf, __pyx_n_s_tensor_aux); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "ctf/tensor.pyx":19
 * #import ctf.term
 * from ctf.term cimport itensor
 * import ctf.world             # <<<<<<<<<<<<<<
 * 
 * cimport ctf.chelper
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_s_ctf, __pyx_n_s_world); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "ctf/tensor.pyx":62
 * 
 * #from enum import Enum
 * def _enum(**enums):             # <<<<<<<<<<<<<<
 *     return type('Enum', (), enums)
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_enums); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_enum, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 62, __pyx_L1_error)

  /* "ctf/tensor.pyx":304
 *             return self.dt.nnz_tot
 * 
 *     def _bool_sum(tensor self):             # <<<<<<<<<<<<<<
 *         return sum_bool_tsr(self.dt)
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_bool_sum, 304, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 304, __pyx_L1_error)

  /* "ctf/tensor.pyx":308
 * 
 *     # convert the type of self and store the elements in self to B
 *     def _convert_type(tensor self, tensor B):             # <<<<<<<<<<<<<<
 *         conv_type(ctf.helper.type_index[self.dtype], ctf.helper.type_index[B.dtype], <ctensor*>self.dt, <ctensor*>B.dt);
 * 
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_B); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_convert_type, 308, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 308, __pyx_L1_error)

  /* "ctf/tensor.pyx":312
 * 
 *     # get "shape" or dimensions of the ctensor
 *     def get_dims(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_dims()
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_get_dims, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 312, __pyx_L1_error)

  /* "ctf/tensor.pyx":325
 *         return self.shape
 * 
 *     def get_type(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_type()
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_get_type, 325, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 325, __pyx_L1_error)

  /* "ctf/tensor.pyx":338
 *         return self.dtype
 * 
 *     def get_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_distribution()
 */
  __pyx_tuple__70 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_idx_2, __pyx_n_s_prl, __pyx_n_s_blk, __pyx_n_s_idx, __pyx_n_s_i); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_get_distribution, 338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "ctf/tensor.pyx":544
 * 
 * 
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.T(axes=None)
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_T, 544, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 544, __pyx_L1_error)

  /* "ctf/tensor.pyx":569
 *         return ctf.tensor_aux.transpose(self)
 * 
 *     def transpose(self, *axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.transpose(*axes)
 */
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_axes); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_transpose, 569, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 569, __pyx_L1_error)

  /* "ctf/tensor.pyx":600
 *             return ctf.tensor_aux.transpose(self)
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):             # <<<<<<<<<<<<<<
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 */
  __pyx_tuple__75 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_gen_tsr, __pyx_n_s_out_order, __pyx_n_s_out_dtype, __pyx_n_s_out_dims, __pyx_n_s_out_sp, __pyx_n_s_out_sym, __pyx_n_s_ind_coll, __pyx_n_s_idx_C, __pyx_n_s_idx_A, __pyx_n_s_idx_B, __pyx_n_s_red_idx_num, __pyx_n_s_i, __pyx_n_s_out_tsr); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_ufunc_interpret, 600, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 600, __pyx_L1_error)
  __pyx_tuple__77 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "ctf/tensor.pyx":826
 * 
 * 
 *     def _invert_elements(self):             # <<<<<<<<<<<<<<
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 */
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_invert_elements, 826, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 826, __pyx_L1_error)

  /* "ctf/tensor.pyx":851
 *         return ctf.tensor_aux.dot(self, other)
 * 
 *     def fill_random(self, mn=None, mx=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_random(mn=None, mx=None)
 */
  __pyx_tuple__79 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_mn, __pyx_n_s_mx); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_fill_random, 851, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_tuple__81 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "ctf/tensor.pyx":899
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 * 
 *     def fill_sp_random(self, mn=None, mx=None, frac_sp=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_sp_random(mn=None, mx=None, frac_sp=None)
 */
  __pyx_tuple__82 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_mn, __pyx_n_s_mx, __pyx_n_s_frac_sp); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_fill_sp_random, 899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 899, __pyx_L1_error)
  __pyx_tuple__84 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "ctf/tensor.pyx":950
 *     # for sparse tensor, file assumed to be text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def read_from_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */
  __pyx_tuple__85 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_path, __pyx_n_s_with_vals); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read_from_file, 950, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 950, __pyx_L1_error)

  /* "ctf/tensor.pyx":970
 *     # for sparse tensor, file created is text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def write_to_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_write_to_file, 970, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 970, __pyx_L1_error)

  /* "ctf/tensor.pyx":987
 * 
 *     # the function that call the exp_helper in the C++ level
 *     def _exp_python(self, tensor A, cast = None, dtype = None):             # <<<<<<<<<<<<<<
 *         # when the casting is default that is "same kind"
 *         if cast is None:
 */
  __pyx_tuple__88 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_A, __pyx_n_s_cast, __pyx_n_s_dtype); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_exp_python, 987, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 987, __pyx_L1_error)

  /* "ctf/tensor.pyx":1027
 *     # issue: when shape contains 1 such as [3,4,1], it seems that CTF in C++ does not support sum over empty dims -> sum over 1.
 * 
 *     def all(tensor self, axis=None, out=None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         all(axis=None, out=None, keepdims = False)
 */
  __pyx_tuple__90 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_axis, __pyx_n_s_out, __pyx_n_s_keepdims, __pyx_n_s_dims_keep, __pyx_n_s_i, __pyx_n_s_B, __pyx_n_s_index_A, __pyx_n_s_dim_keep, __pyx_n_s_ret, __pyx_n_s_C, __pyx_n_s_vals, __pyx_n_s_dim, __pyx_n_s_dim_ret, __pyx_n_s_index_temp, __pyx_n_s_index_B); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_all, 1027, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 1027, __pyx_L1_error)

  /* "ctf/tensor.pyx":1228
 *             raise ValueError("an integer is required")
 * 
 *     def i(self, string):             # <<<<<<<<<<<<<<
 *         """
 *         i(string)
 */
  __pyx_tuple__92 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_string); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_i, 1228, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1228, __pyx_L1_error)

  /* "ctf/tensor.pyx":1257
 *             return itensor(self, string)
 * 
 *     def prnt(self):             # <<<<<<<<<<<<<<
 *         """
 *         prnt()
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_prnt, 1257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 1257, __pyx_L1_error)

  /* "ctf/tensor.pyx":1274
 *         self.dt.prnt()
 * 
 *     def real(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         real(value = None)
 */
  __pyx_tuple__95 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_real, 1274, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __pyx_tuple__97 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "ctf/tensor.pyx":1319
 *                 self.__cinit__(copy=value)
 * 
 *     def imag(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         imag(value = None)
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_imag, 1319, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 1319, __pyx_L1_error)

  /* "ctf/tensor.pyx":1367
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         copy()
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_copy, 1367, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1367, __pyx_L1_error)

  /* "ctf/tensor.pyx":1391
 *         return B
 * 
 *     def reshape(tensor self, *integer):             # <<<<<<<<<<<<<<
 *         """
 *         reshape(*integer)
 */
  __pyx_tuple__100 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_integer, __pyx_n_s_t_reshape, __pyx_n_s_dim, __pyx_n_s_total_size, __pyx_n_s_newshape, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_i, __pyx_n_s_new_size, __pyx_n_s_nega, __pyx_n_s_B, __pyx_n_s_pos, __pyx_n_s_nega_size); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_reshape, 1391, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1391, __pyx_L1_error)

  /* "ctf/tensor.pyx":1482
 *             return None
 * 
 *     def ravel(self, order="F"):             # <<<<<<<<<<<<<<
 *         """
 *         ravel(order="F")
 */
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_order); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_ravel, 1482, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "ctf/tensor.pyx":1501
 *         return ctf.tensor_aux.ravel(self, order)
 * 
 *     def read(self, inds, vals=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         read(inds, vals=None, a=None, b=None)
 */
  __pyx_tuple__105 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_inds, __pyx_n_s_vals, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_iinds, __pyx_n_s_mystrides, __pyx_n_s_i, __pyx_n_s_ca, __pyx_n_s_gvals, __pyx_n_s_buf, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_st, __pyx_n_s_na, __pyx_n_s_j, __pyx_n_s_nb); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read, 1501, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 1501, __pyx_L1_error)

  /* "ctf/tensor.pyx":1565
 *             return gvals
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         """
 *         item()
 */
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_item, 1565, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 1565, __pyx_L1_error)

  /* "ctf/tensor.pyx":1580
 *         return arr.item()
 * 
 *     def astype(self, dtype, order='F', casting='unsafe'):             # <<<<<<<<<<<<<<
 *         """
 *         astype(dtype, order='F', casting='unsafe')
 */
  __pyx_tuple__109 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_dtype, __pyx_n_s_order, __pyx_n_s_casting, __pyx_n_s_B, __pyx_n_s_str_self, __pyx_n_s_str_dtype); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_astype, 1580, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __pyx_tuple__111 = PyTuple_Pack(2, __pyx_n_s_F, __pyx_n_s_unsafe); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "ctf/tensor.pyx":1685
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")
 * 
 *     def read_local(self, unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local()
 */
  __pyx_tuple__112 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_unpack_sym, __pyx_n_s_cinds, __pyx_n_s_cdata, __pyx_n_s_n, __pyx_n_s_inds, __pyx_n_s_vals); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 1685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read_local, 1685, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 1685, __pyx_L1_error)

  /* "ctf/tensor.pyx":1706
 *         return inds, vals
 * 
 *     def dot(self, other, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         dot(other, out=None)
 */
  __pyx_tuple__114 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_out); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_dot, 1706, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 1706, __pyx_L1_error)

  /* "ctf/tensor.pyx":1739
 *         return ctf.tensor_aux.dot(self,other,out)
 * 
 *     def tensordot(self, other, axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensordot(other, axes=2)
 */
  __pyx_tuple__116 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_axes); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_tensordot, 1739, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1739, __pyx_L1_error)

  /* "ctf/tensor.pyx":1779
 * 
 * 
 *     def read_local_nnz(self,unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local_nnz()
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read_local_nnz, 1779, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 1779, __pyx_L1_error)

  /* "ctf/tensor.pyx":1800
 *         return inds, vals
 * 
 *     def tot_size(self, unpack=True):             # <<<<<<<<<<<<<<
 *         return self.dt.get_tot_size(not unpack)
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_unpack); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_tot_size, 1800, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 1800, __pyx_L1_error)

  /* "ctf/tensor.pyx":1803
 *         return self.dt.get_tot_size(not unpack)
 * 
 *     def read_all(self, arr=None, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all(arr=None, unpack=True)
 */
  __pyx_tuple__121 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_arr, __pyx_n_s_unpack, __pyx_n_s_cvals, __pyx_n_s_sz, __pyx_n_s_tB, __pyx_n_s_arr_in, __pyx_n_s_vals); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read_all, 1803, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __pyx_tuple__123 = PyTuple_Pack(2, Py_None, Py_True); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "ctf/tensor.pyx":1840
 *             arr[:] = vals[:]
 * 
 *     def read_all_nnz(self, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all_nnz(arr=None, unpack=True)
 */
  __pyx_tuple__124 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_unpack, __pyx_n_s_cinds, __pyx_n_s_cdata, __pyx_n_s_n, __pyx_n_s_inds, __pyx_n_s_vals); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 1840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read_all_nnz, 1840, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 1840, __pyx_L1_error)

  /* "ctf/tensor.pyx":1863
 *         return inds, vals
 * 
 *     def __read_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __read_all(arr)
 */
  __pyx_tuple__126 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_arr, __pyx_n_s_cvals, __pyx_n_s_sz, __pyx_n_s_tB, __pyx_n_s_vals); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_read_all_2, 1863, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 1863, __pyx_L1_error)

  /* "ctf/tensor.pyx":1878
 *         arr[:] = vals[:]
 * 
 *     def __write_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __write_all(arr)
 */
  __pyx_tuple__128 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_arr, __pyx_n_s_cvals, __pyx_n_s_sz, __pyx_n_s_tB, __pyx_n_s_vals, __pyx_n_s_rarr); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_write_all, 1878, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 1878, __pyx_L1_error)

  /* "ctf/tensor.pyx":1894
 *         vals[:] = rarr[:]
 * 
 *     def conj(self):             # <<<<<<<<<<<<<<
 *         """
 *         conj()
 */
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_conj, 1894, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(0, 1894, __pyx_L1_error)

  /* "ctf/tensor.pyx":1915
 *         return ctf.tensor_aux.conj(self)
 * 
 *     def permute(self, tensor A, p_A=None, p_B=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         permute(self, tensor A, p_A=None, p_B=None, a=None, b=None)
 */
  __pyx_tuple__131 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_A, __pyx_n_s_p_A, __pyx_n_s_p_B, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_permutation_A, __pyx_n_s_permutation_B, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_st, __pyx_n_s_na, __pyx_n_s_nb); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_permute, 1915, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __pyx_tuple__133 = PyTuple_Pack(4, Py_None, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "ctf/tensor.pyx":2001
 *             free(permutation_B)
 * 
 *     def write(self, inds, vals, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         write(inds, vals, a=None, b=None)
 */
  __pyx_tuple__134 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_inds, __pyx_n_s_vals, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_iinds, __pyx_n_s_vvals, __pyx_n_s_mystrides, __pyx_n_s_i, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_st, __pyx_n_s_na, __pyx_n_s_j, __pyx_n_s_nb, __pyx_n_s_buf); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 2001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_write, 2001, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 2001, __pyx_L1_error)

  /* "ctf/tensor.pyx":2064
 *     put = write
 * 
 *     def _get_slice(self, offsets, ends):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
  __pyx_tuple__136 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_offsets, __pyx_n_s_ends, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_A, __pyx_n_s_clens, __pyx_n_s_coffs, __pyx_n_s_cends, __pyx_n_s_czeros); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_get_slice, 2064, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 2064, __pyx_L1_error)

  /* "ctf/tensor.pyx":2090
 *         return A
 * 
 *     def _write_slice(self, offsets, ends, init_A, A_offsets=None, A_ends=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
  __pyx_tuple__138 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_offsets, __pyx_n_s_ends, __pyx_n_s_init_A, __pyx_n_s_A_offsets, __pyx_n_s_A_ends, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_alpha, __pyx_n_s_beta, __pyx_n_s_A, __pyx_n_s_st, __pyx_n_s_na, __pyx_n_s_j, __pyx_n_s_nb, __pyx_n_s_caoffs, __pyx_n_s_caends, __pyx_n_s_coffs, __pyx_n_s_cends); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_write_slice, 2090, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 2090, __pyx_L1_error)

  /* "ctf/tensor.pyx":2148
 *         free(caoffs)
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *         return tensor(copy=self)
 * 
 */
  __pyx_tuple__140 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_memo); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_deepcopy_2, 2148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 2148, __pyx_L1_error)

  /* "ctf/tensor.pyx":2176
 *             return tsr.reshape(corr_shape)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         mystr = ctf.helper._get_num_str(self.ndim)
 *         self.i(mystr).scl(0.0)
 */
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_mystr); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 2176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_set_zero, 2176, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 2176, __pyx_L1_error)

  /* "ctf/tensor.pyx":2180
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         set_zero()
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_set_zero, 2180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 2180, __pyx_L1_error)

  /* "ctf/tensor.pyx":2196
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_all(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_all(value)
 */
  __pyx_tuple__145 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_val, __pyx_n_s_alpha, __pyx_n_s_st, __pyx_n_s_na, __pyx_n_s_j); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_set_all, 2196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 2196, __pyx_L1_error)

  /* "ctf/tensor.pyx":2265
 *             self.permute(tsr.reshape(one_shape), pA)
 * 
 *     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 */
  __pyx_tuple__147 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_offset, __pyx_n_s_axis1, __pyx_n_s_axis2, __pyx_n_s_dtype, __pyx_n_s_out); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_trace, 2265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __pyx_tuple__149 = PyTuple_Pack(5, __pyx_int_0, __pyx_int_0, __pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "ctf/tensor.pyx":2305
 *         return ctf.tensor_aux.trace(self, offset, axis1, axis2, dtype, out)
 * 
 *     def diagonal(self, offset=0, axis1=0, axis2=1):             # <<<<<<<<<<<<<<
 *         """
 *         diagonal(offset=0, axis1=0, axis2=1)
 */
  __pyx_tuple__150 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_offset, __pyx_n_s_axis1, __pyx_n_s_axis2); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_diagonal, 2305, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __pyx_tuple__152 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);

  /* "ctf/tensor.pyx":2339
 *         return ctf.tensor_aux.diagonal(self,offset,axis1,axis2)
 * 
 *     def sum(self, axis = None, dtype = None, out = None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         sum(axis = None, dtype = None, out = None, keepdims = None)
 */
  __pyx_tuple__153 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_axis, __pyx_n_s_dtype, __pyx_n_s_out, __pyx_n_s_keepdims); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_sum, 2339, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 2339, __pyx_L1_error)

  /* "ctf/tensor.pyx":2376
 *         return ctf.tensor_aux.sum(self, axis, dtype, out, keepdims)
 * 
 *     def norm1(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm1()
 */
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_norm1, 2376, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 2376, __pyx_L1_error)

  /* "ctf/tensor.pyx":2400
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm2(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm2()
 */
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_norm2, 2400, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 2400, __pyx_L1_error)

  /* "ctf/tensor.pyx":2436
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm_infty(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm_infty()
 */
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_norm_infty, 2436, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(0, 2436, __pyx_L1_error)

  /* "ctf/tensor.pyx":2460
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def sparsify(self, threshold, take_abs=True):             # <<<<<<<<<<<<<<
 *         """
 *         sparsify()
 */
  __pyx_tuple__158 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_threshold, __pyx_n_s_take_abs, __pyx_n_s_thresh, __pyx_n_s_st, __pyx_n_s_na, __pyx_n_s_j, __pyx_n_s_A); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 2460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_sparsify, 2460, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 2460, __pyx_L1_error)

  /* "ctf/tensor.pyx":2481
 *         return A
 * 
 *     def to_nparray(self):             # <<<<<<<<<<<<<<
 *         """
 *         to_nparray()
 */
  __pyx_tuple__160 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_vals); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_to_nparray, 2481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(0, 2481, __pyx_L1_error)

  /* "ctf/tensor.pyx":2511
 *         return repr(self.to_nparray())
 * 
 *     def from_nparray(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         from_nparray(arr)
 */
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_from_nparray, 2511, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 2511, __pyx_L1_error)

  /* "ctf/tensor.pyx":2540
 *             self.write([], [])
 * 
 *     def take(self, indices, axis=None, out=None, mode='raise'):             # <<<<<<<<<<<<<<
 *         """
 *         take(indices, axis=None, out=None, mode='raise')
 */
  __pyx_tuple__163 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_indices, __pyx_n_s_axis, __pyx_n_s_out, __pyx_n_s_mode); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 2540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_take, 2540, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 2540, __pyx_L1_error)
  __pyx_tuple__165 = PyTuple_Pack(3, Py_None, Py_None, __pyx_n_s_raise); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 2540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "ctf/tensor.pyx":2595
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=self.dtype),op)
 * 
 *     def sample(tensor self, p):             # <<<<<<<<<<<<<<
 *         """
 *         sample(p)
 */
  __pyx_tuple__166 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_p); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_sample, 2595, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 2595, __pyx_L1_error)

  /* "ctf/tensor.pyx":2624
 *     # change the operators "<","<=","==","!=",">",">=" when applied to tensors
 *     # also for each operator we need to add the template.
 *     def _compare_tensors(tensor self, tensor b, op):             # <<<<<<<<<<<<<<
 *         new_shape = []
 *         for i in range(min(self.ndim,b.ndim)):
 */
  __pyx_tuple__168 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_b, __pyx_n_s_op, __pyx_n_s_new_shape, __pyx_n_s_i, __pyx_n_s_c); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ctf_tensor_pyx, __pyx_n_s_compare_tensors, 2624, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 2624, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__171 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float__1 = PyFloat_FromDouble(.1); if (unlikely(!__pyx_float__1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_3ctf_6tensor_tensor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_3ctf_6tensor_tensor_spec, NULL); if (unlikely(!__pyx_ptype_3ctf_6tensor_tensor)) __PYX_ERR(0, 73, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_3ctf_6tensor_tensor_spec, __pyx_ptype_3ctf_6tensor_tensor) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  #else
  __pyx_ptype_3ctf_6tensor_tensor = &__pyx_type_3ctf_6tensor_tensor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_3ctf_6tensor_tensor) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_3ctf_6tensor_tensor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_3ctf_6tensor_tensor->tp_dictoffset && __pyx_ptype_3ctf_6tensor_tensor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_3ctf_6tensor_tensor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_tensor, (PyObject *) __pyx_ptype_3ctf_6tensor_tensor) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_3ctf_6tensor_tensor) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 225, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(1, 809, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_number) __PYX_ERR(1, 811, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(1, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(1, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(1, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(1, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(1, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(1, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(1, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_character) __PYX_ERR(1, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ctf.partition"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ctf_9partition_partition = __Pyx_ImportType_3_0_8(__pyx_t_1, "ctf.partition", "partition", sizeof(struct __pyx_obj_3ctf_9partition_partition), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_3ctf_9partition_partition),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_3ctf_9partition_partition) __PYX_ERR(4, 11, __pyx_L1_error)
  __pyx_ptype_3ctf_9partition_idx_partition = __Pyx_ImportType_3_0_8(__pyx_t_1, "ctf.partition", "idx_partition", sizeof(struct __pyx_obj_3ctf_9partition_idx_partition), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_3ctf_9partition_idx_partition),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_3ctf_9partition_idx_partition) __PYX_ERR(4, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ctf.term"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3ctf_4term_term = __Pyx_ImportType_3_0_8(__pyx_t_1, "ctf.term", "term", sizeof(struct __pyx_obj_3ctf_4term_term), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_3ctf_4term_term),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_3ctf_4term_term) __PYX_ERR(5, 39, __pyx_L1_error)
  __pyx_ptype_3ctf_4term_itensor = __Pyx_ImportType_3_0_8(__pyx_t_1, "ctf.term", "itensor", sizeof(struct __pyx_obj_3ctf_4term_itensor), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_3ctf_4term_itensor),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_3ctf_4term_itensor) __PYX_ERR(5, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("ctf.chelper"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "int64_t_arr_py_to_c", (void (**)(void))&__pyx_f_3ctf_7chelper_int64_t_arr_py_to_c, "int64_t *(PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "int_arr_py_to_c", (void (**)(void))&__pyx_f_3ctf_7chelper_int_arr_py_to_c, "int *(PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "_cast_carray_as_python", (void (**)(void))&__pyx_f_3ctf_7chelper__cast_carray_as_python, "PyObject *(PyObject *, char *, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_tensor(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_tensor},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "tensor",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittensor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittensor(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_tensor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_tensor(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_tensor(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'tensor' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("tensor", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "tensor" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_tensor(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ctf__tensor) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ctf.tensor")) {
      if (unlikely((PyDict_SetItemString(modules, "ctf.tensor", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ctf/tensor.pyx":8
 * from libcpp cimport bool
 * cimport numpy as cnp
 * import numpy as np             # <<<<<<<<<<<<<<
 * from copy import deepcopy
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ctf/tensor.pyx":9
 * cimport numpy as cnp
 * import numpy as np
 * from copy import deepcopy             # <<<<<<<<<<<<<<
 * 
 * ctypedef double complex complex128_t
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_deepcopy);
  __Pyx_GIVEREF(__pyx_n_s_deepcopy);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_deepcopy)) __PYX_ERR(0, 9, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_copy, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deepcopy, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":13
 * ctypedef double complex complex128_t
 * ctypedef float complex complex64_t
 * import ctf.partition             # <<<<<<<<<<<<<<
 * import ctf.helper
 * import ctf.profile
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ctf_partition, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctf, __pyx_t_3) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":14
 * ctypedef float complex complex64_t
 * import ctf.partition
 * import ctf.helper             # <<<<<<<<<<<<<<
 * import ctf.profile
 * import ctf.tensor_aux
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ctf_helper, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctf, __pyx_t_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":15
 * import ctf.partition
 * import ctf.helper
 * import ctf.profile             # <<<<<<<<<<<<<<
 * import ctf.tensor_aux
 * #import ctf.term
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ctf_profile, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctf, __pyx_t_3) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":16
 * import ctf.helper
 * import ctf.profile
 * import ctf.tensor_aux             # <<<<<<<<<<<<<<
 * #import ctf.term
 * from ctf.term cimport itensor
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ctf_tensor_aux, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctf, __pyx_t_3) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":19
 * #import ctf.term
 * from ctf.term cimport itensor
 * import ctf.world             # <<<<<<<<<<<<<<
 * 
 * cimport ctf.chelper
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_ctf_world, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctf, __pyx_t_3) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":62
 * 
 * #from enum import Enum
 * def _enum(**enums):             # <<<<<<<<<<<<<<
 *     return type('Enum', (), enums)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_1_enum, 0, __pyx_n_s_enum, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enum, __pyx_t_3) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ctf/tensor.pyx":65
 *     return type('Enum', (), enums)
 * 
 * SYM = _enum(NS=0, SY=1, AS=2, SH=3)             # <<<<<<<<<<<<<<
 * #class SYM(Enum):
 * #  NS=0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_enum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_NS, __pyx_int_0) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_SY, __pyx_int_1) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_AS, __pyx_int_2) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_SH, __pyx_int_3) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SYM, __pyx_t_4) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":304
 *             return self.dt.nnz_tot
 * 
 *     def _bool_sum(tensor self):             # <<<<<<<<<<<<<<
 *         return sum_bool_tsr(self.dt)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_1_bool_sum, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__bool_sum, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_bool_sum, __pyx_t_4) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":308
 * 
 *     # convert the type of self and store the elements in self to B
 *     def _convert_type(tensor self, tensor B):             # <<<<<<<<<<<<<<
 *         conv_type(ctf.helper.type_index[self.dtype], ctf.helper.type_index[B.dtype], <ctensor*>self.dt, <ctensor*>B.dt);
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_3_convert_type, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__convert_type, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_convert_type, __pyx_t_4) < 0) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":312
 * 
 *     # get "shape" or dimensions of the ctensor
 *     def get_dims(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_dims()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_5get_dims, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_get_dims, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_get_dims, __pyx_t_4) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":325
 *         return self.shape
 * 
 *     def get_type(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_type()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_7get_type, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_get_type, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_get_type, __pyx_t_4) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":338
 *         return self.dtype
 * 
 *     def get_distribution(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.get_distribution()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_9get_distribution, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_get_distribution, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_get_distribution, __pyx_t_4) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":544
 * 
 * 
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.T(axes=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_15T, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_T, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_T, __pyx_t_4) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":569
 *         return ctf.tensor_aux.transpose(self)
 * 
 *     def transpose(self, *axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.transpose(*axes)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_17transpose, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_transpose, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_transpose, __pyx_t_4) < 0) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":600
 *             return ctf.tensor_aux.transpose(self)
 * 
 *     def _ufunc_interpret(self, tensor other, gen_tsr=True):             # <<<<<<<<<<<<<<
 *         if self.order != other.order:
 *             raise ValueError("Universal functions among tensors with different order, i.e. Fortran vs C are not currently supported")
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_19_ufunc_interpret, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__ufunc_interpret, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_ufunc_interpret, __pyx_t_4) < 0) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":826
 * 
 * 
 *     def _invert_elements(self):             # <<<<<<<<<<<<<<
 *         if self.dtype == np.float64:
 *             self.dt.true_divide[double](<ctensor*>self.dt)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_53_invert_elements, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__invert_elements, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_invert_elements, __pyx_t_4) < 0) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":851
 *         return ctf.tensor_aux.dot(self, other)
 * 
 *     def fill_random(self, mn=None, mx=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_random(mn=None, mx=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_57fill_random, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_fill_random, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__81);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_fill_random, __pyx_t_4) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":899
 *             raise ValueError('CTF PYTHON ERROR: bad dtype')
 * 
 *     def fill_sp_random(self, mn=None, mx=None, frac_sp=None):             # <<<<<<<<<<<<<<
 *         """
 *         tensor.fill_sp_random(mn=None, mx=None, frac_sp=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_59fill_sp_random, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_fill_sp_random, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__84);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_fill_sp_random, __pyx_t_4) < 0) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":950
 *     # for sparse tensor, file assumed to be text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def read_from_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_61read_from_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_read_from_file, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_read_from_file, __pyx_t_4) < 0) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":970
 *     # for sparse tensor, file created is text, with entries stored as i_1 ... i_order val if with_vals=True
 *     #   or i_1 ... i_order if with_vals=False
 *     def write_to_file(self, path, with_vals=True):             # <<<<<<<<<<<<<<
 *         if self.sp == True:
 *             if self.dtype == np.int32:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_63write_to_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_write_to_file, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_write_to_file, __pyx_t_4) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":987
 * 
 *     # the function that call the exp_helper in the C++ level
 *     def _exp_python(self, tensor A, cast = None, dtype = None):             # <<<<<<<<<<<<<<
 *         # when the casting is default that is "same kind"
 *         if cast is None:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_65_exp_python, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__exp_python, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__81);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_exp_python, __pyx_t_4) < 0) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1027
 *     # issue: when shape contains 1 such as [3,4,1], it seems that CTF in C++ does not support sum over empty dims -> sum over 1.
 * 
 *     def all(tensor self, axis=None, out=None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         all(axis=None, out=None, keepdims = False)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_67all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_all, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__84);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_all, __pyx_t_4) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1228
 *             raise ValueError("an integer is required")
 * 
 *     def i(self, string):             # <<<<<<<<<<<<<<
 *         """
 *         i(string)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_69i, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_i, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_i, __pyx_t_4) < 0) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1257
 *             return itensor(self, string)
 * 
 *     def prnt(self):             # <<<<<<<<<<<<<<
 *         """
 *         prnt()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_71prnt, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_prnt, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_prnt, __pyx_t_4) < 0) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1274
 *         self.dt.prnt()
 * 
 *     def real(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         real(value = None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_73real, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_real, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__97);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_real, __pyx_t_4) < 0) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1319
 *                 self.__cinit__(copy=value)
 * 
 *     def imag(self,tensor value = None):             # <<<<<<<<<<<<<<
 *         """
 *         imag(value = None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_75imag, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_imag, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__97);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_imag, __pyx_t_4) < 0) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1367
 *                 raise ValueError("CTF ERROR: cannot call imag with value on non-complex single/double precision tensor")
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         copy()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_77copy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_copy, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_copy, __pyx_t_4) < 0) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1391
 *         return B
 * 
 *     def reshape(tensor self, *integer):             # <<<<<<<<<<<<<<
 *         """
 *         reshape(*integer)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_79reshape, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_reshape, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_reshape, __pyx_t_4) < 0) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1482
 *             return None
 * 
 *     def ravel(self, order="F"):             # <<<<<<<<<<<<<<
 *         """
 *         ravel(order="F")
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_81ravel, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_ravel, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__104);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_ravel, __pyx_t_4) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1501
 *         return ctf.tensor_aux.ravel(self, order)
 * 
 *     def read(self, inds, vals=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         read(inds, vals=None, a=None, b=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_83read, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_read, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__84);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_read, __pyx_t_4) < 0) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1565
 *             return gvals
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         """
 *         item()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_85item, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_item, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_item, __pyx_t_4) < 0) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1580
 *         return arr.item()
 * 
 *     def astype(self, dtype, order='F', casting='unsafe'):             # <<<<<<<<<<<<<<
 *         """
 *         astype(dtype, order='F', casting='unsafe')
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_87astype, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_astype, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__111);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_astype, __pyx_t_4) < 0) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1685
 *             raise ValueError("casting must be one of 'no', 'equiv', 'safe', 'same_kind', or 'unsafe'")
 * 
 *     def read_local(self, unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_89read_local, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_read_local, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_read_local, __pyx_t_4) < 0) __PYX_ERR(0, 1685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1706
 *         return inds, vals
 * 
 *     def dot(self, other, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         dot(other, out=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_91dot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_dot, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__97);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_dot, __pyx_t_4) < 0) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1739
 *         return ctf.tensor_aux.dot(self,other,out)
 * 
 *     def tensordot(self, other, axes):             # <<<<<<<<<<<<<<
 *         """
 *         tensordot(other, axes=2)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_93tensordot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_tensordot, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_tensordot, __pyx_t_4) < 0) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1779
 * 
 * 
 *     def read_local_nnz(self,unpack_sym=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_local_nnz()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_95read_local_nnz, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_read_local_nnz, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_read_local_nnz, __pyx_t_4) < 0) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1800
 *         return inds, vals
 * 
 *     def tot_size(self, unpack=True):             # <<<<<<<<<<<<<<
 *         return self.dt.get_tot_size(not unpack)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_97tot_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_tot_size, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_tot_size, __pyx_t_4) < 0) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1803
 *         return self.dt.get_tot_size(not unpack)
 * 
 *     def read_all(self, arr=None, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all(arr=None, unpack=True)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_99read_all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_read_all, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__123);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_read_all, __pyx_t_4) < 0) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1840
 *             arr[:] = vals[:]
 * 
 *     def read_all_nnz(self, unpack=True):             # <<<<<<<<<<<<<<
 *         """
 *         read_all_nnz(arr=None, unpack=True)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_101read_all_nnz, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_read_all_nnz, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_read_all_nnz, __pyx_t_4) < 0) __PYX_ERR(0, 1840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1863
 *         return inds, vals
 * 
 *     def __read_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __read_all(arr)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_103_tensor__read_all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor___read_all, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_tensor__read_all, __pyx_t_4) < 0) __PYX_ERR(0, 1863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1878
 *         arr[:] = vals[:]
 * 
 *     def __write_all(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         __write_all(arr)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_105_tensor__write_all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor___write_all, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_tensor__write_all, __pyx_t_4) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1894
 *         vals[:] = rarr[:]
 * 
 *     def conj(self):             # <<<<<<<<<<<<<<
 *         """
 *         conj()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_107conj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_conj, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__130)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_conj, __pyx_t_4) < 0) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":1915
 *         return ctf.tensor_aux.conj(self)
 * 
 *     def permute(self, tensor A, p_A=None, p_B=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         permute(self, tensor A, p_A=None, p_B=None, a=None, b=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_109permute, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_permute, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__133);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_permute, __pyx_t_4) < 0) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2001
 *             free(permutation_B)
 * 
 *     def write(self, inds, vals, a=None, b=None):             # <<<<<<<<<<<<<<
 *         """
 *         write(inds, vals, a=None, b=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_111write, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_write, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__81);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_write, __pyx_t_4) < 0) __PYX_ERR(0, 2001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2062
 *         if b is not None:
 *             free(beta)
 *     put = write             # <<<<<<<<<<<<<<
 * 
 *     def _get_slice(self, offsets, ends):
 */
  __Pyx_GetNameInClass(__pyx_t_4, (PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_put, __pyx_t_4) < 0) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2064
 *     put = write
 * 
 *     def _get_slice(self, offsets, ends):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_113_get_slice, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__get_slice, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_get_slice, __pyx_t_4) < 0) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2090
 *         return A
 * 
 *     def _write_slice(self, offsets, ends, init_A, A_offsets=None, A_ends=None, a=None, b=None):             # <<<<<<<<<<<<<<
 *         cdef char * alpha
 *         cdef char * beta
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_115_write_slice, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__write_slice, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__133);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_write_slice, __pyx_t_4) < 0) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2148
 *         free(caoffs)
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *         return tensor(copy=self)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_117__deepcopy__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor___deepcopy, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_deepcopy_2, __pyx_t_4) < 0) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2176
 *             return tsr.reshape(corr_shape)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         mystr = ctf.helper._get_num_str(self.ndim)
 *         self.i(mystr).scl(0.0)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_121set_zero, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_set_zero, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_set_zero, __pyx_t_4) < 0) __PYX_ERR(0, 2176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2180
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         set_zero()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_123set_zero, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_set_zero, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_set_zero, __pyx_t_4) < 0) __PYX_ERR(0, 2180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2196
 *         self.i(mystr).scl(0.0)
 * 
 *     def set_all(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         set_all(value)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_125set_all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_set_all, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_set_all, __pyx_t_4) < 0) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2265
 *             self.permute(tsr.reshape(one_shape), pA)
 * 
 *     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):             # <<<<<<<<<<<<<<
 *         """
 *         trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_129trace, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_trace, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__149);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_trace, __pyx_t_4) < 0) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2305
 *         return ctf.tensor_aux.trace(self, offset, axis1, axis2, dtype, out)
 * 
 *     def diagonal(self, offset=0, axis1=0, axis2=1):             # <<<<<<<<<<<<<<
 *         """
 *         diagonal(offset=0, axis1=0, axis2=1)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_131diagonal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_diagonal, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__152);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_diagonal, __pyx_t_4) < 0) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2339
 *         return ctf.tensor_aux.diagonal(self,offset,axis1,axis2)
 * 
 *     def sum(self, axis = None, dtype = None, out = None, keepdims = None):             # <<<<<<<<<<<<<<
 *         """
 *         sum(axis = None, dtype = None, out = None, keepdims = None)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_133sum, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_sum, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__133);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_sum, __pyx_t_4) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2376
 *         return ctf.tensor_aux.sum(self, axis, dtype, out, keepdims)
 * 
 *     def norm1(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm1()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_135norm1, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_norm1, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_norm1, __pyx_t_4) < 0) __PYX_ERR(0, 2376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2400
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm2(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm2()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_137norm2, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_norm2, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_norm2, __pyx_t_4) < 0) __PYX_ERR(0, 2400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2436
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def norm_infty(self):             # <<<<<<<<<<<<<<
 *         """
 *         norm_infty()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_139norm_infty, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_norm_infty, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_norm_infty, __pyx_t_4) < 0) __PYX_ERR(0, 2436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2460
 *             raise ValueError('CTF PYTHON ERROR: norm not present for this dtype')
 * 
 *     def sparsify(self, threshold, take_abs=True):             # <<<<<<<<<<<<<<
 *         """
 *         sparsify()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_141sparsify, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_sparsify, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__77);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_sparsify, __pyx_t_4) < 0) __PYX_ERR(0, 2460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2481
 *         return A
 * 
 *     def to_nparray(self):             # <<<<<<<<<<<<<<
 *         """
 *         to_nparray()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_143to_nparray, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_to_nparray, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_to_nparray, __pyx_t_4) < 0) __PYX_ERR(0, 2481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2511
 *         return repr(self.to_nparray())
 * 
 *     def from_nparray(self, arr):             # <<<<<<<<<<<<<<
 *         """
 *         from_nparray(arr)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_147from_nparray, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_from_nparray, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_from_nparray, __pyx_t_4) < 0) __PYX_ERR(0, 2511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2540
 *             self.write([], [])
 * 
 *     def take(self, indices, axis=None, out=None, mode='raise'):             # <<<<<<<<<<<<<<
 *         """
 *         take(indices, axis=None, out=None, mode='raise')
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_149take, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_take, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__165);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_take, __pyx_t_4) < 0) __PYX_ERR(0, 2540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2595
 *             return self._compare_tensors(ctf.tensor_aux.astensor(b,dtype=self.dtype),op)
 * 
 *     def sample(tensor self, p):             # <<<<<<<<<<<<<<
 *         """
 *         sample(p)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_153sample, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor_sample, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_sample, __pyx_t_4) < 0) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "ctf/tensor.pyx":2624
 *     # change the operators "<","<=","==","!=",">",">=" when applied to tensors
 *     # also for each operator we need to add the template.
 *     def _compare_tensors(tensor self, tensor b, op):             # <<<<<<<<<<<<<<
 *         new_shape = []
 *         for i in range(min(self.ndim,b.ndim)):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_155_compare_tensors, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor__compare_tensors, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_3ctf_6tensor_tensor, __pyx_n_s_compare_tensors, __pyx_t_4) < 0) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_3ctf_6tensor_tensor);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_157__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor___reduce_cython, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3ctf_6tensor_6tensor_159__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tensor___setstate_cython, NULL, __pyx_n_s_ctf_tensor, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ctf/tensor.pyx":2667
 * 
 * 
 * ndarray = tensor             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ndarray, ((PyObject *)__pyx_ptype_3ctf_6tensor_tensor)) < 0) __PYX_ERR(0, 2667, __pyx_L1_error)

  /* "ctf/tensor.pyx":1
 * from libc.stdlib cimport malloc, free             # <<<<<<<<<<<<<<
 * from libc.stdint cimport int64_t
 * from libc.stdint cimport int32_t
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(28); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_T_line_544, __pyx_kp_u_tensor_T_axes_None_Permute_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_transpose_line_569, __pyx_kp_u_tensor_transpose_axes_Return_th) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_fill_random_line_851, __pyx_kp_u_tensor_fill_random_mn_None_mx_N) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_fill_sp_random_line_899, __pyx_kp_u_tensor_fill_sp_random_mn_None_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_all_line_1027, __pyx_kp_u_all_axis_None_out_None_keepdims) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_i_line_1228, __pyx_kp_u_i_string_Core_function_on_summi) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_prnt_line_1257, __pyx_kp_u_prnt_Function_to_print_the_non) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_real_line_1274, __pyx_kp_u_real_value_None_Return_real_par) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_imag_line_1319, __pyx_kp_u_imag_value_None_Return_imaginar) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_copy_line_1367, __pyx_kp_u_copy_Copy_the_tensor_to_a_new_t) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_reshape_line_1391, __pyx_kp_u_reshape_integer_Return_a_new_te) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_ravel_line_1482, __pyx_kp_u_ravel_order_F_Return_the_flatte) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_astype_line_1580, __pyx_kp_u_astype_dtype_order_F_casting_un) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_dot_line_1706, __pyx_kp_u_dot_other_out_None_Return_the_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_tensordot_line_1739, __pyx_kp_u_tensordot_other_axes_2_Return_t) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_conj_line_1894, __pyx_kp_u_conj_Return_the_self_conjugate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_set_zero_line_2180, __pyx_kp_u_set_zero_Set_all_elements_in_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_set_all_line_2196, __pyx_kp_u_set_all_value_Set_all_elements) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_trace_line_2265, __pyx_kp_u_trace_offset_0_axis1_0_axis2_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_diagonal_line_2305, __pyx_kp_u_diagonal_offset_0_axis1_0_axis2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_sum_line_2339, __pyx_kp_u_sum_axis_None_dtype_None_out_No) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_norm1_line_2376, __pyx_kp_u_norm1_1_norm_of_the_tensor_Retu) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_norm2_line_2400, __pyx_kp_u_norm2_2_norm_of_the_tensor_Retu) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_norm_infty_line_2436, __pyx_kp_u_norm_infty_Infinity_norm_of_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_to_nparray_line_2481, __pyx_kp_u_to_nparray_Convert_tensor_to_nu) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_from_nparray_line_2511, __pyx_kp_u_from_nparray_arr_Convert_numpy) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_take_line_2540, __pyx_kp_u_take_indices_axis_None_out_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_tensor_sample_line_2595, __pyx_kp_u_sample_p_Extract_a_sample_of_th) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init ctf.tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ctf.tensor");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        __Pyx_TypeName c_type_name = __Pyx_PyType_GetName(Py_TYPE(c));
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but " __Pyx_FMT_TYPENAME " found",
            c_type_name);
        __Pyx_DECREF_TypeName(c_type_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object does not support slice %.10s",
        obj_type_name, value ? "assignment" : "deletion");
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return -1;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long b = PyInt_AS_LONG(op2);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op2))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op2))) {
            b = __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                CYTHON_UNUSED_VAR(a);
                CYTHON_UNUSED_VAR(b);
                #ifdef HAVE_LONG_LONG
                llb = b;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - (unsigned long)b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            if (__Pyx_PyLong_IsZero(op1) == 1) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                Py_RETURN_FALSE;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
#if CYTHON_ASSUME_SAFE_MACROS
        double value = PyFloat_AS_DOUBLE(float_value);
#else
        double value = PyFloat_AsDouble(float_value);
#endif
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pynumber_float */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {
    double val;
    if (PyLong_CheckExact(obj)) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (likely(__Pyx_PyLong_IsCompact(obj))) {
            val = (double) __Pyx_PyLong_CompactValue(obj);
            goto no_error;
        }
#endif
        val = PyLong_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj)) {
        val = __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        val = __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        val = __Pyx_PyByteArray_AsDouble(obj);
    } else {
        return PyNumber_Float(obj);
    }
    if (unlikely(val == -1 && PyErr_Occurred())) {
        return NULL;
    }
#if CYTHON_USE_PYLONG_INTERNALS
no_error:
#endif
    return PyFloat_FromDouble(val);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__55;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__56);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* FromPy */
static __pyx_t_float_complex __Pyx_PyComplex_As___pyx_t_float_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_float_complex_from_parts(
               (float)cval.real,
               (float)cval.imag);
}

/* FromPy */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(char));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int32_t neg_one = (int32_t) -1, const_zero = (int32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int32_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int32_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int32_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) >= 2 * PyLong_SHIFT)) {
                                return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int32_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) >= 3 * PyLong_SHIFT)) {
                                return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int32_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) >= 4 * PyLong_SHIFT)) {
                                return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int32_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int32_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int32_t) (((int32_t)-1)*(((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int32_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int32_t) ((((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int32_t) (((int32_t)-1)*(((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int32_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int32_t) ((((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int32_t) (((int32_t)-1)*(((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int32_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int32_t) ((((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int32_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int32_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int32_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int32_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int32_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int32_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int32_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int32_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int32_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int32_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int32_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int32_t) 1) << (sizeof(int32_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                                return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                                return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                                return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int64_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int64_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int64_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int64_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int64_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int64_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int64_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int64_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int64_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int64_t) 1) << (sizeof(int64_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                                return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                                return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                                return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(char) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                                return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                                return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                                return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(char) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (char) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (char) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (char) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (char) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (char) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(char) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((char) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(char) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((char) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((char) 1) << (sizeof(char) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__173);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_8
#define __PYX_HAVE_RT_ImportFunction_3_0_8
static int __Pyx_ImportFunction_3_0_8(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
